
ADCS_S2S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010490  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001280  080105a0  080105a0  000205a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011820  08011820  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  08011820  08011820  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011820  08011820  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011820  08011820  00021820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011824  08011824  00021824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f3c  200001e8  08011a10  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  08011a10  00031124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b598  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003663  00000000  00000000  0004b7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0004ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0004ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab9e  00000000  00000000  00050f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015786  00000000  00000000  0006babe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f637  00000000  00000000  00081244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011087b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006374  00000000  00000000  001108d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08010588 	.word	0x08010588

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08010588 	.word	0x08010588

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	460c      	mov	r4, r1
 80011cc:	4605      	mov	r5, r0
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <myDebug>:
 *      Author: Dell
 */

#include "ADCS_Debug.h"

void myDebug(const char *fmt, ...) {
 8001238:	b40f      	push	{r0, r1, r2, r3}
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	2164      	movs	r1, #100	; 0x64
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <myDebug+0x40>)
 800124e:	f009 ff5d 	bl	800b10c <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <myDebug+0x40>)
 8001254:	f000 f814 	bl	8001280 <bufferSize>
 8001258:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	4905      	ldr	r1, [pc, #20]	; (8001278 <myDebug+0x40>)
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <myDebug+0x44>)
 8001266:	f007 f909 	bl	800847c <HAL_UART_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001274:	b004      	add	sp, #16
 8001276:	4770      	bx	lr
 8001278:	20000204 	.word	0x20000204
 800127c:	20000de8 	.word	0x20000de8

08001280 <bufferSize>:

int bufferSize(char *buff) {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800128c:	e002      	b.n	8001294 <bufferSize+0x14>
		i++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f6      	bne.n	800128e <bufferSize+0xe>
	return i;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <CalTorque>:
/*
 * B-dot algorithm implementation to calculate required magnetic moment
 *
 */
void CalTorque(imu_filter pfilt_att, lsm9ds1_t *pBdata,
		sat_att_combined pcombined_sat_att) {
 80012b0:	b084      	sub	sp, #16
 80012b2:	b5b0      	push	{r4, r5, r7, lr}
 80012b4:	b092      	sub	sp, #72	; 0x48
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float sp = sinf(pcombined_sat_att.roll * DEG2RAD);
 80012c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8af 	bl	8000428 <__aeabi_f2d>
 80012ca:	a3ab      	add	r3, pc, #684	; (adr r3, 8001578 <CalTorque+0x2c8>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f902 	bl	80004d8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fbf4 	bl	8000ac8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00c fd62 	bl	800ddac <sinf>
 80012e8:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(pcombined_sat_att.roll * DEG2RAD);
 80012ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f89a 	bl	8000428 <__aeabi_f2d>
 80012f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8001578 <CalTorque+0x2c8>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f8ed 	bl	80004d8 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbdf 	bl	8000ac8 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4618      	mov	r0, r3
 800130e:	f00c fd15 	bl	800dd3c <cosf>
 8001312:	6438      	str	r0, [r7, #64]	; 0x40
	float st = sinf(pcombined_sat_att.pitch * DEG2RAD);
 8001314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	a396      	add	r3, pc, #600	; (adr r3, 8001578 <CalTorque+0x2c8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbca 	bl	8000ac8 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	4618      	mov	r0, r3
 8001338:	f00c fd38 	bl	800ddac <sinf>
 800133c:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ct = cosf(pcombined_sat_att.pitch * DEG2RAD);
 800133e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	a38b      	add	r3, pc, #556	; (adr r3, 8001578 <CalTorque+0x2c8>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f8c3 	bl	80004d8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fbb5 	bl	8000ac8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f00c fceb 	bl	800dd3c <cosf>
 8001366:	63b8      	str	r0, [r7, #56]	; 0x38

	// Compute angular velocities
	float omega_x = pfilt_att.p_rps
 8001368:	6e7c      	ldr	r4, [r7, #100]	; 0x64
			+ st * (pfilt_att.q_rps * sp + pfilt_att.r_rps * cp);
 800136a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800136c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd08 	bl	8000d84 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	461d      	mov	r5, r3
 8001378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800137a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fd01 	bl	8000d84 <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fbf4 	bl	8000b74 <__addsf3>
 800138c:	4603      	mov	r3, r0
 800138e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcf7 	bl	8000d84 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
	float omega_x = pfilt_att.p_rps
 8001398:	4619      	mov	r1, r3
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fbea 	bl	8000b74 <__addsf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
	float omega_y = pfilt_att.q_rps * cp - pfilt_att.r_rps * sp;
 80013a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fceb 	bl	8000d84 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461c      	mov	r4, r3
 80013b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fce4 	bl	8000d84 <__aeabi_fmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fbd5 	bl	8000b70 <__aeabi_fsub>
 80013c6:	4603      	mov	r3, r0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	float omega_z = (pfilt_att.q_rps * sp + pfilt_att.r_rps * cp) / ct;
 80013ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fcd8 	bl	8000d84 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461c      	mov	r4, r3
 80013d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fcd1 	bl	8000d84 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fbc4 	bl	8000b74 <__addsf3>
 80013ec:	4603      	mov	r3, r0
 80013ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd7b 	bl	8000eec <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	float Wx = omega_x;
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
	float Wy = omega_y;
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
	float Wz = omega_z;
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	623b      	str	r3, [r7, #32]

	myDebug(" wx = %.2f\r\n", Wx);
 8001406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001408:	f7ff f80e 	bl	8000428 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	485b      	ldr	r0, [pc, #364]	; (8001580 <CalTorque+0x2d0>)
 8001412:	f7ff ff11 	bl	8001238 <myDebug>
	myDebug(" wy = %.2f\r\n", Wy);
 8001416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001418:	f7ff f806 	bl	8000428 <__aeabi_f2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4858      	ldr	r0, [pc, #352]	; (8001584 <CalTorque+0x2d4>)
 8001422:	f7ff ff09 	bl	8001238 <myDebug>
	myDebug(" wz = %.2f\r\n", Wz);
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	f7fe fffe 	bl	8000428 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4855      	ldr	r0, [pc, #340]	; (8001588 <CalTorque+0x2d8>)
 8001432:	f7ff ff01 	bl	8001238 <myDebug>

	angular_error[0] = desired_Wx - Wx;
 8001436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001438:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800143c:	f7ff fb98 	bl	8000b70 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b51      	ldr	r3, [pc, #324]	; (800158c <CalTorque+0x2dc>)
 8001446:	601a      	str	r2, [r3, #0]
	angular_error[1] = desired_Wy - Wy;
 8001448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800144e:	f7ff fb8f 	bl	8000b70 <__aeabi_fsub>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b4d      	ldr	r3, [pc, #308]	; (800158c <CalTorque+0x2dc>)
 8001458:	605a      	str	r2, [r3, #4]
	angular_error[2] = desired_Wz - Wz;
 800145a:	6a39      	ldr	r1, [r7, #32]
 800145c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001460:	f7ff fb86 	bl	8000b70 <__aeabi_fsub>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <CalTorque+0x2dc>)
 800146a:	609a      	str	r2, [r3, #8]

	if (fabs(angular_error[0]) > ERROR_THRESHOLD
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <CalTorque+0x2dc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001474:	4946      	ldr	r1, [pc, #280]	; (8001590 <CalTorque+0x2e0>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe40 	bl	80010fc <__aeabi_fcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <CalTorque+0x200>
			|| fabs(angular_error[1]) > ERROR_THRESHOLD
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <CalTorque+0x2dc>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800148a:	4941      	ldr	r1, [pc, #260]	; (8001590 <CalTorque+0x2e0>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe35 	bl	80010fc <__aeabi_fcmpgt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <CalTorque+0x200>
			|| fabs(angular_error[2]) > ERROR_THRESHOLD) {
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <CalTorque+0x2dc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a0:	493b      	ldr	r1, [pc, #236]	; (8001590 <CalTorque+0x2e0>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe2a 	bl	80010fc <__aeabi_fcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 812b 	beq.w	8001706 <CalTorque+0x456>

		//magnetic fields from magnetometer
		float Bx = pfilt_att.mx_ut;
 80014b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014b2:	61fb      	str	r3, [r7, #28]
		float By = pfilt_att.my_ut;
 80014b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014b6:	61bb      	str	r3, [r7, #24]
		float Bz = pfilt_att.mz_ut;
 80014b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014ba:	617b      	str	r3, [r7, #20]

		myDebug(" Bx = %.2f\r\n", Bx);
 80014bc:	69f8      	ldr	r0, [r7, #28]
 80014be:	f7fe ffb3 	bl	8000428 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4833      	ldr	r0, [pc, #204]	; (8001594 <CalTorque+0x2e4>)
 80014c8:	f7ff feb6 	bl	8001238 <myDebug>
		myDebug(" By = %.2f\r\n", By);
 80014cc:	69b8      	ldr	r0, [r7, #24]
 80014ce:	f7fe ffab 	bl	8000428 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4830      	ldr	r0, [pc, #192]	; (8001598 <CalTorque+0x2e8>)
 80014d8:	f7ff feae 	bl	8001238 <myDebug>
		myDebug(" Bz = %.2f\r\n", Bz);
 80014dc:	6978      	ldr	r0, [r7, #20]
 80014de:	f7fe ffa3 	bl	8000428 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <CalTorque+0x2ec>)
 80014e8:	f7ff fea6 	bl	8001238 <myDebug>

		//calculate rate of change of magnetic field (dB/dt)
		float dBx_dt = Wy * Bz - Wz * By;
 80014ec:	6979      	ldr	r1, [r7, #20]
 80014ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f0:	f7ff fc48 	bl	8000d84 <__aeabi_fmul>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461c      	mov	r4, r3
 80014f8:	69b9      	ldr	r1, [r7, #24]
 80014fa:	6a38      	ldr	r0, [r7, #32]
 80014fc:	f7ff fc42 	bl	8000d84 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb33 	bl	8000b70 <__aeabi_fsub>
 800150a:	4603      	mov	r3, r0
 800150c:	613b      	str	r3, [r7, #16]
		float dBy_dt = Wz * Bx - Wx * Bz;
 800150e:	69f9      	ldr	r1, [r7, #28]
 8001510:	6a38      	ldr	r0, [r7, #32]
 8001512:	f7ff fc37 	bl	8000d84 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	461c      	mov	r4, r3
 800151a:	6979      	ldr	r1, [r7, #20]
 800151c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800151e:	f7ff fc31 	bl	8000d84 <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
 8001524:	4619      	mov	r1, r3
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fb22 	bl	8000b70 <__aeabi_fsub>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
		float dBz_dt = Wx * By - Wy * Bx;
 8001530:	69b9      	ldr	r1, [r7, #24]
 8001532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001534:	f7ff fc26 	bl	8000d84 <__aeabi_fmul>
 8001538:	4603      	mov	r3, r0
 800153a:	461c      	mov	r4, r3
 800153c:	69f9      	ldr	r1, [r7, #28]
 800153e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001540:	f7ff fc20 	bl	8000d84 <__aeabi_fmul>
 8001544:	4603      	mov	r3, r0
 8001546:	4619      	mov	r1, r3
 8001548:	4620      	mov	r0, r4
 800154a:	f7ff fb11 	bl	8000b70 <__aeabi_fsub>
 800154e:	4603      	mov	r3, r0
 8001550:	60bb      	str	r3, [r7, #8]

		myDebug("Desired Magnetic Moment\n");
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <CalTorque+0x2f0>)
 8001554:	f7ff fe70 	bl	8001238 <myDebug>
		//calculate the desired magnetic moment

		mag_moment_bdot.MomentX = -Kp * dBx_dt;
 8001558:	4912      	ldr	r1, [pc, #72]	; (80015a4 <CalTorque+0x2f4>)
 800155a:	6938      	ldr	r0, [r7, #16]
 800155c:	f7ff fc12 	bl	8000d84 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <CalTorque+0x2f8>)
 8001566:	601a      	str	r2, [r3, #0]
		mag_moment_bdot.MomentY = -Kp * dBy_dt;
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <CalTorque+0x2f4>)
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fc0a 	bl	8000d84 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	e01a      	b.n	80015ac <CalTorque+0x2fc>
 8001576:	bf00      	nop
 8001578:	a226e211 	.word	0xa226e211
 800157c:	3f91df46 	.word	0x3f91df46
 8001580:	080105fc 	.word	0x080105fc
 8001584:	0801060c 	.word	0x0801060c
 8001588:	0801061c 	.word	0x0801061c
 800158c:	2000038c 	.word	0x2000038c
 8001590:	3e4ccccd 	.word	0x3e4ccccd
 8001594:	0801062c 	.word	0x0801062c
 8001598:	0801063c 	.word	0x0801063c
 800159c:	0801064c 	.word	0x0801064c
 80015a0:	0801065c 	.word	0x0801065c
 80015a4:	bdcccccd 	.word	0xbdcccccd
 80015a8:	20000398 	.word	0x20000398
 80015ac:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <CalTorque+0x4b8>)
 80015ae:	605a      	str	r2, [r3, #4]
		mag_moment_bdot.MomentZ = -Kp * dBz_dt;
 80015b0:	496e      	ldr	r1, [pc, #440]	; (800176c <CalTorque+0x4bc>)
 80015b2:	68b8      	ldr	r0, [r7, #8]
 80015b4:	f7ff fbe6 	bl	8000d84 <__aeabi_fmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <CalTorque+0x4b8>)
 80015be:	609a      	str	r2, [r3, #8]

		myDebug(" MomentX = %.2f\r\n", mag_moment_bdot.MomentX);
 80015c0:	4b69      	ldr	r3, [pc, #420]	; (8001768 <CalTorque+0x4b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff2f 	bl	8000428 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4868      	ldr	r0, [pc, #416]	; (8001770 <CalTorque+0x4c0>)
 80015d0:	f7ff fe32 	bl	8001238 <myDebug>
		myDebug(" MomentY = %.2f\r\n", mag_moment_bdot.MomentY);
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <CalTorque+0x4b8>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff25 	bl	8000428 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4864      	ldr	r0, [pc, #400]	; (8001774 <CalTorque+0x4c4>)
 80015e4:	f7ff fe28 	bl	8001238 <myDebug>
		myDebug(" MomentZ = %.2f\r\n", mag_moment_bdot.MomentZ);
 80015e8:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <CalTorque+0x4b8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff1b 	bl	8000428 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4860      	ldr	r0, [pc, #384]	; (8001778 <CalTorque+0x4c8>)
 80015f8:	f7ff fe1e 	bl	8001238 <myDebug>
		myDebug(" MAX_MOMENT_MTQ = %.2f\r\n", MAX_MOMENT_MTQ);
 80015fc:	a356      	add	r3, pc, #344	; (adr r3, 8001758 <CalTorque+0x4a8>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	485e      	ldr	r0, [pc, #376]	; (800177c <CalTorque+0x4cc>)
 8001604:	f7ff fe18 	bl	8001238 <myDebug>
		myDebug(" MAX_DUTY_CYCLE = %.2f\r\n", MAX_DUTY_CYCLE);
 8001608:	a355      	add	r3, pc, #340	; (adr r3, 8001760 <CalTorque+0x4b0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	485c      	ldr	r0, [pc, #368]	; (8001780 <CalTorque+0x4d0>)
 8001610:	f7ff fe12 	bl	8001238 <myDebug>

		mag_moment_bdot.MomentY = 0.2;
 8001614:	4b54      	ldr	r3, [pc, #336]	; (8001768 <CalTorque+0x4b8>)
 8001616:	4a5b      	ldr	r2, [pc, #364]	; (8001784 <CalTorque+0x4d4>)
 8001618:	605a      	str	r2, [r3, #4]
		mag_moment_bdot.MomentZ = 0.2;
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <CalTorque+0x4b8>)
 800161c:	4a59      	ldr	r2, [pc, #356]	; (8001784 <CalTorque+0x4d4>)
 800161e:	609a      	str	r2, [r3, #8]
//		MomentY = fminf(fmaxf(MomentY, -MAX_MOMENT_MTQ), MAX_MOMENT_MTQ);
//		MomentZ = fminf(fmaxf(MomentZ, -MAX_MOMENT_MTQ), MAX_MOMENT_MTQ);

//calculate PWM duty cycles based on maximum moment

		float maxDutyCycle = 28800.00;
 8001620:	4b59      	ldr	r3, [pc, #356]	; (8001788 <CalTorque+0x4d8>)
 8001622:	607b      	str	r3, [r7, #4]

		mag_moment_bdot.Dy = (mag_moment_bdot.MomentY / MAX_MOMENT_MTQ)
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <CalTorque+0x4b8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4956      	ldr	r1, [pc, #344]	; (8001784 <CalTorque+0x4d4>)
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc5e 	bl	8000eec <__aeabi_fdiv>
 8001630:	4603      	mov	r3, r0
				* MAX_DUTY_CYCLE;
 8001632:	4955      	ldr	r1, [pc, #340]	; (8001788 <CalTorque+0x4d8>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fba5 	bl	8000d84 <__aeabi_fmul>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
		mag_moment_bdot.Dy = (mag_moment_bdot.MomentY / MAX_MOMENT_MTQ)
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <CalTorque+0x4b8>)
 8001640:	60da      	str	r2, [r3, #12]
		mag_moment_bdot.Dz = (mag_moment_bdot.MomentZ / MAX_MOMENT_MTQ)
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <CalTorque+0x4b8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	494f      	ldr	r1, [pc, #316]	; (8001784 <CalTorque+0x4d4>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc4f 	bl	8000eec <__aeabi_fdiv>
 800164e:	4603      	mov	r3, r0
				* MAX_DUTY_CYCLE;
 8001650:	494d      	ldr	r1, [pc, #308]	; (8001788 <CalTorque+0x4d8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb96 	bl	8000d84 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
		mag_moment_bdot.Dz = (mag_moment_bdot.MomentZ / MAX_MOMENT_MTQ)
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <CalTorque+0x4b8>)
 800165e:	611a      	str	r2, [r3, #16]

		mag_moment_bdot.Dy_per = (mag_moment_bdot.Dy / maxDutyCycle);
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <CalTorque+0x4b8>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc40 	bl	8000eec <__aeabi_fdiv>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <CalTorque+0x4b8>)
 8001672:	615a      	str	r2, [r3, #20]
		mag_moment_bdot.Dz_per = (mag_moment_bdot.Dz / maxDutyCycle);
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <CalTorque+0x4b8>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc36 	bl	8000eec <__aeabi_fdiv>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	4b38      	ldr	r3, [pc, #224]	; (8001768 <CalTorque+0x4b8>)
 8001686:	619a      	str	r2, [r3, #24]

		myDebug("Required Duty Cycle\n");
 8001688:	4840      	ldr	r0, [pc, #256]	; (800178c <CalTorque+0x4dc>)
 800168a:	f7ff fdd5 	bl	8001238 <myDebug>
		myDebug(" Dy = %.2f\r\n", mag_moment_bdot.Dy);
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <CalTorque+0x4b8>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fec8 	bl	8000428 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	483c      	ldr	r0, [pc, #240]	; (8001790 <CalTorque+0x4e0>)
 800169e:	f7ff fdcb 	bl	8001238 <myDebug>
		myDebug(" Dz = %.2f\r\n", mag_moment_bdot.Dz);
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <CalTorque+0x4b8>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe febe 	bl	8000428 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4838      	ldr	r0, [pc, #224]	; (8001794 <CalTorque+0x4e4>)
 80016b2:	f7ff fdc1 	bl	8001238 <myDebug>
		myDebug("----- MTQ enabled !!! -----\n");
 80016b6:	4838      	ldr	r0, [pc, #224]	; (8001798 <CalTorque+0x4e8>)
 80016b8:	f7ff fdbe 	bl	8001238 <myDebug>
//		Dy = fminf(fmaxf(Dy, 0.0f), MAX_DUTY_CYCLE);
//		Dz = fminf(fmaxf(Dz, 0.0f), MAX_DUTY_CYCLE);

		// Apply PWM based on the sign of the moments

		HAL_TIM_Base_Start_IT(&htim1);
 80016bc:	4837      	ldr	r0, [pc, #220]	; (800179c <CalTorque+0x4ec>)
 80016be:	f005 ff5d 	bl	800757c <HAL_TIM_Base_Start_IT>

//		if (mag_moment_bdot.MomentY > mag_moment_bdot.MomentZ) {
		if (mag_moment_bdot.MomentY < 0) {
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <CalTorque+0x4b8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fcf8 	bl	80010c0 <__aeabi_fcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <CalTorque+0x43e>
			SET_PWM_REVERSE_Y(fabs(mag_moment_bdot.Dy));
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <CalTorque+0x4b8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fd52 	bl	8001188 <__aeabi_f2uiz>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f8bc 	bl	8001864 <SET_PWM_REVERSE_Y>
 80016ec:	e008      	b.n	8001700 <CalTorque+0x450>
		} else {
			SET_PWM_FORWARD_Y((int) mag_moment_bdot.Dy);
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <CalTorque+0x4b8>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd22 	bl	800113c <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f89a 	bl	8001834 <SET_PWM_FORWARD_Y>
		}
		myDebug("----- Both ON !!! -----\n");
 8001700:	4827      	ldr	r0, [pc, #156]	; (80017a0 <CalTorque+0x4f0>)
 8001702:	f7ff fd99 	bl	8001238 <myDebug>
	}
	if (mag_moment_bdot.MomentZ < 0) {
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <CalTorque+0x4b8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fcd6 	bl	80010c0 <__aeabi_fcmplt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <CalTorque+0x482>
		SET_PWM_REVERSE_Z(fabs(mag_moment_bdot.Dz));
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <CalTorque+0x4b8>)
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd30 	bl	8001188 <__aeabi_f2uiz>
 8001728:	4603      	mov	r3, r0
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f86a 	bl	8001804 <SET_PWM_REVERSE_Z>
	} else {
		SET_PWM_FORWARD_Z((int) mag_moment_bdot.Dz);
	}

	return;
 8001730:	e009      	b.n	8001746 <CalTorque+0x496>
		SET_PWM_FORWARD_Z((int) mag_moment_bdot.Dz);
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <CalTorque+0x4b8>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fd00 	bl	800113c <__aeabi_f2iz>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f848 	bl	80017d4 <SET_PWM_FORWARD_Z>
	return;
 8001744:	bf00      	nop
}
 8001746:	3748      	adds	r7, #72	; 0x48
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800174e:	b004      	add	sp, #16
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	a0000000 	.word	0xa0000000
 800175c:	3fc99999 	.word	0x3fc99999
 8001760:	00000000 	.word	0x00000000
 8001764:	40dc2000 	.word	0x40dc2000
 8001768:	20000398 	.word	0x20000398
 800176c:	bdcccccd 	.word	0xbdcccccd
 8001770:	08010678 	.word	0x08010678
 8001774:	0801068c 	.word	0x0801068c
 8001778:	080106a0 	.word	0x080106a0
 800177c:	080106b4 	.word	0x080106b4
 8001780:	080106d0 	.word	0x080106d0
 8001784:	3e4ccccd 	.word	0x3e4ccccd
 8001788:	46e10000 	.word	0x46e10000
 800178c:	080106ec 	.word	0x080106ec
 8001790:	08010704 	.word	0x08010704
 8001794:	08010714 	.word	0x08010714
 8001798:	08010724 	.word	0x08010724
 800179c:	20000f88 	.word	0x20000f88
 80017a0:	08010744 	.word	0x08010744

080017a4 <MTQ_Enable>:

// Function to enable MTQ_OCP
void MTQ_Enable() {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MTQEN_5V_Pin, SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2108      	movs	r1, #8
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <MTQ_Enable+0x14>)
 80017ae:	f004 fcdb 	bl	8006168 <HAL_GPIO_WritePin>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40010c00 	.word	0x40010c00

080017bc <MTQ_Disable>:

// Function to disable MTQ_OCP
void MTQ_Disable() {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MTQEN_5V_Pin, RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2108      	movs	r1, #8
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <MTQ_Disable+0x14>)
 80017c6:	f004 fccf 	bl	8006168 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <SET_PWM_FORWARD_Z>:

// Function to set PWM duty cycle for Y-axis MTQ
void SET_PWM_FORWARD_Z(uint32_t Dy) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = Dy;
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <SET_PWM_FORWARD_Z+0x28>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = 0;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SET_PWM_FORWARD_Z+0x28>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
	MTQ_Enable();
 80017e8:	f7ff ffdc 	bl	80017a4 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017ec:	2100      	movs	r1, #0
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <SET_PWM_FORWARD_Z+0x2c>)
 80017f0:	f005 ff94 	bl	800771c <HAL_TIM_PWM_Start>

}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40000400 	.word	0x40000400
 8001800:	200005c0 	.word	0x200005c0

08001804 <SET_PWM_REVERSE_Z>:

void SET_PWM_REVERSE_Z(uint32_t Dy) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = 0;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <SET_PWM_REVERSE_Z+0x28>)
 800180e:	2200      	movs	r2, #0
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = Dy;
 8001812:	4a06      	ldr	r2, [pc, #24]	; (800182c <SET_PWM_REVERSE_Z+0x28>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6393      	str	r3, [r2, #56]	; 0x38
	MTQ_Enable();
 8001818:	f7ff ffc4 	bl	80017a4 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800181c:	2104      	movs	r1, #4
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <SET_PWM_REVERSE_Z+0x2c>)
 8001820:	f005 ff7c 	bl	800771c <HAL_TIM_PWM_Start>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40000400 	.word	0x40000400
 8001830:	200005c0 	.word	0x200005c0

08001834 <SET_PWM_FORWARD_Y>:

void SET_PWM_FORWARD_Y(uint32_t Dz) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

	TIM4->CCR3 = 0;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <SET_PWM_FORWARD_Y+0x28>)
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = Dz;
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <SET_PWM_FORWARD_Y+0x28>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
	MTQ_Enable();
 8001848:	f7ff ffac 	bl	80017a4 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800184c:	210c      	movs	r1, #12
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <SET_PWM_FORWARD_Y+0x2c>)
 8001850:	f005 ff64 	bl	800771c <HAL_TIM_PWM_Start>

}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40000800 	.word	0x40000800
 8001860:	200004a0 	.word	0x200004a0

08001864 <SET_PWM_REVERSE_Y>:

void SET_PWM_REVERSE_Y(uint32_t Dz) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

	TIM4->CCR3 = Dz;
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <SET_PWM_REVERSE_Y+0x28>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM4->CCR4 = 0;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <SET_PWM_REVERSE_Y+0x28>)
 8001874:	2200      	movs	r2, #0
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
	MTQ_Enable();
 8001878:	f7ff ff94 	bl	80017a4 <MTQ_Enable>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800187c:	2108      	movs	r1, #8
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <SET_PWM_REVERSE_Y+0x2c>)
 8001880:	f005 ff4c 	bl	800771c <HAL_TIM_PWM_Start>

}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40000800 	.word	0x40000800
 8001890:	200004a0 	.word	0x200004a0

08001894 <EKF_Init>:
 *      Author: Dell
 */

#include "EKF.h"

void EKF_Init(Eekf *ekf_1, float P[2], float Q[2], float R[3]) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf_1->phi_r = 0.0f;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = 0.0f;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf_1->P[0][0] = P[0];
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = 0.0f;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = 0.0f;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = P[1];
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf_1->Q[0] = Q[0];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	619a      	str	r2, [r3, #24]
	ekf_1->Q[1] = Q[1];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	61da      	str	r2, [r3, #28]

	ekf_1->R[0] = R[0];
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	621a      	str	r2, [r3, #32]
	ekf_1->R[1] = R[1];
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
	ekf_1->R[2] = R[2];
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28

}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <EKF_Predict>:

void EKF_Predict(Eekf *ekf_1, float p_rps, float q_rps, float r_rps,
		float sampleTime_s) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b093      	sub	sp, #76	; 0x4c
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]

	/* Pre-compute trigonometric quantities */
	float sp = sinf(ekf_1->phi_r);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f00c fa48 	bl	800ddac <sinf>
 800191c:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(ekf_1->phi_r);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f00c fa0a 	bl	800dd3c <cosf>
 8001928:	6438      	str	r0, [r7, #64]	; 0x40
	float tt = tanf(ekf_1->theta_r);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f00c fa72 	bl	800de18 <tanf>
 8001934:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Compute state transition function dx/dt = f(x,u) */
	float dphidt = p_rps + tt * (q_rps * sp + r_rps * cp);
 8001936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fa23 	bl	8000d84 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	461c      	mov	r4, r3
 8001942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f7ff fa1d 	bl	8000d84 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff f910 	bl	8000b74 <__addsf3>
 8001954:	4603      	mov	r3, r0
 8001956:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa13 	bl	8000d84 <__aeabi_fmul>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f7ff f906 	bl	8000b74 <__addsf3>
 8001968:	4603      	mov	r3, r0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
	float dthetadt = q_rps * cp - r_rps * sp;
 800196c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fa08 	bl	8000d84 <__aeabi_fmul>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f7ff fa02 	bl	8000d84 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4619      	mov	r1, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff f8f3 	bl	8000b70 <__aeabi_fsub>
 800198a:	4603      	mov	r3, r0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf_1->phi_r += sampleTime_s * dphidt;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001994:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001996:	f7ff f9f5 	bl	8000d84 <__aeabi_fmul>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff f8e8 	bl	8000b74 <__addsf3>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r += sampleTime_s * dthetadt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685c      	ldr	r4, [r3, #4]
 80019b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80019b4:	f7ff f9e6 	bl	8000d84 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4619      	mov	r1, r3
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff f8d9 	bl	8000b74 <__addsf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	605a      	str	r2, [r3, #4]

	/* Re-compute trigonometric quantities */
	sp = sinf(ekf_1->phi_r);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f00c f9ec 	bl	800ddac <sinf>
 80019d4:	6478      	str	r0, [r7, #68]	; 0x44
	cp = cosf(ekf_1->phi_r);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f00c f9ae 	bl	800dd3c <cosf>
 80019e0:	6438      	str	r0, [r7, #64]	; 0x40
	tt = tanf(ekf_1->theta_r);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00c fa16 	bl	800de18 <tanf>
 80019ec:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ctInv = 1.0f / cosf(ekf_1->theta_r);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00c f9a2 	bl	800dd3c <cosf>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a00:	f7ff fa74 	bl	8000eec <__aeabi_fdiv>
 8001a04:	4603      	mov	r3, r0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 8001a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f9ba 	bl	8000d84 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461c      	mov	r4, r3
 8001a14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f7ff f9b4 	bl	8000d84 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff f8a5 	bl	8000b70 <__aeabi_fsub>
 8001a26:	4603      	mov	r3, r0
 8001a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f9aa 	bl	8000d84 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	623b      	str	r3, [r7, #32]
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 8001a34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff f9a4 	bl	8000d84 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461c      	mov	r4, r3
 8001a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a42:	6838      	ldr	r0, [r7, #0]
 8001a44:	f7ff f99e 	bl	8000d84 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f891 	bl	8000b74 <__addsf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f994 	bl	8000d84 <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f98f 	bl	8000d84 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 8001a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff f989 	bl	8000d84 <__aeabi_fmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461c      	mov	r4, r3
			+ r_rps * cp), 0.0f } };
 8001a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f7ff f983 	bl	8000d84 <__aeabi_fmul>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff f876 	bl	8000b74 <__addsf3>
 8001a88:	4603      	mov	r3, r0
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 8001a8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001a96:	6a3a      	ldr	r2, [r7, #32]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff f970 	bl	8000d84 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff f967 	bl	8000d84 <__aeabi_fmul>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff f85a 	bl	8000b74 <__addsf3>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461c      	mov	r4, r3
			+ ekf_1->P[0][0] * A[0][0] + ekf_1->P[0][1] * A[1][0] + ekf_1->Q[0],
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f959 	bl	8000d84 <__aeabi_fmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff f84c 	bl	8000b74 <__addsf3>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461c      	mov	r4, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f94b 	bl	8000d84 <__aeabi_fmul>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff f83e 	bl	8000b74 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f7ff f836 	bl	8000b74 <__addsf3>
 8001b08:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001b0a:	613b      	str	r3, [r7, #16]
			A[0][0] * ekf_1->P[0][1] + A[0][1] * ekf_1->P[1][1]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff f935 	bl	8000d84 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff f92c 	bl	8000d84 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff f81f 	bl	8000b74 <__addsf3>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461c      	mov	r4, r3
					+ ekf_1->P[0][0] * A[0][1] }, { A[1][0] * ekf_1->P[0][0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f91e 	bl	8000d84 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff f811 	bl	8000b74 <__addsf3>
 8001b52:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001b54:	617b      	str	r3, [r7, #20]
					+ ekf_1->P[0][0] * A[0][1] }, { A[1][0] * ekf_1->P[0][0]
 8001b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7ff f910 	bl	8000d84 <__aeabi_fmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461c      	mov	r4, r3
			+ ekf_1->P[1][0] * A[0][0] + ekf_1->P[1][1] * A[1][0], A[1][0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f907 	bl	8000d84 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7fe fffa 	bl	8000b74 <__addsf3>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461c      	mov	r4, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f8f9 	bl	8000d84 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe ffec 	bl	8000b74 <__addsf3>
 8001b9c:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001b9e:	61bb      	str	r3, [r7, #24]
			+ ekf_1->P[1][0] * A[0][0] + ekf_1->P[1][1] * A[1][0], A[1][0]
 8001ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
			* ekf_1->P[0][1] + ekf_1->P[1][0] * A[0][1] + ekf_1->Q[1] } };
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f7ff f8eb 	bl	8000d84 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8e2 	bl	8000d84 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7fe ffd5 	bl	8000b74 <__addsf3>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f7fe ffcd 	bl	8000b74 <__addsf3>
 8001bda:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf_1->P[0][0] + A[0][1] * ekf_1->P[1][0]
 8001bdc:	61fb      	str	r3, [r7, #28]

	ekf_1->P[0][0] += sampleTime_s * Pnew[0][0];
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	689c      	ldr	r4, [r3, #8]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8cc 	bl	8000d84 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7fe ffbf 	bl	8000b74 <__addsf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] += sampleTime_s * Pnew[0][1];
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68dc      	ldr	r4, [r3, #12]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8bc 	bl	8000d84 <__aeabi_fmul>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7fe ffaf 	bl	8000b74 <__addsf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] += sampleTime_s * Pnew[1][0];
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691c      	ldr	r4, [r3, #16]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8ac 	bl	8000d84 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7fe ff9f 	bl	8000b74 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] += sampleTime_s * Pnew[1][1];
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	695c      	ldr	r4, [r3, #20]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f89c 	bl	8000d84 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7fe ff8f 	bl	8000b74 <__addsf3>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	615a      	str	r2, [r3, #20]

}
 8001c5e:	bf00      	nop
 8001c60:	374c      	adds	r7, #76	; 0x4c
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}

08001c66 <EKF_Update>:

void EKF_Update(Eekf *ekf_1, float ax_mps2, float ay_mps2, float az_mps2) {
 8001c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c68:	b0c5      	sub	sp, #276	; 0x114
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f107 040c 	add.w	r4, r7, #12
 8001c70:	6020      	str	r0, [r4, #0]
 8001c72:	f107 0008 	add.w	r0, r7, #8
 8001c76:	6001      	str	r1, [r0, #0]
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	600a      	str	r2, [r1, #0]
 8001c7c:	463a      	mov	r2, r7
 8001c7e:	6013      	str	r3, [r2, #0]

	/* Normalise accelerometer readings */
	float accNormFactor = 1.0f
			/ sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f7ff f87c 	bl	8000d84 <__aeabi_fmul>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461c      	mov	r4, r3
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff f875 	bl	8000d84 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7fe ff68 	bl	8000b74 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	463b      	mov	r3, r7
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	f7ff f869 	bl	8000d84 <__aeabi_fmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7fe ff5c 	bl	8000b74 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f00c f920 	bl	800df04 <sqrtf>
 8001cc4:	4603      	mov	r3, r0
	float accNormFactor = 1.0f
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ccc:	f7ff f90e 	bl	8000eec <__aeabi_fdiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float ax_norm = ax_mps2 * accNormFactor;
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	f7ff f850 	bl	8000d84 <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float ay_norm = ay_mps2 * accNormFactor;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	f7ff f847 	bl	8000d84 <__aeabi_fmul>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float az_norm = az_mps2 * accNormFactor;
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	f7ff f83e 	bl	8000d84 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sp = sinf(ekf_1->phi_r);
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00c f848 	bl	800ddac <sinf>
 8001d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	float cp = cosf(ekf_1->phi_r);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00c f807 	bl	800dd3c <cosf>
 8001d2e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	float st = sinf(ekf_1->theta_r);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00c f836 	bl	800ddac <sinf>
 8001d40:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	float ct = cosf(ekf_1->theta_r);
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f00b fff5 	bl	800dd3c <cosf>
 8001d52:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	float C[3][2] =
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d6e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f806 	bl	8000d84 <__aeabi_fmul>
 8001d78:	4603      	mov	r3, r0
	float C[3][2] =
 8001d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001d7e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001d82:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001d86:	f7fe fffd 	bl	8000d84 <__aeabi_fmul>
 8001d8a:	4603      	mov	r3, r0
	float C[3][2] =
 8001d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001d90:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001d94:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001d98:	f7fe fff4 	bl	8000d84 <__aeabi_fmul>
 8001d9c:	4603      	mov	r3, r0
	float C[3][2] =
 8001d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001da2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001da6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001daa:	f7fe ffeb 	bl	8000d84 <__aeabi_fmul>
 8001dae:	4603      	mov	r3, r0
	float C[3][2] =
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffde 	bl	8000d84 <__aeabi_fmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffd1 	bl	8000d84 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * C[1][1], ekf_1->P[0][0] * C[2][0]
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ffc5 	bl	8000d84 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe feb8 	bl	8000b74 <__addsf3>
 8001e04:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001e06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			+ ekf_1->P[0][1] * C[1][1], ekf_1->P[0][0] * C[2][0]
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe ffb3 	bl	8000d84 <__aeabi_fmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * C[2][1] }, { ekf_1->P[1][1] * C[0][1],
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ffa7 	bl	8000d84 <__aeabi_fmul>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7fe fe9a 	bl	8000b74 <__addsf3>
 8001e40:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			+ ekf_1->P[0][1] * C[2][1] }, { ekf_1->P[1][1] * C[0][1],
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff95 	bl	8000d84 <__aeabi_fmul>
 8001e5a:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			ekf_1->P[1][0] * C[1][0] + ekf_1->P[1][1] * C[1][1], ekf_1->P[1][0]
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff88 	bl	8000d84 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461c      	mov	r4, r3
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff7c 	bl	8000d84 <__aeabi_fmul>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7fe fe6f 	bl	8000b74 <__addsf3>
 8001e96:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001e98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			ekf_1->P[1][0] * C[1][0] + ekf_1->P[1][1] * C[1][1], ekf_1->P[1][0]
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
					* C[2][0] + ekf_1->P[1][1] * C[2][1] } };
 8001ea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff6a 	bl	8000d84 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461c      	mov	r4, r3
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe ff5e 	bl	8000d84 <__aeabi_fmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7fe fe51 	bl	8000b74 <__addsf3>
 8001ed2:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf_1->P[0][1] * C[0][1], ekf_1->P[0][0] * C[1][0]
 8001ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	/* R + C * P * C' */
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001ed8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff4e 	bl	8000d84 <__aeabi_fmul>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f7fe fe3c 	bl	8000b74 <__addsf3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff39 	bl	8000d84 <__aeabi_fmul>
 8001f12:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001f18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f1c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff2e 	bl	8000d84 <__aeabi_fmul>
 8001f28:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 8001f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff23 	bl	8000d84 <__aeabi_fmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461c      	mov	r4, r3
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 8001f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f46:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ff19 	bl	8000d84 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7fe fe0c 	bl	8000b74 <__addsf3>
 8001f5c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 8001f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ff09 	bl	8000d84 <__aeabi_fmul>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461c      	mov	r4, r3
 8001f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe feff 	bl	8000d84 <__aeabi_fmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7fe fdf2 	bl	8000b74 <__addsf3>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
			+ ekf_1->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, {
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f7fe fde8 	bl	8000b74 <__addsf3>
 8001fa4:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			+ ekf_1->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, {
 8001faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fee5 	bl	8000d84 <__aeabi_fmul>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fedb 	bl	8000d84 <__aeabi_fmul>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7fe fdce 	bl	8000b74 <__addsf3>
 8001fd8:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8001fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 8001fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fecb 	bl	8000d84 <__aeabi_fmul>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461c      	mov	r4, r3
 8001ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fec1 	bl	8000d84 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4620      	mov	r0, r4
 8002008:	f7fe fdb4 	bl	8000b74 <__addsf3>
 800200c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 800200e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			C[2][0] * PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 8002012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe feb1 	bl	8000d84 <__aeabi_fmul>
 8002022:	4603      	mov	r3, r0
 8002024:	461c      	mov	r4, r3
					+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2]
 8002026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800202a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fea7 	bl	8000d84 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	4619      	mov	r1, r3
 800203a:	4620      	mov	r0, r4
 800203c:	f7fe fd9a 	bl	8000b74 <__addsf3>
 8002040:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 8002042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2]
 8002046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800204a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe97 	bl	8000d84 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	461c      	mov	r4, r3
					+ C[2][1] * PCt[1][2] + ekf_1->R[2] } };
 800205a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe8d 	bl	8000d84 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	4620      	mov	r0, r4
 8002070:	f7fe fd80 	bl	8000b74 <__addsf3>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7fe fd76 	bl	8000b74 <__addsf3>
 8002088:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf_1->R[0], C[0][1]
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* inv(R + C * P * C') */
	float detMatInv = 1.0f
			/ (RCPCt[0][0]
 800208e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
					* (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 8002092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002096:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe71 	bl	8000d84 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461d      	mov	r5, r3
 80020a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fe67 	bl	8000d84 <__aeabi_fmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4619      	mov	r1, r3
 80020ba:	4628      	mov	r0, r5
 80020bc:	f7fe fd58 	bl	8000b70 <__aeabi_fsub>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7fe fe5d 	bl	8000d84 <__aeabi_fmul>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461d      	mov	r5, r3
					- RCPCt[1][0]
 80020ce:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
							* (RCPCt[2][2] * RCPCt[0][1]
 80020d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe51 	bl	8000d84 <__aeabi_fmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461e      	mov	r6, r3
									- RCPCt[2][1] * RCPCt[0][2])
 80020e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fe47 	bl	8000d84 <__aeabi_fmul>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4630      	mov	r0, r6
 80020fc:	f7fe fd38 	bl	8000b70 <__aeabi_fsub>
 8002100:	4603      	mov	r3, r0
							* (RCPCt[2][2] * RCPCt[0][1]
 8002102:	4619      	mov	r1, r3
 8002104:	4620      	mov	r0, r4
 8002106:	f7fe fe3d 	bl	8000d84 <__aeabi_fmul>
 800210a:	4603      	mov	r3, r0
					- RCPCt[1][0]
 800210c:	4619      	mov	r1, r3
 800210e:	4628      	mov	r0, r5
 8002110:	f7fe fd2e 	bl	8000b70 <__aeabi_fsub>
 8002114:	4603      	mov	r3, r0
 8002116:	461d      	mov	r5, r3
					+ RCPCt[2][0]
 8002118:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
							* (RCPCt[1][2] * RCPCt[0][1]
 800211c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fe2c 	bl	8000d84 <__aeabi_fmul>
 800212c:	4603      	mov	r3, r0
 800212e:	461e      	mov	r6, r3
									- RCPCt[1][1] * RCPCt[0][2]));
 8002130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002134:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe22 	bl	8000d84 <__aeabi_fmul>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	4630      	mov	r0, r6
 8002146:	f7fe fd13 	bl	8000b70 <__aeabi_fsub>
 800214a:	4603      	mov	r3, r0
							* (RCPCt[1][2] * RCPCt[0][1]
 800214c:	4619      	mov	r1, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f7fe fe18 	bl	8000d84 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
					+ RCPCt[2][0]
 8002156:	4619      	mov	r1, r3
 8002158:	4628      	mov	r0, r5
 800215a:	f7fe fd0b 	bl	8000b74 <__addsf3>
 800215e:	4603      	mov	r3, r0
	float detMatInv = 1.0f
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002166:	f7fe fec1 	bl	8000eec <__aeabi_fdiv>
 800216a:	4603      	mov	r3, r0
 800216c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002174:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fe02 	bl	8000d84 <__aeabi_fmul>
 8002180:	4603      	mov	r3, r0
 8002182:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8002184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002188:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fdf8 	bl	8000d84 <__aeabi_fmul>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fce9 	bl	8000b70 <__aeabi_fsub>
 800219e:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80021a0:	66fb      	str	r3, [r7, #108]	; 0x6c
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 80021a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fde9 	bl	8000d84 <__aeabi_fmul>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 80021b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fddf 	bl	8000d84 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4619      	mov	r1, r3
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe fcd0 	bl	8000b70 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 80021d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80021d6:	673b      	str	r3, [r7, #112]	; 0x70
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 80021d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fdce 	bl	8000d84 <__aeabi_fmul>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461c      	mov	r4, r3
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 80021ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fdc4 	bl	8000d84 <__aeabi_fmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4619      	mov	r1, r3
 8002200:	4620      	mov	r0, r4
 8002202:	f7fe fcb5 	bl	8000b70 <__aeabi_fsub>
 8002206:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002208:	677b      	str	r3, [r7, #116]	; 0x74
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 800220a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800220e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fdb5 	bl	8000d84 <__aeabi_fmul>
 800221a:	4603      	mov	r3, r0
 800221c:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 800221e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002222:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fdab 	bl	8000d84 <__aeabi_fmul>
 800222e:	4603      	mov	r3, r0
 8002230:	4619      	mov	r1, r3
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe fc9c 	bl	8000b70 <__aeabi_fsub>
 8002238:	4603      	mov	r3, r0
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 800223a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 800223e:	67bb      	str	r3, [r7, #120]	; 0x78
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 8002240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002244:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd9a 	bl	8000d84 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8002254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002258:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd90 	bl	8000d84 <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	4619      	mov	r1, r3
 8002268:	4620      	mov	r0, r4
 800226a:	f7fe fc81 	bl	8000b70 <__aeabi_fsub>
 800226e:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002270:	67fb      	str	r3, [r7, #124]	; 0x7c
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8002272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002276:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd81 	bl	8000d84 <__aeabi_fmul>
 8002282:	4603      	mov	r3, r0
 8002284:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 8002286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800228a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fd77 	bl	8000d84 <__aeabi_fmul>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	4620      	mov	r0, r4
 800229c:	f7fe fc68 	bl	8000b70 <__aeabi_fsub>
 80022a0:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 80022a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80022a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 80022aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd65 	bl	8000d84 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 80022be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fd5b 	bl	8000d84 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7fe fc4c 	bl	8000b70 <__aeabi_fsub>
 80022d8:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 80022da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 80022de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fd4b 	bl	8000d84 <__aeabi_fmul>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 80022f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd41 	bl	8000d84 <__aeabi_fmul>
 8002302:	4603      	mov	r3, r0
 8002304:	4619      	mov	r1, r3
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe fc32 	bl	8000b70 <__aeabi_fsub>
 800230c:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 800230e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 8002316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800231a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fd2f 	bl	8000d84 <__aeabi_fmul>
 8002326:	4603      	mov	r3, r0
 8002328:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][1] } };
 800232a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fd25 	bl	8000d84 <__aeabi_fmul>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	4620      	mov	r0, r4
 8002340:	f7fe fc16 	bl	8000b70 <__aeabi_fsub>
 8002344:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8002346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	for (unsigned int i = 0; i < 3; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002350:	e034      	b.n	80023bc <EKF_Update+0x756>

		for (unsigned int j = 0; j < 3; j++) {
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002358:	e027      	b.n	80023aa <EKF_Update+0x744>

			matInv[i][j] *= detMatInv;
 800235a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002370:	4413      	add	r3, r2
 8002372:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8002376:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd02 	bl	8000d84 <__aeabi_fmul>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800239a:	4413      	add	r3, r2
 800239c:	f843 1ca4 	str.w	r1, [r3, #-164]
		for (unsigned int j = 0; j < 3; j++) {
 80023a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80023aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d9d3      	bls.n	800235a <EKF_Update+0x6f4>
	for (unsigned int i = 0; i < 3; i++) {
 80023b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023b6:	3301      	adds	r3, #1
 80023b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80023bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d9c6      	bls.n	8002352 <EKF_Update+0x6ec>
		}

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 80023c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fcd9 	bl	8000d84 <__aeabi_fmul>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461c      	mov	r4, r3
 80023d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fccf 	bl	8000d84 <__aeabi_fmul>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7fe fbc2 	bl	8000b74 <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	657b      	str	r3, [r7, #84]	; 0x54
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 80023f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fcc1 	bl	8000d84 <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	461c      	mov	r4, r3
 8002406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fcb7 	bl	8000d84 <__aeabi_fmul>
 8002416:	4603      	mov	r3, r0
 8002418:	4619      	mov	r1, r3
 800241a:	4620      	mov	r0, r4
 800241c:	f7fe fbaa 	bl	8000b74 <__addsf3>
 8002420:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8002422:	65bb      	str	r3, [r7, #88]	; 0x58
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 8002424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 8002428:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fca8 	bl	8000d84 <__aeabi_fmul>
 8002434:	4603      	mov	r3, r0
 8002436:	461c      	mov	r4, r3
 8002438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc9e 	bl	8000d84 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fb91 	bl	8000b74 <__addsf3>
 8002452:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8002454:	65fb      	str	r3, [r7, #92]	; 0x5c
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 8002456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0],
 800245a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fc90 	bl	8000d84 <__aeabi_fmul>
 8002464:	4603      	mov	r3, r0
 8002466:	461c      	mov	r4, r3
 8002468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800246c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fc87 	bl	8000d84 <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	4619      	mov	r1, r3
 800247a:	4620      	mov	r0, r4
 800247c:	f7fe fb7a 	bl	8000b74 <__addsf3>
 8002480:	4603      	mov	r3, r0
 8002482:	461c      	mov	r4, r3
 8002484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002488:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc78 	bl	8000d84 <__aeabi_fmul>
 8002494:	4603      	mov	r3, r0
 8002496:	4619      	mov	r1, r3
 8002498:	4620      	mov	r0, r4
 800249a:	f7fe fb6b 	bl	8000b74 <__addsf3>
 800249e:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 80024a0:	663b      	str	r3, [r7, #96]	; 0x60
			C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1]
 80024a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc6a 	bl	8000d84 <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fc61 	bl	8000d84 <__aeabi_fmul>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7fe fb54 	bl	8000b74 <__addsf3>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461c      	mov	r4, r3
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fc52 	bl	8000d84 <__aeabi_fmul>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7fe fb45 	bl	8000b74 <__addsf3>
 80024ea:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 80024ec:	667b      	str	r3, [r7, #100]	; 0x64
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 80024ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fc44 	bl	8000d84 <__aeabi_fmul>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461c      	mov	r4, r3
					+ C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2] } };
 8002500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002504:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fc3a 	bl	8000d84 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	4619      	mov	r1, r3
 8002514:	4620      	mov	r0, r4
 8002516:	f7fe fb2d 	bl	8000b74 <__addsf3>
 800251a:	4603      	mov	r3, r0
 800251c:	461c      	mov	r4, r3
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fc2b 	bl	8000d84 <__aeabi_fmul>
 800252e:	4603      	mov	r3, r0
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7fe fb1e 	bl	8000b74 <__addsf3>
 8002538:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 800253a:	66bb      	str	r3, [r7, #104]	; 0x68

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fc1b 	bl	8000d84 <__aeabi_fmul>
 800254e:	4603      	mov	r3, r0
 8002550:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][0], ekf_1->P[0][0] * CtmatInv[0][1]
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fc10 	bl	8000d84 <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	4620      	mov	r0, r4
 800256a:	f7fe fb03 	bl	8000b74 <__addsf3>
 800256e:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002570:	63fb      	str	r3, [r7, #60]	; 0x3c
			+ ekf_1->P[0][1] * CtmatInv[1][0], ekf_1->P[0][0] * CtmatInv[0][1]
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fc00 	bl	8000d84 <__aeabi_fmul>
 8002584:	4603      	mov	r3, r0
 8002586:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][1], ekf_1->P[0][0] * CtmatInv[0][2]
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fbf5 	bl	8000d84 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	4619      	mov	r1, r3
 800259e:	4620      	mov	r0, r4
 80025a0:	f7fe fae8 	bl	8000b74 <__addsf3>
 80025a4:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
			+ ekf_1->P[0][1] * CtmatInv[1][1], ekf_1->P[0][0] * CtmatInv[0][2]
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbe5 	bl	8000d84 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461c      	mov	r4, r3
			+ ekf_1->P[0][1] * CtmatInv[1][2] }, { ekf_1->P[1][0]
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fbda 	bl	8000d84 <__aeabi_fmul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe facd 	bl	8000b74 <__addsf3>
 80025da:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 80025dc:	647b      	str	r3, [r7, #68]	; 0x44
			+ ekf_1->P[0][1] * CtmatInv[1][2] }, { ekf_1->P[1][0]
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][0] + ekf_1->P[1][1] * CtmatInv[1][0], ekf_1->P[1][0]
 80025e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fbca 	bl	8000d84 <__aeabi_fmul>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461c      	mov	r4, r3
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fbbf 	bl	8000d84 <__aeabi_fmul>
 8002606:	4603      	mov	r3, r0
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f7fe fab2 	bl	8000b74 <__addsf3>
 8002610:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
			* CtmatInv[0][0] + ekf_1->P[1][1] * CtmatInv[1][0], ekf_1->P[1][0]
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][1] + ekf_1->P[1][1] * CtmatInv[1][1], ekf_1->P[1][0]
 800261c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fbaf 	bl	8000d84 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	461c      	mov	r4, r3
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fba4 	bl	8000d84 <__aeabi_fmul>
 800263c:	4603      	mov	r3, r0
 800263e:	4619      	mov	r1, r3
 8002640:	4620      	mov	r0, r4
 8002642:	f7fe fa97 	bl	8000b74 <__addsf3>
 8002646:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 8002648:	64fb      	str	r3, [r7, #76]	; 0x4c
			* CtmatInv[0][1] + ekf_1->P[1][1] * CtmatInv[1][1], ekf_1->P[1][0]
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
			* CtmatInv[0][2] + ekf_1->P[1][1] * CtmatInv[1][2] } };
 8002652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fb94 	bl	8000d84 <__aeabi_fmul>
 800265c:	4603      	mov	r3, r0
 800265e:	461c      	mov	r4, r3
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fb89 	bl	8000d84 <__aeabi_fmul>
 8002672:	4603      	mov	r3, r0
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f7fe fa7c 	bl	8000b74 <__addsf3>
 800267c:	4603      	mov	r3, r0
	float K[2][3] = { { ekf_1->P[0][0] * CtmatInv[0][0]
 800267e:	653b      	str	r3, [r7, #80]	; 0x50

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8002680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002682:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fb7b 	bl	8000d84 <__aeabi_fmul>
 800268e:	4603      	mov	r3, r0
 8002690:	461c      	mov	r4, r3
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb72 	bl	8000d84 <__aeabi_fmul>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4619      	mov	r1, r3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7fe fa65 	bl	8000b74 <__addsf3>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026b2:	f7fe fa5d 	bl	8000b70 <__aeabi_fsub>
 80026b6:	4603      	mov	r3, r0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
			-(K[0][1] * C[1][1] + K[1][0] * C[2][1]) },
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb5e 	bl	8000d84 <__aeabi_fmul>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461c      	mov	r4, r3
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fb55 	bl	8000d84 <__aeabi_fmul>
 80026da:	4603      	mov	r3, r0
 80026dc:	4619      	mov	r1, r3
 80026de:	4620      	mov	r0, r4
 80026e0:	f7fe fa48 	bl	8000b74 <__addsf3>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
			{ -(K[1][1] * C[1][0] + K[1][2] * C[2][0]), 1.0f
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fb45 	bl	8000d84 <__aeabi_fmul>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461c      	mov	r4, r3
 80026fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002700:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fb3c 	bl	8000d84 <__aeabi_fmul>
 800270c:	4603      	mov	r3, r0
 800270e:	4619      	mov	r1, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f7fe fa2f 	bl	8000b74 <__addsf3>
 8002716:	4603      	mov	r3, r0
 8002718:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
					- (K[1][1] * C[1][1] + K[1][2] * C[2][1]) } };
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb2c 	bl	8000d84 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	461c      	mov	r4, r3
 8002730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002732:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fb23 	bl	8000d84 <__aeabi_fmul>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	4620      	mov	r0, r4
 8002744:	f7fe fa16 	bl	8000b74 <__addsf3>
 8002748:	4603      	mov	r3, r0
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002750:	f7fe fa0e 	bl	8000b70 <__aeabi_fsub>
 8002754:	4603      	mov	r3, r0
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38

	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7fe fb0d 	bl	8000d84 <__aeabi_fmul>
 800276a:	4603      	mov	r3, r0
 800276c:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf_1->P[1][0], IminKC[0][0] * ekf_1->P[0][1]
 800276e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fe fb02 	bl	8000d84 <__aeabi_fmul>
 8002780:	4603      	mov	r3, r0
 8002782:	4619      	mov	r1, r3
 8002784:	4620      	mov	r0, r4
 8002786:	f7fe f9f5 	bl	8000b74 <__addsf3>
 800278a:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 800278c:	61fb      	str	r3, [r7, #28]
			+ IminKC[0][1] * ekf_1->P[1][0], IminKC[0][0] * ekf_1->P[0][1]
 800278e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f7fe faf2 	bl	8000d84 <__aeabi_fmul>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf_1->P[1][1] }, { IminKC[1][0] * ekf_1->P[0][0]
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7fe fae7 	bl	8000d84 <__aeabi_fmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7fe f9da 	bl	8000b74 <__addsf3>
 80027c0:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 80027c2:	623b      	str	r3, [r7, #32]
			+ IminKC[0][1] * ekf_1->P[1][1] }, { IminKC[1][0] * ekf_1->P[0][0]
 80027c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fe fad7 	bl	8000d84 <__aeabi_fmul>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf_1->P[1][0], IminKC[1][0] * ekf_1->P[0][1]
 80027da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7fe facc 	bl	8000d84 <__aeabi_fmul>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4619      	mov	r1, r3
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7fe f9bf 	bl	8000b74 <__addsf3>
 80027f6:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
			+ IminKC[1][1] * ekf_1->P[1][0], IminKC[1][0] * ekf_1->P[0][1]
 80027fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f7fe fabc 	bl	8000d84 <__aeabi_fmul>
 800280c:	4603      	mov	r3, r0
 800280e:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf_1->P[1][1] } };
 8002810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fab1 	bl	8000d84 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f9a4 	bl	8000b74 <__addsf3>
 800282c:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf_1->P[0][0]
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28

	ekf_1->P[0][0] = Pnew[0][0];
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	609a      	str	r2, [r3, #8]
	ekf_1->P[0][1] = Pnew[0][1];
 800283a:	6a3a      	ldr	r2, [r7, #32]
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60da      	str	r2, [r3, #12]
	ekf_1->P[1][0] = Pnew[1][0];
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	611a      	str	r2, [r3, #16]
	ekf_1->P[1][1] = Pnew[1][1];
 800284e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	615a      	str	r2, [r3, #20]

	/* Compute output function h(x,u) */
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	f00b faa3 	bl	800ddac <sinf>
 8002866:	4602      	mov	r2, r0
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	f00b fa60 	bl	800dd3c <cosf>
 800287c:	4603      	mov	r3, r0
 800287e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
			* sinf(ekf_1->phi_r), -cosf(ekf_1->theta_r) * cosf(ekf_1->phi_r) };
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f00b fa8e 	bl	800ddac <sinf>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4620      	mov	r0, r4
 8002896:	f7fe fa75 	bl	8000d84 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	605a      	str	r2, [r3, #4]
			* sinf(ekf_1->phi_r), -cosf(ekf_1->theta_r) * cosf(ekf_1->phi_r) };
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00b fa45 	bl	800dd3c <cosf>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00b fa3b 	bl	800dd3c <cosf>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4619      	mov	r1, r3
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7fe fa5a 	bl	8000d84 <__aeabi_fmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf_1->theta_r), -cosf(ekf_1->theta_r)
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	609a      	str	r2, [r3, #8]

	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 80028da:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80028e8:	f7fe f942 	bl	8000b70 <__aeabi_fsub>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4619      	mov	r1, r3
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7fe fa47 	bl	8000d84 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461d      	mov	r5, r3
 80028fa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4619      	mov	r1, r3
 8002904:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002908:	f7fe f932 	bl	8000b70 <__aeabi_fsub>
 800290c:	4603      	mov	r3, r0
 800290e:	4619      	mov	r1, r3
 8002910:	4620      	mov	r0, r4
 8002912:	f7fe fa37 	bl	8000d84 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	4628      	mov	r0, r5
 800291c:	f7fe f92a 	bl	8000b74 <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	461d      	mov	r5, r3
			+ K[0][2] * (az_norm - h[2]);
 8002924:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4619      	mov	r1, r3
 800292e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8002932:	f7fe f91d 	bl	8000b70 <__aeabi_fsub>
 8002936:	4603      	mov	r3, r0
 8002938:	4619      	mov	r1, r3
 800293a:	4620      	mov	r0, r4
 800293c:	f7fe fa22 	bl	8000d84 <__aeabi_fmul>
 8002940:	4603      	mov	r3, r0
 8002942:	4619      	mov	r1, r3
 8002944:	4628      	mov	r0, r5
 8002946:	f7fe f915 	bl	8000b74 <__addsf3>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
	ekf_1->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	601a      	str	r2, [r3, #0]
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 8002956:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8002964:	f7fe f904 	bl	8000b70 <__aeabi_fsub>
 8002968:	4603      	mov	r3, r0
 800296a:	4619      	mov	r1, r3
 800296c:	4620      	mov	r0, r4
 800296e:	f7fe fa09 	bl	8000d84 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	461d      	mov	r5, r3
 8002976:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4619      	mov	r1, r3
 8002980:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002984:	f7fe f8f4 	bl	8000b70 <__aeabi_fsub>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	4620      	mov	r0, r4
 800298e:	f7fe f9f9 	bl	8000d84 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	4619      	mov	r1, r3
 8002996:	4628      	mov	r0, r5
 8002998:	f7fe f8ec 	bl	8000b74 <__addsf3>
 800299c:	4603      	mov	r3, r0
 800299e:	461d      	mov	r5, r3
			+ K[1][2] * (az_norm - h[2]);
 80029a0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80029ae:	f7fe f8df 	bl	8000b70 <__aeabi_fsub>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4619      	mov	r1, r3
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe f9e4 	bl	8000d84 <__aeabi_fmul>
 80029bc:	4603      	mov	r3, r0
 80029be:	4619      	mov	r1, r3
 80029c0:	4628      	mov	r0, r5
 80029c2:	f7fe f8d7 	bl	8000b74 <__addsf3>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
	ekf_1->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]

	return;
 80029d2:	bf00      	nop
}
 80029d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029dc <IMU_Setup>:
 *      Author: Dell
 */

#include "IMU.h"

void IMU_Setup(MPU6500_t *DEFAULT_MPU6500) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

	if (LSM9DS1_Init(&hspi1, 0x60) == 1) { // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 80029e4:	2160      	movs	r1, #96	; 0x60
 80029e6:	4810      	ldr	r0, [pc, #64]	; (8002a28 <IMU_Setup+0x4c>)
 80029e8:	f000 feb8 	bl	800375c <LSM9DS1_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d113      	bne.n	8002a1a <IMU_Setup+0x3e>

		myDebug("\nLSM9DS1 Initialization Complete..\n");
 80029f2:	480e      	ldr	r0, [pc, #56]	; (8002a2c <IMU_Setup+0x50>)
 80029f4:	f7fe fc20 	bl	8001238 <myDebug>

		HAL_Delay(1);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f003 f84d 	bl	8005a98 <HAL_Delay>

		if (MPU_begin(DEFAULT_MPU6500) != 1) {
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fac0 	bl	8002f84 <MPU_begin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <IMU_Setup+0x36>
			myDebug("MPU6500 Initialization Failed..\n");
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <IMU_Setup+0x54>)
 8002a0c:	f7fe fc14 	bl	8001238 <myDebug>
//			myDebug("******************************\r\n");
		}
	} else {
		myDebug("LSM9DS1 Initialization Failed..\n");
	}
}
 8002a10:	e006      	b.n	8002a20 <IMU_Setup+0x44>
			myDebug("MPU6500 Initialization Complete..\n");
 8002a12:	4808      	ldr	r0, [pc, #32]	; (8002a34 <IMU_Setup+0x58>)
 8002a14:	f7fe fc10 	bl	8001238 <myDebug>
}
 8002a18:	e002      	b.n	8002a20 <IMU_Setup+0x44>
		myDebug("LSM9DS1 Initialization Failed..\n");
 8002a1a:	4807      	ldr	r0, [pc, #28]	; (8002a38 <IMU_Setup+0x5c>)
 8002a1c:	f7fe fc0c 	bl	8001238 <myDebug>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20001034 	.word	0x20001034
 8002a2c:	08010760 	.word	0x08010760
 8002a30:	08010784 	.word	0x08010784
 8002a34:	080107a8 	.word	0x080107a8
 8002a38:	080107cc 	.word	0x080107cc

08002a3c <IMU_REG_Data>:

void IMU_REG_Data() {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	//must be same as the variable '_buffer' of 'MPU6500_GetData()'
	SAT_IMU_REG[0] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_H);
 8002a40:	213b      	movs	r1, #59	; 0x3b
 8002a42:	4848      	ldr	r0, [pc, #288]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a44:	f000 fe12 	bl	800366c <MPU6500_ReadReg>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a4e:	701a      	strb	r2, [r3, #0]
	SAT_IMU_REG[1] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_L);
 8002a50:	213c      	movs	r1, #60	; 0x3c
 8002a52:	4844      	ldr	r0, [pc, #272]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a54:	f000 fe0a 	bl	800366c <MPU6500_ReadReg>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a5e:	705a      	strb	r2, [r3, #1]
	SAT_IMU_REG[2] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_H);
 8002a60:	213d      	movs	r1, #61	; 0x3d
 8002a62:	4840      	ldr	r0, [pc, #256]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a64:	f000 fe02 	bl	800366c <MPU6500_ReadReg>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a6e:	709a      	strb	r2, [r3, #2]
	SAT_IMU_REG[3] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_L);
 8002a70:	213e      	movs	r1, #62	; 0x3e
 8002a72:	483c      	ldr	r0, [pc, #240]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a74:	f000 fdfa 	bl	800366c <MPU6500_ReadReg>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a7e:	70da      	strb	r2, [r3, #3]
	SAT_IMU_REG[4] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_H);
 8002a80:	213f      	movs	r1, #63	; 0x3f
 8002a82:	4838      	ldr	r0, [pc, #224]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a84:	f000 fdf2 	bl	800366c <MPU6500_ReadReg>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a8e:	711a      	strb	r2, [r3, #4]
	SAT_IMU_REG[5] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_L);
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	4834      	ldr	r0, [pc, #208]	; (8002b64 <IMU_REG_Data+0x128>)
 8002a94:	f000 fdea 	bl	800366c <MPU6500_ReadReg>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002a9e:	715a      	strb	r2, [r3, #5]

	SAT_IMU_REG[6] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_H);
 8002aa0:	2143      	movs	r1, #67	; 0x43
 8002aa2:	4830      	ldr	r0, [pc, #192]	; (8002b64 <IMU_REG_Data+0x128>)
 8002aa4:	f000 fde2 	bl	800366c <MPU6500_ReadReg>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002aae:	719a      	strb	r2, [r3, #6]
	SAT_IMU_REG[7] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_L);
 8002ab0:	2144      	movs	r1, #68	; 0x44
 8002ab2:	482c      	ldr	r0, [pc, #176]	; (8002b64 <IMU_REG_Data+0x128>)
 8002ab4:	f000 fdda 	bl	800366c <MPU6500_ReadReg>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002abe:	71da      	strb	r2, [r3, #7]
	SAT_IMU_REG[8] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_H);
 8002ac0:	2145      	movs	r1, #69	; 0x45
 8002ac2:	4828      	ldr	r0, [pc, #160]	; (8002b64 <IMU_REG_Data+0x128>)
 8002ac4:	f000 fdd2 	bl	800366c <MPU6500_ReadReg>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002ace:	721a      	strb	r2, [r3, #8]
	SAT_IMU_REG[9] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_L);
 8002ad0:	2146      	movs	r1, #70	; 0x46
 8002ad2:	4824      	ldr	r0, [pc, #144]	; (8002b64 <IMU_REG_Data+0x128>)
 8002ad4:	f000 fdca 	bl	800366c <MPU6500_ReadReg>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002ade:	725a      	strb	r2, [r3, #9]
	SAT_IMU_REG[10] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_H);
 8002ae0:	2147      	movs	r1, #71	; 0x47
 8002ae2:	4820      	ldr	r0, [pc, #128]	; (8002b64 <IMU_REG_Data+0x128>)
 8002ae4:	f000 fdc2 	bl	800366c <MPU6500_ReadReg>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002aee:	729a      	strb	r2, [r3, #10]
	SAT_IMU_REG[11] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_L);
 8002af0:	2148      	movs	r1, #72	; 0x48
 8002af2:	481c      	ldr	r0, [pc, #112]	; (8002b64 <IMU_REG_Data+0x128>)
 8002af4:	f000 fdba 	bl	800366c <MPU6500_ReadReg>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002afe:	72da      	strb	r2, [r3, #11]

	//must be same as the 'Mag_Data[]' of 'LSM9DS1_ReadData'
	SAT_IMU_REG[12] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_L_M);
 8002b00:	2128      	movs	r1, #40	; 0x28
 8002b02:	4818      	ldr	r0, [pc, #96]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b04:	f000 fdd6 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b0e:	731a      	strb	r2, [r3, #12]
	SAT_IMU_REG[13] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_H_M);
 8002b10:	2129      	movs	r1, #41	; 0x29
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b14:	f000 fdce 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b1e:	735a      	strb	r2, [r3, #13]
	SAT_IMU_REG[14] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_L_M);
 8002b20:	212a      	movs	r1, #42	; 0x2a
 8002b22:	4810      	ldr	r0, [pc, #64]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b24:	f000 fdc6 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b2e:	739a      	strb	r2, [r3, #14]
	SAT_IMU_REG[15] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_H_M);
 8002b30:	212b      	movs	r1, #43	; 0x2b
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b34:	f000 fdbe 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b3e:	73da      	strb	r2, [r3, #15]
	SAT_IMU_REG[16] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_L_M);
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	4808      	ldr	r0, [pc, #32]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b44:	f000 fdb6 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b4e:	741a      	strb	r2, [r3, #16]
	SAT_IMU_REG[17] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_H_M);
 8002b50:	212d      	movs	r1, #45	; 0x2d
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <IMU_REG_Data+0x128>)
 8002b54:	f000 fdae 	bl	80036b4 <LSM9DS1_ReadReg>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <IMU_REG_Data+0x12c>)
 8002b5e:	745a      	strb	r2, [r3, #17]
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001034 	.word	0x20001034
 8002b68:	20000f20 	.word	0x20000f20

08002b6c <IMU_Sensor_Data>:

void IMU_Sensor_Data(MPU6500_t *DEFAULT_MPU6500, lsm9ds1_t *DEFAULT_LSM9DS1) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]

	// combined of MPU, MAG and all non filtered sensor data
	//acc
	IMU_SEN_DATA[0] = DEFAULT_MPU6500->sensorData.ax;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002b7c:	6013      	str	r3, [r2, #0]
	IMU_SEN_DATA[1] = DEFAULT_MPU6500->sensorData.ay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002b84:	6053      	str	r3, [r2, #4]
	IMU_SEN_DATA[2] = DEFAULT_MPU6500->sensorData.az;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002b8c:	6093      	str	r3, [r2, #8]

	//angular velocity
	IMU_SEN_DATA[3] = DEFAULT_MPU6500->sensorData.gx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002b94:	60d3      	str	r3, [r2, #12]
	IMU_SEN_DATA[4] = DEFAULT_MPU6500->sensorData.gy;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002b9c:	6113      	str	r3, [r2, #16]
	IMU_SEN_DATA[5] = DEFAULT_MPU6500->sensorData.gz;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002ba4:	6153      	str	r3, [r2, #20]

	//magnetic field
	IMU_SEN_DATA[6] = DEFAULT_LSM9DS1->m_sensor_data.mx;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002bac:	6193      	str	r3, [r2, #24]
	IMU_SEN_DATA[7] = DEFAULT_LSM9DS1->m_sensor_data.my;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002bb4:	61d3      	str	r3, [r2, #28]
	IMU_SEN_DATA[8] = DEFAULT_LSM9DS1->m_sensor_data.mz;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <IMU_Sensor_Data+0x5c>)
 8002bbc:	6213      	str	r3, [r2, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000f34 	.word	0x20000f34

08002bcc <IMU_RCFilter>:

imu_filter IMU_RCFilter() {
 8002bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd0:	b0ba      	sub	sp, #232	; 0xe8
 8002bd2:	af06      	add	r7, sp, #24
 8002bd4:	6078      	str	r0, [r7, #4]
	RCFilter lpfGyr[3];
	RCFilter lpfMag[3];

	imu_filter filt_imu;

	for (int n = 0; n < 3; n++) {
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bdc:	e026      	b.n	8002c2c <IMU_RCFilter+0x60>
		RCFilter_Init(&lpfAcc[n], 5.0f, 0.01f);
 8002bde:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	4aa1      	ldr	r2, [pc, #644]	; (8002e70 <IMU_RCFilter+0x2a4>)
 8002bec:	49a1      	ldr	r1, [pc, #644]	; (8002e74 <IMU_RCFilter+0x2a8>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8e0 	bl	8003db4 <RCFilter_Init>
		RCFilter_Init(&lpfGyr[n], 25.0f, 0.01f);
 8002bf4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <IMU_RCFilter+0x2a4>)
 8002c02:	499d      	ldr	r1, [pc, #628]	; (8002e78 <IMU_RCFilter+0x2ac>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 f8d5 	bl	8003db4 <RCFilter_Init>
		RCFilter_Init(&lpfMag[n], 1.0f, 0.01f);
 8002c0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	4a96      	ldr	r2, [pc, #600]	; (8002e70 <IMU_RCFilter+0x2a4>)
 8002c18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f8c9 	bl	8003db4 <RCFilter_Init>
	for (int n = 0; n < 3; n++) {
 8002c22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c26:	3301      	adds	r3, #1
 8002c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	ddd4      	ble.n	8002bde <IMU_RCFilter+0x12>
	}

	/* Filter accelerometer data */
	RCFilter_Update(&lpfAcc[0], IMU_SEN_DATA[0]); // sensor data ax
 8002c34:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f8f2 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[1], IMU_SEN_DATA[1]); // sensor data ay
 8002c44:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f8e9 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfAcc[2], IMU_SEN_DATA[2]);	// sensor data az
 8002c56:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c5e:	3320      	adds	r3, #32
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f8e0 	bl	8003e28 <RCFilter_Update>

	/* Filter gyroscope data */
	RCFilter_Update(&lpfGyr[0], IMU_SEN_DATA[3]);	//sensor data gx
 8002c68:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f8d8 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[1], IMU_SEN_DATA[4]);	//sensor data gy
 8002c78:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c80:	3310      	adds	r3, #16
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 f8cf 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfGyr[2], IMU_SEN_DATA[5]);	//sensor data gz
 8002c8a:	4b7c      	ldr	r3, [pc, #496]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c92:	3320      	adds	r3, #32
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 f8c6 	bl	8003e28 <RCFilter_Update>

	/* Filter magmetometer data */
	RCFilter_Update(&lpfMag[0], IMU_SEN_DATA[6]);   // mx
 8002c9c:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f8be 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfMag[1], IMU_SEN_DATA[7]);   // my
 8002cac:	4b73      	ldr	r3, [pc, #460]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f8b5 	bl	8003e28 <RCFilter_Update>
	RCFilter_Update(&lpfMag[2], IMU_SEN_DATA[8]);   // mz
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f8ac 	bl	8003e28 <RCFilter_Update>

	//Filtered accelerometer measurement
	filt_imu.ax_mps2 = lpfAcc[0].out[0];
 8002cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cd4:	60bb      	str	r3, [r7, #8]
	filt_imu.ay_mps2 = lpfAcc[1].out[0];
 8002cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cda:	60fb      	str	r3, [r7, #12]
	filt_imu.az_mps2 = lpfAcc[2].out[0];
 8002cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce0:	613b      	str	r3, [r7, #16]
	//Filtered Gyroscope measurement
	filt_imu.p_rps = lpfGyr[0].out[0];
 8002ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce4:	617b      	str	r3, [r7, #20]
	filt_imu.q_rps = lpfGyr[1].out[0];
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	61bb      	str	r3, [r7, #24]
	filt_imu.r_rps = lpfGyr[2].out[0];
 8002cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cf0:	61fb      	str	r3, [r7, #28]
	//Filtered Magnetometer measurement
	filt_imu.mx_ut = lpfMag[0].out[0];
 8002cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf4:	623b      	str	r3, [r7, #32]
	filt_imu.my_ut = lpfMag[1].out[0];
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
	filt_imu.mz_ut = lpfMag[2].out[0];
 8002cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28

	// if no use of filter
	filt_imu.ax_mps2 = IMU_SEN_DATA[0];
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60bb      	str	r3, [r7, #8]
	filt_imu.ay_mps2 = IMU_SEN_DATA[1];
 8002d04:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
	filt_imu.az_mps2 = IMU_SEN_DATA[2];
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	613b      	str	r3, [r7, #16]

	filt_imu.p_rps = IMU_SEN_DATA[3];
 8002d10:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	617b      	str	r3, [r7, #20]
	filt_imu.q_rps = IMU_SEN_DATA[4];
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	61bb      	str	r3, [r7, #24]
	filt_imu.r_rps = IMU_SEN_DATA[5];
 8002d1c:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	61fb      	str	r3, [r7, #28]

	filt_imu.mx_ut = IMU_SEN_DATA[6];
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	623b      	str	r3, [r7, #32]
	filt_imu.my_ut = IMU_SEN_DATA[7];
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
	filt_imu.mz_ut = IMU_SEN_DATA[8];
 8002d2e:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <IMU_RCFilter+0x2b0>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28

	filt_imu.total_mag = sqrt(
			filt_imu.mx_ut * filt_imu.mx_ut + filt_imu.my_ut * filt_imu.my_ut
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f822 	bl	8000d84 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461c      	mov	r4, r3
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f81a 	bl	8000d84 <__aeabi_fmul>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4619      	mov	r1, r3
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7fd ff0d 	bl	8000b74 <__addsf3>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461c      	mov	r4, r3
					+ filt_imu.mz_ut * filt_imu.mz_ut);
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f80d 	bl	8000d84 <__aeabi_fmul>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7fd ff00 	bl	8000b74 <__addsf3>
 8002d74:	4603      	mov	r3, r0
	filt_imu.total_mag = sqrt(
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fb56 	bl	8000428 <__aeabi_f2d>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f00b f86c 	bl	800de60 <sqrt>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	myDebug("\n-----RC filtered, Sensor Data-----\r\n");
 8002d90:	483b      	ldr	r0, [pc, #236]	; (8002e80 <IMU_RCFilter+0x2b4>)
 8002d92:	f7fe fa51 	bl	8001238 <myDebug>
	myDebug("ACCEL (m/s^2)\r\n");
 8002d96:	483b      	ldr	r0, [pc, #236]	; (8002e84 <IMU_RCFilter+0x2b8>)
 8002d98:	f7fe fa4e 	bl	8001238 <myDebug>
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb42 	bl	8000428 <__aeabi_f2d>
 8002da4:	4680      	mov	r8, r0
 8002da6:	4689      	mov	r9, r1
			filt_imu.ay_mps2, filt_imu.az_mps2);
 8002da8:	68fb      	ldr	r3, [r7, #12]
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fb3c 	bl	8000428 <__aeabi_f2d>
 8002db0:	4604      	mov	r4, r0
 8002db2:	460d      	mov	r5, r1
			filt_imu.ay_mps2, filt_imu.az_mps2);
 8002db4:	693b      	ldr	r3, [r7, #16]
	myDebug(" ax = %.2f \tay = %.2f \taz = %.2f \r\n", filt_imu.ax_mps2,
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb36 	bl	8000428 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dc4:	e9cd 4500 	strd	r4, r5, [sp]
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	482e      	ldr	r0, [pc, #184]	; (8002e88 <IMU_RCFilter+0x2bc>)
 8002dce:	f7fe fa33 	bl	8001238 <myDebug>
	myDebug("GYRO (rad/s) \r\n");
 8002dd2:	482e      	ldr	r0, [pc, #184]	; (8002e8c <IMU_RCFilter+0x2c0>)
 8002dd4:	f7fe fa30 	bl	8001238 <myDebug>
	myDebug(" gx = %.2f \tgy = %.2f \tgz = %.2f \r\n", filt_imu.p_rps, filt_imu.q_rps,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb24 	bl	8000428 <__aeabi_f2d>
 8002de0:	4680      	mov	r8, r0
 8002de2:	4689      	mov	r9, r1
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb1e 	bl	8000428 <__aeabi_f2d>
 8002dec:	4604      	mov	r4, r0
 8002dee:	460d      	mov	r5, r1
			filt_imu.r_rps);
 8002df0:	69fb      	ldr	r3, [r7, #28]
	myDebug(" gx = %.2f \tgy = %.2f \tgz = %.2f \r\n", filt_imu.p_rps, filt_imu.q_rps,
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb18 	bl	8000428 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e00:	e9cd 4500 	strd	r4, r5, [sp]
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	4821      	ldr	r0, [pc, #132]	; (8002e90 <IMU_RCFilter+0x2c4>)
 8002e0a:	f7fe fa15 	bl	8001238 <myDebug>
	myDebug("MAG (uT) \r\n");
 8002e0e:	4821      	ldr	r0, [pc, #132]	; (8002e94 <IMU_RCFilter+0x2c8>)
 8002e10:	f7fe fa12 	bl	8001238 <myDebug>
	myDebug(" mx = %.2f \tmy = %.2f \tmz = %.2f \r\nTotal Magenotometer = %.2f uT\r\n",
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
	myDebug(" mx = %.2f \tmy = %.2f \tmz = %.2f \r\nTotal Magenotometer = %.2f uT\r\n",
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fb06 	bl	8000428 <__aeabi_f2d>
 8002e1c:	4680      	mov	r8, r0
 8002e1e:	4689      	mov	r9, r1
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	myDebug(" mx = %.2f \tmy = %.2f \tmz = %.2f \r\nTotal Magenotometer = %.2f uT\r\n",
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb00 	bl	8000428 <__aeabi_f2d>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	460d      	mov	r5, r1
			filt_imu.mx_ut, filt_imu.my_ut, filt_imu.mz_ut, filt_imu.total_mag);
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	myDebug(" mx = %.2f \tmy = %.2f \tmz = %.2f \r\nTotal Magenotometer = %.2f uT\r\n",
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fafa 	bl	8000428 <__aeabi_f2d>
 8002e34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e40:	e9cd 4500 	strd	r4, r5, [sp]
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	4813      	ldr	r0, [pc, #76]	; (8002e98 <IMU_RCFilter+0x2cc>)
 8002e4a:	f7fe f9f5 	bl	8001238 <myDebug>

	return filt_imu;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	461d      	mov	r5, r3
 8002e52:	f107 0408 	add.w	r4, r7, #8
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	37d0      	adds	r7, #208	; 0xd0
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e70:	3c23d70a 	.word	0x3c23d70a
 8002e74:	40a00000 	.word	0x40a00000
 8002e78:	41c80000 	.word	0x41c80000
 8002e7c:	20000f34 	.word	0x20000f34
 8002e80:	080107f0 	.word	0x080107f0
 8002e84:	08010818 	.word	0x08010818
 8002e88:	08010828 	.word	0x08010828
 8002e8c:	0801084c 	.word	0x0801084c
 8002e90:	0801085c 	.word	0x0801085c
 8002e94:	08010880 	.word	0x08010880
 8002e98:	0801088c 	.word	0x0801088c

08002e9c <IMU_Get_Data>:

imu_filter IMU_Get_Data(MPU6500_t *DEFAULT_MPU6500, lsm9ds1_t *DEFAULT_LSM9DS1) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
	IMU_REG_Data();   //register data
 8002ea8:	f7ff fdc8 	bl	8002a3c <IMU_REG_Data>
	MPU_calcAttitude(DEFAULT_MPU6500);	//calculate ACC, GRYO sensor data
 8002eac:	68b8      	ldr	r0, [r7, #8]
 8002eae:	f000 fa5d 	bl	800336c <MPU_calcAttitude>
	LSM9DS1_ReadData(DEFAULT_LSM9DS1);	//calculate MAG sensor data
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fc7c 	bl	80037b0 <LSM9DS1_ReadData>
	IMU_Sensor_Data(DEFAULT_MPU6500, DEFAULT_LSM9DS1); // sensor data of IMU without filter
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68b8      	ldr	r0, [r7, #8]
 8002ebc:	f7ff fe56 	bl	8002b6c <IMU_Sensor_Data>
	return (IMU_RCFilter());
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fe82 	bl	8002bcc <IMU_RCFilter>
}
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <whoAmI>:
#include "MPU_sensor.h"

//static uint8_t _buffer[14];

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x70 */
uint8_t whoAmI() {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
	uint8_t readRegBuffer;
	// read the WHO AM I register
	readRegisters(WHO_AM_I_MPU_ADDR, 1, &readRegBuffer);
 8002ed6:	1dfb      	adds	r3, r7, #7
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2101      	movs	r1, #1
 8002edc:	2075      	movs	r0, #117	; 0x75
 8002ede:	f000 f805 	bl	8002eec <readRegisters>

	// return the register value
	return readRegBuffer;
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t readAddress, uint8_t numByteToRead,
		uint8_t *r_buffer) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	603a      	str	r2, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(readAddress, numByteToRead, r_buffer);
 8002efc:	79b9      	ldrb	r1, [r7, #6]
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f804 	bl	8002f10 <MPU_SPI_Read>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t readAddress, uint8_t numByteToRead, uint8_t *r_buffer) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	603a      	str	r2, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	71bb      	strb	r3, [r7, #6]
	MPU_CS(CS_SEL);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f000 f81d 	bl	8002f60 <MPU_CS>
	uint8_t tData = readAddress | MPU_READ_CMD;
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &tData, 1, 100);
 8002f30:	f107 010f 	add.w	r1, r7, #15
 8002f34:	2364      	movs	r3, #100	; 0x64
 8002f36:	2201      	movs	r2, #1
 8002f38:	4808      	ldr	r0, [pc, #32]	; (8002f5c <MPU_SPI_Read+0x4c>)
 8002f3a:	f003 fdbf 	bl	8006abc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, r_buffer, numByteToRead, 100);
 8002f3e:	79bb      	ldrb	r3, [r7, #6]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	2364      	movs	r3, #100	; 0x64
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MPU_SPI_Read+0x4c>)
 8002f48:	f003 fefc 	bl	8006d44 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 f807 	bl	8002f60 <MPU_CS>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20001034 	.word	0x20001034

08002f60 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, state);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f72:	4803      	ldr	r0, [pc, #12]	; (8002f80 <MPU_CS+0x20>)
 8002f74:	f003 f8f8 	bl	8006168 <HAL_GPIO_WritePin>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010c00 	.word	0x40010c00

08002f84 <MPU_begin>:

int MPU_begin(MPU6500_t *pMPU6500) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

	uint8_t addr, val;

	whoAmI();
 8002f8c:	f7ff ffa0 	bl	8002ed0 <whoAmI>

	if (whoAmI() == WHO_AM_I_MPU_REG_DEFAULT) {
 8002f90:	f7ff ff9e 	bl	8002ed0 <whoAmI>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b70      	cmp	r3, #112	; 0x70
 8002f98:	d128      	bne.n	8002fec <MPU_begin+0x68>

		// configuring MPU6500
		addr = PWR_MGMT_1;
 8002f9a:	236b      	movs	r3, #107	; 0x6b
 8002f9c:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8002fa2:	7bba      	ldrb	r2, [r7, #14]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f82d 	bl	8003008 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 8002fae:	236a      	movs	r3, #106	; 0x6a
 8002fb0:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8002fb6:	7bba      	ldrb	r2, [r7, #14]
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f823 	bl	8003008 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 8002fc2:	2311      	movs	r3, #17
 8002fc4:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 8002fc6:	2004      	movs	r0, #4
 8002fc8:	f000 f878 	bl	80030bc <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f887 	bl	80030e8 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8dc 	bl	80031a0 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <MPU_begin+0x78>
	} else {
		myDebug("WHO AM I Failed!!!-> %x \r\n", whoAmI());
 8002fec:	f7ff ff70 	bl	8002ed0 <whoAmI>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4803      	ldr	r0, [pc, #12]	; (8003004 <MPU_begin+0x80>)
 8002ff6:	f7fe f91f 	bl	8001238 <myDebug>
		return 0;
 8002ffa:	2300      	movs	r3, #0
	}
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	080108d0 	.word	0x080108d0

08003008 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t writeAddress, uint8_t numByteToWrite, uint8_t data) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
 8003012:	460b      	mov	r3, r1
 8003014:	71bb      	strb	r3, [r7, #6]
 8003016:	4613      	mov	r3, r2
 8003018:	717b      	strb	r3, [r7, #5]
	MPU_SPI_Write(writeAddress, numByteToWrite, &data);
 800301a:	1d7a      	adds	r2, r7, #5
 800301c:	79b9      	ldrb	r1, [r7, #6]
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f807 	bl	8003034 <MPU_SPI_Write>
	HAL_Delay(10);
 8003026:	200a      	movs	r0, #10
 8003028:	f002 fd36 	bl	8005a98 <HAL_Delay>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t writeAddress, uint8_t numByteToWrite, uint8_t *data) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	603a      	str	r2, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
 8003040:	460b      	mov	r3, r1
 8003042:	71bb      	strb	r3, [r7, #6]
	MPU_CS(CS_SEL);
 8003044:	2000      	movs	r0, #0
 8003046:	f7ff ff8b 	bl	8002f60 <MPU_CS>
	SPIx_WriteRead(writeAddress);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f817 	bl	8003080 <SPIx_WriteRead>
	while (numByteToWrite >= 0x01) {
 8003052:	e00a      	b.n	800306a <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*data);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f811 	bl	8003080 <SPIx_WriteRead>
		numByteToWrite--;
 800305e:	79bb      	ldrb	r3, [r7, #6]
 8003060:	3b01      	subs	r3, #1
 8003062:	71bb      	strb	r3, [r7, #6]
		data++;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	603b      	str	r3, [r7, #0]
	while (numByteToWrite >= 0x01) {
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f1      	bne.n	8003054 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 8003070:	2001      	movs	r0, #1
 8003072:	f7ff ff75 	bl	8002f60 <MPU_CS>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte,
 800308e:	f107 020f 	add.w	r2, r7, #15
 8003092:	1df9      	adds	r1, r7, #7
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2301      	movs	r3, #1
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <SPIx_WriteRead+0x38>)
 800309e:	f003 ff6a 	bl	8006f76 <HAL_SPI_TransmitReceive>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 80030a8:	23ff      	movs	r3, #255	; 0xff
 80030aa:	e000      	b.n	80030ae <SPIx_WriteRead+0x2e>
	} else {
		return receivedbyte;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20001034 	.word	0x20001034

080030bc <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG_2, 1, bandwidth);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	461a      	mov	r2, r3
 80030ca:	2101      	movs	r1, #1
 80030cc:	201d      	movs	r0, #29
 80030ce:	f7ff ff9b 	bl	8003008 <writeRegister>
	writeRegister(CONFIG, 1, bandwidth);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	461a      	mov	r2, r3
 80030d6:	2101      	movs	r1, #1
 80030d8:	201a      	movs	r0, #26
 80030da:	f7ff ff95 	bl	8003008 <writeRegister>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 80030f4:	231c      	movs	r3, #28
 80030f6:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d83e      	bhi.n	800317c <MPU_writeAccFullScaleRange+0x94>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <MPU_writeAccFullScaleRange+0x1c>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800312f 	.word	0x0800312f
 800310c:	08003149 	.word	0x08003149
 8003110:	08003163 	.word	0x08003163
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800311a:	60da      	str	r2, [r3, #12]
		val = 0x00;
 800311c:	2300      	movs	r3, #0
 800311e:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003120:	7bba      	ldrb	r2, [r7, #14]
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2101      	movs	r1, #1
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff6e 	bl	8003008 <writeRegister>
		break;
 800312c:	e033      	b.n	8003196 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003134:	60da      	str	r2, [r3, #12]
		val = 0x08;
 8003136:	2308      	movs	r3, #8
 8003138:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800313a:	7bba      	ldrb	r2, [r7, #14]
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff61 	bl	8003008 <writeRegister>
		break;
 8003146:	e026      	b.n	8003196 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800314e:	60da      	str	r2, [r3, #12]
		val = 0x10;
 8003150:	2310      	movs	r3, #16
 8003152:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003154:	7bba      	ldrb	r2, [r7, #14]
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2101      	movs	r1, #1
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff54 	bl	8003008 <writeRegister>
		break;
 8003160:	e019      	b.n	8003196 <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003168:	60da      	str	r2, [r3, #12]
		val = 0x18;
 800316a:	2318      	movs	r3, #24
 800316c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800316e:	7bba      	ldrb	r2, [r7, #14]
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff47 	bl	8003008 <writeRegister>
		break;
 800317a:	e00c      	b.n	8003196 <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8003182:	60da      	str	r2, [r3, #12]
		val = 0x08;
 8003184:	2308      	movs	r3, #8
 8003186:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003188:	7bba      	ldrb	r2, [r7, #14]
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff3a 	bl	8003008 <writeRegister>
		break;
 8003194:	bf00      	nop
	}
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop

080031a0 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 80031ac:	231b      	movs	r3, #27
 80031ae:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d83a      	bhi.n	800322c <MPU_writeGyroFullScaleRange+0x8c>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <MPU_writeGyroFullScaleRange+0x1c>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	08003215 	.word	0x08003215
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1f      	ldr	r2, [pc, #124]	; (800324c <MPU_writeGyroFullScaleRange+0xac>)
 80031d0:	611a      	str	r2, [r3, #16]
		val = 0x00;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 80031d6:	7bba      	ldrb	r2, [r7, #14]
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff13 	bl	8003008 <writeRegister>
		break;
 80031e2:	e02f      	b.n	8003244 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <MPU_writeGyroFullScaleRange+0xb0>)
 80031e8:	611a      	str	r2, [r3, #16]
		val = 0x08;
 80031ea:	2308      	movs	r3, #8
 80031ec:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 80031ee:	7bba      	ldrb	r2, [r7, #14]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff07 	bl	8003008 <writeRegister>
		break;
 80031fa:	e023      	b.n	8003244 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <MPU_writeGyroFullScaleRange+0xb4>)
 8003200:	611a      	str	r2, [r3, #16]
		val = 0x10;
 8003202:	2310      	movs	r3, #16
 8003204:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003206:	7bba      	ldrb	r2, [r7, #14]
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fefb 	bl	8003008 <writeRegister>
		break;
 8003212:	e017      	b.n	8003244 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a10      	ldr	r2, [pc, #64]	; (8003258 <MPU_writeGyroFullScaleRange+0xb8>)
 8003218:	611a      	str	r2, [r3, #16]
		val = 0x18;
 800321a:	2318      	movs	r3, #24
 800321c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 800321e:	7bba      	ldrb	r2, [r7, #14]
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff feef 	bl	8003008 <writeRegister>
		break;
 800322a:	e00b      	b.n	8003244 <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <MPU_writeGyroFullScaleRange+0xb0>)
 8003230:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8003232:	2308      	movs	r3, #8
 8003234:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, 1, val);
 8003236:	7bba      	ldrb	r2, [r7, #14]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fee3 	bl	8003008 <writeRegister>
		break;
 8003242:	bf00      	nop
	}
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	43030000 	.word	0x43030000
 8003250:	42830000 	.word	0x42830000
 8003254:	42033333 	.word	0x42033333
 8003258:	41833333 	.word	0x41833333

0800325c <MPU6500_GetData>:
	pMPU6500->gyroCal.Ay = (float) Ay / (float) numCalPoints;
	pMPU6500->gyroCal.Az = (float) Az / (float) numCalPoints;
}

/* read the data, each argument should point to a array for x, y, and z */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500

	uint8_t _buffer[14];

	_buffer[0] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_H);
 8003264:	213b      	movs	r1, #59	; 0x3b
 8003266:	4840      	ldr	r0, [pc, #256]	; (8003368 <MPU6500_GetData+0x10c>)
 8003268:	f000 fa00 	bl	800366c <MPU6500_ReadReg>
 800326c:	4603      	mov	r3, r0
 800326e:	723b      	strb	r3, [r7, #8]
	_buffer[1] = MPU6500_ReadReg(&hspi1, ACCEL_XOUT_L);
 8003270:	213c      	movs	r1, #60	; 0x3c
 8003272:	483d      	ldr	r0, [pc, #244]	; (8003368 <MPU6500_GetData+0x10c>)
 8003274:	f000 f9fa 	bl	800366c <MPU6500_ReadReg>
 8003278:	4603      	mov	r3, r0
 800327a:	727b      	strb	r3, [r7, #9]
	_buffer[2] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_H);
 800327c:	213d      	movs	r1, #61	; 0x3d
 800327e:	483a      	ldr	r0, [pc, #232]	; (8003368 <MPU6500_GetData+0x10c>)
 8003280:	f000 f9f4 	bl	800366c <MPU6500_ReadReg>
 8003284:	4603      	mov	r3, r0
 8003286:	72bb      	strb	r3, [r7, #10]
	_buffer[3] = MPU6500_ReadReg(&hspi1, ACCEL_YOUT_L);
 8003288:	213e      	movs	r1, #62	; 0x3e
 800328a:	4837      	ldr	r0, [pc, #220]	; (8003368 <MPU6500_GetData+0x10c>)
 800328c:	f000 f9ee 	bl	800366c <MPU6500_ReadReg>
 8003290:	4603      	mov	r3, r0
 8003292:	72fb      	strb	r3, [r7, #11]
	_buffer[4] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_H);
 8003294:	213f      	movs	r1, #63	; 0x3f
 8003296:	4834      	ldr	r0, [pc, #208]	; (8003368 <MPU6500_GetData+0x10c>)
 8003298:	f000 f9e8 	bl	800366c <MPU6500_ReadReg>
 800329c:	4603      	mov	r3, r0
 800329e:	733b      	strb	r3, [r7, #12]
	_buffer[5] = MPU6500_ReadReg(&hspi1, ACCEL_ZOUT_L);
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	4831      	ldr	r0, [pc, #196]	; (8003368 <MPU6500_GetData+0x10c>)
 80032a4:	f000 f9e2 	bl	800366c <MPU6500_ReadReg>
 80032a8:	4603      	mov	r3, r0
 80032aa:	737b      	strb	r3, [r7, #13]

	_buffer[6] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_H);
 80032ac:	2143      	movs	r1, #67	; 0x43
 80032ae:	482e      	ldr	r0, [pc, #184]	; (8003368 <MPU6500_GetData+0x10c>)
 80032b0:	f000 f9dc 	bl	800366c <MPU6500_ReadReg>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73bb      	strb	r3, [r7, #14]
	_buffer[7] = MPU6500_ReadReg(&hspi1, GYRO_XOUT_L);
 80032b8:	2144      	movs	r1, #68	; 0x44
 80032ba:	482b      	ldr	r0, [pc, #172]	; (8003368 <MPU6500_GetData+0x10c>)
 80032bc:	f000 f9d6 	bl	800366c <MPU6500_ReadReg>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
	_buffer[8] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_H);
 80032c4:	2145      	movs	r1, #69	; 0x45
 80032c6:	4828      	ldr	r0, [pc, #160]	; (8003368 <MPU6500_GetData+0x10c>)
 80032c8:	f000 f9d0 	bl	800366c <MPU6500_ReadReg>
 80032cc:	4603      	mov	r3, r0
 80032ce:	743b      	strb	r3, [r7, #16]
	_buffer[9] = MPU6500_ReadReg(&hspi1, GYRO_YOUT_L);
 80032d0:	2146      	movs	r1, #70	; 0x46
 80032d2:	4825      	ldr	r0, [pc, #148]	; (8003368 <MPU6500_GetData+0x10c>)
 80032d4:	f000 f9ca 	bl	800366c <MPU6500_ReadReg>
 80032d8:	4603      	mov	r3, r0
 80032da:	747b      	strb	r3, [r7, #17]
	_buffer[10] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_H);
 80032dc:	2147      	movs	r1, #71	; 0x47
 80032de:	4822      	ldr	r0, [pc, #136]	; (8003368 <MPU6500_GetData+0x10c>)
 80032e0:	f000 f9c4 	bl	800366c <MPU6500_ReadReg>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74bb      	strb	r3, [r7, #18]
	_buffer[11] = MPU6500_ReadReg(&hspi1, GYRO_ZOUT_L);
 80032e8:	2148      	movs	r1, #72	; 0x48
 80032ea:	481f      	ldr	r0, [pc, #124]	; (8003368 <MPU6500_GetData+0x10c>)
 80032ec:	f000 f9be 	bl	800366c <MPU6500_ReadReg>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]

	//readRegisters(ACCEL_OUT, 14, _buffer);

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 80032f4:	7a3b      	ldrb	r3, [r7, #8]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	7a7b      	ldrb	r3, [r7, #9]
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	b21a      	sxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 8003306:	7abb      	ldrb	r3, [r7, #10]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b21a      	sxth	r2, r3
 800330c:	7afb      	ldrb	r3, [r7, #11]
 800330e:	b21b      	sxth	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b21a      	sxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 8003318:	7b3b      	ldrb	r3, [r7, #12]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	b21a      	sxth	r2, r3
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	b21b      	sxth	r3, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	b21a      	sxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	809a      	strh	r2, [r3, #4]

	pMPU6500->rawData.gx = (((int16_t) _buffer[6]) << 8) | _buffer[7];
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	b21a      	sxth	r2, r3
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	b21b      	sxth	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b21a      	sxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 800333c:	7c3b      	ldrb	r3, [r7, #16]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b21a      	sxth	r2, r3
 8003342:	7c7b      	ldrb	r3, [r7, #17]
 8003344:	b21b      	sxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b21a      	sxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 800334e:	7cbb      	ldrb	r3, [r7, #18]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	b21a      	sxth	r2, r3
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	b21b      	sxth	r3, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	b21a      	sxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	815a      	strh	r2, [r3, #10]

}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20001034 	.word	0x20001034

0800336c <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_calcAttitude(MPU6500_t *pMPU6500) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	// Read processed data
	MPU_readProcessedData(pMPU6500);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f807 	bl	8003388 <MPU_readProcessedData>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	0000      	movs	r0, r0
 8003384:	0000      	movs	r0, r0
	...

08003388 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_readProcessedData(MPU6500_t *pMPU6500) {
 8003388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af04      	add	r7, sp, #16
 8003390:	6078      	str	r0, [r7, #4]
	// Get raw values from the IMU
	MPU6500_GetData(pMPU6500);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff62 	bl	800325c <MPU6500_GetData>

	// Compensate for accel offset
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax - 540.2096;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f830 	bl	8000404 <__aeabi_i2d>
 80033a4:	a39e      	add	r3, pc, #632	; (adr r3, 8003620 <MPU_readProcessedData+0x298>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc fedd 	bl	8000168 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fd fb87 	bl	8000ac8 <__aeabi_d2f>
 80033ba:	4602      	mov	r2, r0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay - 196.684;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f81c 	bl	8000404 <__aeabi_i2d>
 80033cc:	a396      	add	r3, pc, #600	; (adr r3, 8003628 <MPU_readProcessedData+0x2a0>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fc fec9 	bl	8000168 <__aeabi_dsub>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7fd fb73 	bl	8000ac8 <__aeabi_d2f>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az - 1538.457;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f808 	bl	8000404 <__aeabi_i2d>
 80033f4:	a38e      	add	r3, pc, #568	; (adr r3, 8003630 <MPU_readProcessedData+0x2a8>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fc feb5 	bl	8000168 <__aeabi_dsub>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fb5f 	bl	8000ac8 <__aeabi_d2f>
 800340a:	4602      	mov	r2, r0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	61da      	str	r2, [r3, #28]

// Convert accelerometer values to g's
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ pMPU6500->sensorData.aScaleFactor;
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fc60 	bl	8000cdc <__aeabi_i2f>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fd fd61 	bl	8000eec <__aeabi_fdiv>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ pMPU6500->sensorData.aScaleFactor;
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fc4f 	bl	8000cdc <__aeabi_i2f>
 800343e:	4602      	mov	r2, r0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7fd fd50 	bl	8000eec <__aeabi_fdiv>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ pMPU6500->sensorData.aScaleFactor;
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fc3e 	bl	8000cdc <__aeabi_i2f>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7fd fd3f 	bl	8000eec <__aeabi_fdiv>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	61da      	str	r2, [r3, #28]

// Compensate for gyro offset
	pMPU6500->sensorData.gx = pMPU6500->rawData.gx - (-249.209);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fc ffc1 	bl	8000404 <__aeabi_i2d>
 8003482:	a36d      	add	r3, pc, #436	; (adr r3, 8003638 <MPU_readProcessedData+0x2b0>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fc fe70 	bl	800016c <__adddf3>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f7fd fb18 	bl	8000ac8 <__aeabi_d2f>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = pMPU6500->rawData.gy - 283.064;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fc ffad 	bl	8000404 <__aeabi_i2d>
 80034aa:	a365      	add	r3, pc, #404	; (adr r3, 8003640 <MPU_readProcessedData+0x2b8>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fc fe5a 	bl	8000168 <__aeabi_dsub>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f7fd fb04 	bl	8000ac8 <__aeabi_d2f>
 80034c0:	4602      	mov	r2, r0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = pMPU6500->rawData.gz - (-3.174);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fc ff99 	bl	8000404 <__aeabi_i2d>
 80034d2:	a35d      	add	r3, pc, #372	; (adr r3, 8003648 <MPU_readProcessedData+0x2c0>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fc fe48 	bl	800016c <__adddf3>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd faf0 	bl	8000ac8 <__aeabi_d2f>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
//			/ pMPU6500->sensorData.gScaleFactor);
//	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
//			/ pMPU6500->sensorData.gScaleFactor);

// Convert gyro values to rad/s
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1a      	ldr	r2, [r3, #32]
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fd fcf7 	bl	8000eec <__aeabi_fdiv>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc ff91 	bl	8000428 <__aeabi_f2d>
 8003506:	a352      	add	r3, pc, #328	; (adr r3, 8003650 <MPU_readProcessedData+0x2c8>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f7fc ffe4 	bl	80004d8 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7fd fad6 	bl	8000ac8 <__aeabi_d2f>
 800351c:	4602      	mov	r2, r0
	pMPU6500->sensorData.gx = (pMPU6500->sensorData.gx
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fd fcdd 	bl	8000eec <__aeabi_fdiv>
 8003532:	4603      	mov	r3, r0
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc ff77 	bl	8000428 <__aeabi_f2d>
 800353a:	a345      	add	r3, pc, #276	; (adr r3, 8003650 <MPU_readProcessedData+0x2c8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fc ffca 	bl	80004d8 <__aeabi_dmul>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f7fd fabc 	bl	8000ac8 <__aeabi_d2f>
 8003550:	4602      	mov	r2, r0
	pMPU6500->sensorData.gy = (pMPU6500->sensorData.gy
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			/ pMPU6500->sensorData.gScaleFactor) * DEG2RAD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fd fcc3 	bl	8000eec <__aeabi_fdiv>
 8003566:	4603      	mov	r3, r0
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ff5d 	bl	8000428 <__aeabi_f2d>
 800356e:	a338      	add	r3, pc, #224	; (adr r3, 8003650 <MPU_readProcessedData+0x2c8>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fc ffb0 	bl	80004d8 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd faa2 	bl	8000ac8 <__aeabi_d2f>
 8003584:	4602      	mov	r2, r0
	pMPU6500->sensorData.gz = (pMPU6500->sensorData.gz
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28

	myDebug("-----Without filter, Sensor Data-----\r\n");
 800358a:	4833      	ldr	r0, [pc, #204]	; (8003658 <MPU_readProcessedData+0x2d0>)
 800358c:	f7fd fe54 	bl	8001238 <myDebug>
	myDebug("ACCEL (m/s^2)\r\n");
 8003590:	4832      	ldr	r0, [pc, #200]	; (800365c <MPU_readProcessedData+0x2d4>)
 8003592:	f7fd fe51 	bl	8001238 <myDebug>
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ff44 	bl	8000428 <__aeabi_f2d>
 80035a0:	4680      	mov	r8, r0
 80035a2:	4689      	mov	r9, r1
			pMPU6500->sensorData.ay, pMPU6500->sensorData.az);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ff3d 	bl	8000428 <__aeabi_f2d>
 80035ae:	4604      	mov	r4, r0
 80035b0:	460d      	mov	r5, r1
			pMPU6500->sensorData.ay, pMPU6500->sensorData.az);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
	myDebug(" ax = %.0f \tay = %.0f \taz = %.0f \r\n", pMPU6500->sensorData.ax,
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ff36 	bl	8000428 <__aeabi_f2d>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035c4:	e9cd 4500 	strd	r4, r5, [sp]
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	4824      	ldr	r0, [pc, #144]	; (8003660 <MPU_readProcessedData+0x2d8>)
 80035ce:	f7fd fe33 	bl	8001238 <myDebug>
	myDebug("GYRO (rad/s) \r\n");
 80035d2:	4824      	ldr	r0, [pc, #144]	; (8003664 <MPU_readProcessedData+0x2dc>)
 80035d4:	f7fd fe30 	bl	8001238 <myDebug>
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ff23 	bl	8000428 <__aeabi_f2d>
 80035e2:	4680      	mov	r8, r0
 80035e4:	4689      	mov	r9, r1
			pMPU6500->sensorData.gy, pMPU6500->sensorData.gz);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fc ff1c 	bl	8000428 <__aeabi_f2d>
 80035f0:	4604      	mov	r4, r0
 80035f2:	460d      	mov	r5, r1
			pMPU6500->sensorData.gy, pMPU6500->sensorData.gz);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	myDebug(" gx = %.0f \tgy = %.0f \tgz = %.0f \r\n", pMPU6500->sensorData.gx,
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff15 	bl	8000428 <__aeabi_f2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003606:	e9cd 4500 	strd	r4, r5, [sp]
 800360a:	4642      	mov	r2, r8
 800360c:	464b      	mov	r3, r9
 800360e:	4816      	ldr	r0, [pc, #88]	; (8003668 <MPU_readProcessedData+0x2e0>)
 8003610:	f7fd fe12 	bl	8001238 <myDebug>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800361e:	bf00      	nop
 8003620:	42c3c9ef 	.word	0x42c3c9ef
 8003624:	4080e1ad 	.word	0x4080e1ad
 8003628:	53f7ced9 	.word	0x53f7ced9
 800362c:	406895e3 	.word	0x406895e3
 8003630:	f7ced917 	.word	0xf7ced917
 8003634:	409809d3 	.word	0x409809d3
 8003638:	20c49ba6 	.word	0x20c49ba6
 800363c:	406f26b0 	.word	0x406f26b0
 8003640:	24dd2f1b 	.word	0x24dd2f1b
 8003644:	4071b106 	.word	0x4071b106
 8003648:	1cac0831 	.word	0x1cac0831
 800364c:	4009645a 	.word	0x4009645a
 8003650:	a226e211 	.word	0xa226e211
 8003654:	3f91df46 	.word	0x3f91df46
 8003658:	080108ec 	.word	0x080108ec
 800365c:	08010914 	.word	0x08010914
 8003660:	08010924 	.word	0x08010924
 8003664:	08010948 	.word	0x08010948
 8003668:	08010958 	.word	0x08010958

0800366c <MPU6500_ReadReg>:

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800367e:	b2db      	uxtb	r3, r3
 8003680:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 8003682:	2000      	movs	r0, #0
 8003684:	f7ff fc6c 	bl	8002f60 <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8003688:	1cf9      	adds	r1, r7, #3
 800368a:	2364      	movs	r3, #100	; 0x64
 800368c:	2201      	movs	r2, #1
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f003 fa14 	bl	8006abc <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8003694:	f107 010f 	add.w	r1, r7, #15
 8003698:	2364      	movs	r3, #100	; 0x64
 800369a:	2201      	movs	r2, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f003 fb51 	bl	8006d44 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7ff fc5c 	bl	8002f60 <MPU_CS>
	return val;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi1 pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi1, uint8_t add) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2110      	movs	r1, #16
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <LSM9DS1_ReadReg+0x50>)
 80036d0:	f002 fd4a 	bl	8006168 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1, &add, 1, 100);
 80036d4:	1cf9      	adds	r1, r7, #3
 80036d6:	2364      	movs	r3, #100	; 0x64
 80036d8:	2201      	movs	r2, #1
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f003 f9ee 	bl	8006abc <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi1, &val, 1, 100);
 80036e0:	f107 010f 	add.w	r1, r7, #15
 80036e4:	2364      	movs	r3, #100	; 0x64
 80036e6:	2201      	movs	r2, #1
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f003 fb2b 	bl	8006d44 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 80036ee:	2201      	movs	r2, #1
 80036f0:	2110      	movs	r1, #16
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <LSM9DS1_ReadReg+0x50>)
 80036f4:	f002 fd38 	bl	8006168 <HAL_GPIO_WritePin>
	return val;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40010800 	.word	0x40010800

08003708 <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi1 pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi1, uint8_t add, uint8_t val) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
 8003714:	4613      	mov	r3, r2
 8003716:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371e:	b2db      	uxtb	r3, r3
 8003720:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 8003722:	2200      	movs	r2, #0
 8003724:	2110      	movs	r1, #16
 8003726:	480c      	ldr	r0, [pc, #48]	; (8003758 <LSM9DS1_WriteReg+0x50>)
 8003728:	f002 fd1e 	bl	8006168 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1, &add, 1, 100);
 800372c:	1cf9      	adds	r1, r7, #3
 800372e:	2364      	movs	r3, #100	; 0x64
 8003730:	2201      	movs	r2, #1
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f003 f9c2 	bl	8006abc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi1, &val, 1, 100);
 8003738:	1cb9      	adds	r1, r7, #2
 800373a:	2364      	movs	r3, #100	; 0x64
 800373c:	2201      	movs	r2, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f003 f9bc 	bl	8006abc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 8003744:	2201      	movs	r2, #1
 8003746:	2110      	movs	r1, #16
 8003748:	4803      	ldr	r0, [pc, #12]	; (8003758 <LSM9DS1_WriteReg+0x50>)
 800374a:	f002 fd0d 	bl	8006168 <HAL_GPIO_WritePin>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40010800 	.word	0x40010800

0800375c <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
int LSM9DS1_Init(SPI_HandleTypeDef *hspi1, uint8_t ctrl2) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 8003768:	2374      	movs	r3, #116	; 0x74
 800376a:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG1_M, ctrl1);
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	461a      	mov	r2, r3
 8003770:	2120      	movs	r1, #32
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ffc8 	bl	8003708 <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG2_M, ctrl2);
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	461a      	mov	r2, r3
 800377c:	2121      	movs	r1, #33	; 0x21
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffc2 	bl	8003708 <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 8003784:	2300      	movs	r3, #0
 8003786:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG3_M, ctrl3);
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	461a      	mov	r2, r3
 800378c:	2122      	movs	r1, #34	; 0x22
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffba 	bl	8003708 <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 8003794:	230c      	movs	r3, #12
 8003796:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi1, LSM9DS1_CTRL_REG4_M, ctrl4);
 8003798:	7b7b      	ldrb	r3, [r7, #13]
 800379a:	461a      	mov	r2, r3
 800379c:	2123      	movs	r1, #35	; 0x23
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ffb2 	bl	8003708 <LSM9DS1_WriteReg>

	return 1;
 80037a4:	2301      	movs	r3, #1
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <LSM9DS1_ReadData>:

void LSM9DS1_ReadData(lsm9ds1_t *pLSM9DS1) {
 80037b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037b4:	b08a      	sub	sp, #40	; 0x28
 80037b6:	af06      	add	r7, sp, #24
 80037b8:	6078      	str	r0, [r7, #4]
	uint8_t Mag_Data[6];
	Mag_Data[0] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_L_M);
 80037ba:	2128      	movs	r1, #40	; 0x28
 80037bc:	4862      	ldr	r0, [pc, #392]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037be:	f7ff ff79 	bl	80036b4 <LSM9DS1_ReadReg>
 80037c2:	4603      	mov	r3, r0
 80037c4:	723b      	strb	r3, [r7, #8]
	Mag_Data[1] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_H_M);
 80037c6:	2129      	movs	r1, #41	; 0x29
 80037c8:	485f      	ldr	r0, [pc, #380]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037ca:	f7ff ff73 	bl	80036b4 <LSM9DS1_ReadReg>
 80037ce:	4603      	mov	r3, r0
 80037d0:	727b      	strb	r3, [r7, #9]
	Mag_Data[2] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_L_M);
 80037d2:	212a      	movs	r1, #42	; 0x2a
 80037d4:	485c      	ldr	r0, [pc, #368]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037d6:	f7ff ff6d 	bl	80036b4 <LSM9DS1_ReadReg>
 80037da:	4603      	mov	r3, r0
 80037dc:	72bb      	strb	r3, [r7, #10]
	Mag_Data[3] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_H_M);
 80037de:	212b      	movs	r1, #43	; 0x2b
 80037e0:	4859      	ldr	r0, [pc, #356]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037e2:	f7ff ff67 	bl	80036b4 <LSM9DS1_ReadReg>
 80037e6:	4603      	mov	r3, r0
 80037e8:	72fb      	strb	r3, [r7, #11]
	Mag_Data[4] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_L_M);
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	4856      	ldr	r0, [pc, #344]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037ee:	f7ff ff61 	bl	80036b4 <LSM9DS1_ReadReg>
 80037f2:	4603      	mov	r3, r0
 80037f4:	733b      	strb	r3, [r7, #12]
	Mag_Data[5] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_H_M);
 80037f6:	212d      	movs	r1, #45	; 0x2d
 80037f8:	4853      	ldr	r0, [pc, #332]	; (8003948 <LSM9DS1_ReadData+0x198>)
 80037fa:	f7ff ff5b 	bl	80036b4 <LSM9DS1_ReadReg>
 80037fe:	4603      	mov	r3, r0
 8003800:	737b      	strb	r3, [r7, #13]

	pLSM9DS1->m_raw_data.mx = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 8003802:	7a7b      	ldrb	r3, [r7, #9]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	b21a      	sxth	r2, r3
 8003808:	7a3b      	ldrb	r3, [r7, #8]
 800380a:	b21b      	sxth	r3, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	b21a      	sxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	801a      	strh	r2, [r3, #0]
	pLSM9DS1->m_raw_data.my = (int16_t) ((Mag_Data[3] << 8) | Mag_Data[2]);
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	b21a      	sxth	r2, r3
 800381a:	7abb      	ldrb	r3, [r7, #10]
 800381c:	b21b      	sxth	r3, r3
 800381e:	4313      	orrs	r3, r2
 8003820:	b21a      	sxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	805a      	strh	r2, [r3, #2]
	pLSM9DS1->m_raw_data.mz = (int16_t) ((Mag_Data[5] << 8) | Mag_Data[4]);
 8003826:	7b7b      	ldrb	r3, [r7, #13]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	b21a      	sxth	r2, r3
 800382c:	7b3b      	ldrb	r3, [r7, #12]
 800382e:	b21b      	sxth	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b21a      	sxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	809a      	strh	r2, [r3, #4]

	pLSM9DS1->m_sensor_data.mx = (float) (pLSM9DS1->m_raw_data.mx
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fa4c 	bl	8000cdc <__aeabi_i2f>
 8003844:	4603      	mov	r3, r0
 8003846:	4941      	ldr	r1, [pc, #260]	; (800394c <LSM9DS1_ReadData+0x19c>)
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fa9b 	bl	8000d84 <__aeabi_fmul>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]
			* LSM9DS1_SENSITIVITY);
	pLSM9DS1->m_sensor_data.my = (float) (pLSM9DS1->m_raw_data.my
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fa3d 	bl	8000cdc <__aeabi_i2f>
 8003862:	4603      	mov	r3, r0
 8003864:	4939      	ldr	r1, [pc, #228]	; (800394c <LSM9DS1_ReadData+0x19c>)
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fa8c 	bl	8000d84 <__aeabi_fmul>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]
			* LSM9DS1_SENSITIVITY);
	pLSM9DS1->m_sensor_data.mz = (float) (pLSM9DS1->m_raw_data.mz
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fa2e 	bl	8000cdc <__aeabi_i2f>
 8003880:	4603      	mov	r3, r0
 8003882:	4932      	ldr	r1, [pc, #200]	; (800394c <LSM9DS1_ReadData+0x19c>)
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fa7d 	bl	8000d84 <__aeabi_fmul>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]
			* LSM9DS1_SENSITIVITY);

	pLSM9DS1->m_sensor_data.total_mag = sqrt(
			pLSM9DS1->m_sensor_data.mx * pLSM9DS1->m_sensor_data.mx
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f7fd fa71 	bl	8000d84 <__aeabi_fmul>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461c      	mov	r4, r3
					+ pLSM9DS1->m_sensor_data.my * pLSM9DS1->m_sensor_data.my
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fd fa67 	bl	8000d84 <__aeabi_fmul>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4619      	mov	r1, r3
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7fd f95a 	bl	8000b74 <__addsf3>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461c      	mov	r4, r3
					+ pLSM9DS1->m_sensor_data.mz * pLSM9DS1->m_sensor_data.mz);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7fd fa58 	bl	8000d84 <__aeabi_fmul>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4619      	mov	r1, r3
 80038d8:	4620      	mov	r0, r4
 80038da:	f7fd f94b 	bl	8000b74 <__addsf3>
 80038de:	4603      	mov	r3, r0
	pLSM9DS1->m_sensor_data.total_mag = sqrt(
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fda1 	bl	8000428 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f00a fab7 	bl	800de60 <sqrt>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//myDebug("-----Without filter, Sensor Data of Magnetometer-----\r\n");
//	myDebug("MAG (uT)\r\n");
	myDebug("  mx = %.2f \t my = %.2f \t  mz = %.2f \t Total = %.2f uT\r\n",
			pLSM9DS1->m_sensor_data.mx, pLSM9DS1->m_sensor_data.my,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
	myDebug("  mx = %.2f \t my = %.2f \t  mz = %.2f \t Total = %.2f uT\r\n",
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fd91 	bl	8000428 <__aeabi_f2d>
 8003906:	4680      	mov	r8, r0
 8003908:	4689      	mov	r9, r1
			pLSM9DS1->m_sensor_data.mx, pLSM9DS1->m_sensor_data.my,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
	myDebug("  mx = %.2f \t my = %.2f \t  mz = %.2f \t Total = %.2f uT\r\n",
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fd8a 	bl	8000428 <__aeabi_f2d>
 8003914:	4604      	mov	r4, r0
 8003916:	460d      	mov	r5, r1
			pLSM9DS1->m_sensor_data.mz, pLSM9DS1->m_sensor_data.total_mag);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
	myDebug("  mx = %.2f \t my = %.2f \t  mz = %.2f \t Total = %.2f uT\r\n",
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fd83 	bl	8000428 <__aeabi_f2d>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800392c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003930:	e9cd 4500 	strd	r4, r5, [sp]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	4805      	ldr	r0, [pc, #20]	; (8003950 <LSM9DS1_ReadData+0x1a0>)
 800393a:	f7fd fc7d 	bl	8001238 <myDebug>
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003948:	20001034 	.word	0x20001034
 800394c:	3d6d9168 	.word	0x3d6d9168
 8003950:	0801097c 	.word	0x0801097c

08003954 <WAIT_FOR_HANDSHAKE>:
uint8_t OBC_CMD[CMD_LENGTH];

int opera_mode = 0;
extern int mode;

void WAIT_FOR_HANDSHAKE() {
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 800395a:	2207      	movs	r2, #7
 800395c:	2100      	movs	r1, #0
 800395e:	485b      	ldr	r0, [pc, #364]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003960:	f005 fc58 	bl	8009214 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 8003964:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart3, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK) {
 800396a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800396e:	2207      	movs	r2, #7
 8003970:	4956      	ldr	r1, [pc, #344]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003972:	4858      	ldr	r0, [pc, #352]	; (8003ad4 <WAIT_FOR_HANDSHAKE+0x180>)
 8003974:	f004 fe0d 	bl	8008592 <HAL_UART_Receive>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8094 	bne.w	8003aa8 <WAIT_FOR_HANDSHAKE+0x154>
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 8003980:	4855      	ldr	r0, [pc, #340]	; (8003ad8 <WAIT_FOR_HANDSHAKE+0x184>)
 8003982:	f7fd fc59 	bl	8001238 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e00a      	b.n	80039a2 <WAIT_FOR_HANDSHAKE+0x4e>
			myDebug("%02x ", MainCMDHs[i]);
 800398c:	4a4f      	ldr	r2, [pc, #316]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	4851      	ldr	r0, [pc, #324]	; (8003adc <WAIT_FOR_HANDSHAKE+0x188>)
 8003998:	f7fd fc4e 	bl	8001238 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3301      	adds	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	ddf1      	ble.n	800398c <WAIT_FOR_HANDSHAKE+0x38>
		}
		myDebug("\n");
 80039a8:	484d      	ldr	r0, [pc, #308]	; (8003ae0 <WAIT_FOR_HANDSHAKE+0x18c>)
 80039aa:	f7fd fc45 	bl	8001238 <myDebug>

		uint8_t header = 0x00;
 80039ae:	2300      	movs	r3, #0
 80039b0:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 80039b2:	4b46      	ldr	r3, [pc, #280]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	79fa      	ldrb	r2, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d111      	bne.n	80039e0 <WAIT_FOR_HANDSHAKE+0x8c>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e00b      	b.n	80039da <WAIT_FOR_HANDSHAKE+0x86>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a41      	ldr	r2, [pc, #260]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039c8:	5cd1      	ldrb	r1, [r2, r3]
 80039ca:	4a40      	ldr	r2, [pc, #256]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	460a      	mov	r2, r1
 80039d2:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3301      	adds	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d9f0      	bls.n	80039c2 <WAIT_FOR_HANDSHAKE+0x6e>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b53      	cmp	r3, #83	; 0x53
 80039e6:	d130      	bne.n	8003a4a <WAIT_FOR_HANDSHAKE+0xf6>
 80039e8:	4b38      	ldr	r3, [pc, #224]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039ea:	795b      	ldrb	r3, [r3, #5]
 80039ec:	2b7e      	cmp	r3, #126	; 0x7e
 80039ee:	d12c      	bne.n	8003a4a <WAIT_FOR_HANDSHAKE+0xf6>
			myDebug("--> Command Acknowledged successful!\n");
 80039f0:	483c      	ldr	r0, [pc, #240]	; (8003ae4 <WAIT_FOR_HANDSHAKE+0x190>)
 80039f2:	f7fd fc21 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 80039f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039fa:	2207      	movs	r2, #7
 80039fc:	4933      	ldr	r1, [pc, #204]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 80039fe:	4835      	ldr	r0, [pc, #212]	; (8003ad4 <WAIT_FOR_HANDSHAKE+0x180>)
 8003a00:	f004 fd3c 	bl	800847c <HAL_UART_Transmit>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d15c      	bne.n	8003ac4 <WAIT_FOR_HANDSHAKE+0x170>
					== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8003a0a:	4837      	ldr	r0, [pc, #220]	; (8003ae8 <WAIT_FOR_HANDSHAKE+0x194>)
 8003a0c:	f7fd fc14 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e00a      	b.n	8003a2c <WAIT_FOR_HANDSHAKE+0xd8>
					myDebug("%02x ", MainCMDHs[i]);
 8003a16:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	482e      	ldr	r0, [pc, #184]	; (8003adc <WAIT_FOR_HANDSHAKE+0x188>)
 8003a22:	f7fd fc09 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	ddf1      	ble.n	8003a16 <WAIT_FOR_HANDSHAKE+0xc2>
				}
				myDebug("\n");
 8003a32:	482b      	ldr	r0, [pc, #172]	; (8003ae0 <WAIT_FOR_HANDSHAKE+0x18c>)
 8003a34:	f7fd fc00 	bl	8001238 <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8003a3e:	2207      	movs	r2, #7
 8003a40:	2100      	movs	r1, #0
 8003a42:	4822      	ldr	r0, [pc, #136]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003a44:	f005 fbe6 	bl	8009214 <memset>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 8003a48:	e03c      	b.n	8003ac4 <WAIT_FOR_HANDSHAKE+0x170>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 8003a4a:	4828      	ldr	r0, [pc, #160]	; (8003aec <WAIT_FOR_HANDSHAKE+0x198>)
 8003a4c:	f7fd fbf4 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, MainCMDHs, ACK_LENGTH, 2000)
 8003a50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a54:	2207      	movs	r2, #7
 8003a56:	491d      	ldr	r1, [pc, #116]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003a58:	481e      	ldr	r0, [pc, #120]	; (8003ad4 <WAIT_FOR_HANDSHAKE+0x180>)
 8003a5a:	f004 fd0f 	bl	800847c <HAL_UART_Transmit>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12f      	bne.n	8003ac4 <WAIT_FOR_HANDSHAKE+0x170>
					== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8003a64:	4822      	ldr	r0, [pc, #136]	; (8003af0 <WAIT_FOR_HANDSHAKE+0x19c>)
 8003a66:	f7fd fbe7 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	e00a      	b.n	8003a86 <WAIT_FOR_HANDSHAKE+0x132>
					myDebug("%02x ", MainCMDHs[i]);
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4413      	add	r3, r2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4818      	ldr	r0, [pc, #96]	; (8003adc <WAIT_FOR_HANDSHAKE+0x188>)
 8003a7c:	f7fd fbdc 	bl	8001238 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3301      	adds	r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	ddf1      	ble.n	8003a70 <WAIT_FOR_HANDSHAKE+0x11c>
				}
				myDebug("\n");
 8003a8c:	4814      	ldr	r0, [pc, #80]	; (8003ae0 <WAIT_FOR_HANDSHAKE+0x18c>)
 8003a8e:	f7fd fbd3 	bl	8001238 <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8003a92:	2207      	movs	r2, #7
 8003a94:	2100      	movs	r1, #0
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003a98:	f005 fbbc 	bl	8009214 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 8003aa2:	f7ff ff57 	bl	8003954 <WAIT_FOR_HANDSHAKE>
		OBC_HANDSHAKE_FLAG = 0;
		myDebug("*** Handshake Command receive failed, try again!\n");
		memset(MainCMDHs, '\0', ACK_LENGTH);
		WAIT_FOR_HANDSHAKE();
	}
}
 8003aa6:	e00d      	b.n	8003ac4 <WAIT_FOR_HANDSHAKE+0x170>
		OBC_HANDSHAKE_FLAG = 0;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <WAIT_FOR_HANDSHAKE+0x17c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8003aae:	4811      	ldr	r0, [pc, #68]	; (8003af4 <WAIT_FOR_HANDSHAKE+0x1a0>)
 8003ab0:	f7fd fbc2 	bl	8001238 <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <WAIT_FOR_HANDSHAKE+0x178>)
 8003aba:	f005 fbab 	bl	8009214 <memset>
		WAIT_FOR_HANDSHAKE();
 8003abe:	f7ff ff49 	bl	8003954 <WAIT_FOR_HANDSHAKE>
}
 8003ac2:	e7ff      	b.n	8003ac4 <WAIT_FOR_HANDSHAKE+0x170>
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	200003d4 	.word	0x200003d4
 8003ad0:	20000f31 	.word	0x20000f31
 8003ad4:	200004e8 	.word	0x200004e8
 8003ad8:	080109b8 	.word	0x080109b8
 8003adc:	080109e8 	.word	0x080109e8
 8003ae0:	080109f0 	.word	0x080109f0
 8003ae4:	080109f4 	.word	0x080109f4
 8003ae8:	08010a1c 	.word	0x08010a1c
 8003aec:	08010a48 	.word	0x08010a48
 8003af0:	08010a74 	.word	0x08010a74
 8003af4:	08010aa4 	.word	0x08010aa4

08003af8 <GET_COMMAND_OBC>:

int GET_COMMAND_OBC() {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0

	memset(OBC_CMD, '\0', CMD_LENGTH);
 8003afe:	2207      	movs	r2, #7
 8003b00:	2100      	movs	r1, #0
 8003b02:	489e      	ldr	r0, [pc, #632]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b04:	f005 fb86 	bl	8009214 <memset>

	if (HAL_UART_Receive(&huart3, OBC_CMD, CMD_LENGTH, 7000) == HAL_OK) {
 8003b08:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	499b      	ldr	r1, [pc, #620]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b10:	489b      	ldr	r0, [pc, #620]	; (8003d80 <GET_COMMAND_OBC+0x288>)
 8003b12:	f004 fd3e 	bl	8008592 <HAL_UART_Receive>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 8116 	bne.w	8003d4a <GET_COMMAND_OBC+0x252>
		myDebug("--> CMD command received from OBC: 0x%x\r\n");
 8003b1e:	4899      	ldr	r0, [pc, #612]	; (8003d84 <GET_COMMAND_OBC+0x28c>)
 8003b20:	f7fd fb8a 	bl	8001238 <myDebug>
		for (int i = 0; i < (CMD_LENGTH); i++) {
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e00a      	b.n	8003b40 <GET_COMMAND_OBC+0x48>
			myDebug("%02x ", OBC_CMD[i]);
 8003b2a:	4a94      	ldr	r2, [pc, #592]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4894      	ldr	r0, [pc, #592]	; (8003d88 <GET_COMMAND_OBC+0x290>)
 8003b36:	f7fd fb7f 	bl	8001238 <myDebug>
		for (int i = 0; i < (CMD_LENGTH); i++) {
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	ddf1      	ble.n	8003b2a <GET_COMMAND_OBC+0x32>
		}
		myDebug("\n");
 8003b46:	4891      	ldr	r0, [pc, #580]	; (8003d8c <GET_COMMAND_OBC+0x294>)
 8003b48:	f7fd fb76 	bl	8001238 <myDebug>

		uint8_t header = 0x00;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	71fb      	strb	r3, [r7, #7]

		if (OBC_CMD[0] == header) {
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	79fa      	ldrb	r2, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d111      	bne.n	8003b7e <GET_COMMAND_OBC+0x86>

			for (int loop1 = 0; loop1 < sizeof(OBC_CMD); loop1++) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e00b      	b.n	8003b78 <GET_COMMAND_OBC+0x80>
				OBC_CMD[loop1] = OBC_CMD[loop1 + 1];
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	3301      	adds	r3, #1
 8003b64:	4a85      	ldr	r2, [pc, #532]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b66:	5cd1      	ldrb	r1, [r2, r3]
 8003b68:	4a84      	ldr	r2, [pc, #528]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	460a      	mov	r2, r1
 8003b70:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(OBC_CMD); loop1++) {
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d9f0      	bls.n	8003b60 <GET_COMMAND_OBC+0x68>
			}
		}

		if (OBC_CMD[0] == ACK_HEAD && OBC_CMD[5] == ACK_TAIL) {
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b53      	cmp	r3, #83	; 0x53
 8003b84:	f040 80af 	bne.w	8003ce6 <GET_COMMAND_OBC+0x1ee>
 8003b88:	4b7c      	ldr	r3, [pc, #496]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	2b7e      	cmp	r3, #126	; 0x7e
 8003b8e:	f040 80aa 	bne.w	8003ce6 <GET_COMMAND_OBC+0x1ee>

			if (OBC_CMD[1] == ADCS_HEAD_1 && OBC_CMD[2] == ADCS_HEAD_2
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b0a      	cmp	r3, #10
 8003b98:	f040 80e8 	bne.w	8003d6c <GET_COMMAND_OBC+0x274>
 8003b9c:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003b9e:	789b      	ldrb	r3, [r3, #2]
 8003ba0:	2b0d      	cmp	r3, #13
 8003ba2:	f040 80e3 	bne.w	8003d6c <GET_COMMAND_OBC+0x274>
					&& OBC_CMD[3] == ADCS_HEAD_3) {
 8003ba6:	4b75      	ldr	r3, [pc, #468]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003ba8:	78db      	ldrb	r3, [r3, #3]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	f040 80de 	bne.w	8003d6c <GET_COMMAND_OBC+0x274>

				myDebug("--> Command Acknowledged successful!\n");
 8003bb0:	4877      	ldr	r0, [pc, #476]	; (8003d90 <GET_COMMAND_OBC+0x298>)
 8003bb2:	f7fd fb41 	bl	8001238 <myDebug>
				switch (OBC_CMD[4]) {
 8003bb6:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d002      	beq.n	8003bc4 <GET_COMMAND_OBC+0xcc>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d02f      	beq.n	8003c22 <GET_COMMAND_OBC+0x12a>
 8003bc2:	e05d      	b.n	8003c80 <GET_COMMAND_OBC+0x188>

				case ADCS_MODE_1:

					opera_mode = 1;
 8003bc4:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

					mode = 1;
 8003bca:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <GET_COMMAND_OBC+0x2a0>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

					if (HAL_UART_Transmit(&huart3, OBC_CMD, CMD_LENGTH, 2000)
 8003bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	4969      	ldr	r1, [pc, #420]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003bd8:	4869      	ldr	r0, [pc, #420]	; (8003d80 <GET_COMMAND_OBC+0x288>)
 8003bda:	f004 fc4f 	bl	800847c <HAL_UART_Transmit>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17c      	bne.n	8003cde <GET_COMMAND_OBC+0x1e6>
							== HAL_OK) {
						myDebug("--> ADCS_MODE 1 Executing: \n");
 8003be4:	486d      	ldr	r0, [pc, #436]	; (8003d9c <GET_COMMAND_OBC+0x2a4>)
 8003be6:	f7fd fb27 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e00a      	b.n	8003c06 <GET_COMMAND_OBC+0x10e>
							myDebug("%02x ", OBC_CMD[i]);
 8003bf0:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4863      	ldr	r0, [pc, #396]	; (8003d88 <GET_COMMAND_OBC+0x290>)
 8003bfc:	f7fd fb1c 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b06      	cmp	r3, #6
 8003c0a:	ddf1      	ble.n	8003bf0 <GET_COMMAND_OBC+0xf8>
						}
						myDebug("\n");
 8003c0c:	485f      	ldr	r0, [pc, #380]	; (8003d8c <GET_COMMAND_OBC+0x294>)
 8003c0e:	f7fd fb13 	bl	8001238 <myDebug>
						memset(OBC_CMD, '\0', CMD_LENGTH);
 8003c12:	2207      	movs	r2, #7
 8003c14:	2100      	movs	r1, #0
 8003c16:	4859      	ldr	r0, [pc, #356]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003c18:	f005 fafc 	bl	8009214 <memset>

						return opera_mode;
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	e0a7      	b.n	8003d72 <GET_COMMAND_OBC+0x27a>
					}

					break;

				case ADCS_MODE_2:
					opera_mode = 2;
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003c24:	2202      	movs	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]

					mode = 2;
 8003c28:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <GET_COMMAND_OBC+0x2a0>)
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	601a      	str	r2, [r3, #0]

					if (HAL_UART_Transmit(&huart3, OBC_CMD, CMD_LENGTH, 2000)
 8003c2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c32:	2207      	movs	r2, #7
 8003c34:	4951      	ldr	r1, [pc, #324]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003c36:	4852      	ldr	r0, [pc, #328]	; (8003d80 <GET_COMMAND_OBC+0x288>)
 8003c38:	f004 fc20 	bl	800847c <HAL_UART_Transmit>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d14f      	bne.n	8003ce2 <GET_COMMAND_OBC+0x1ea>
							== HAL_OK) {
						myDebug("--> ADCS_MODE 2 Executing: \n");
 8003c42:	4857      	ldr	r0, [pc, #348]	; (8003da0 <GET_COMMAND_OBC+0x2a8>)
 8003c44:	f7fd faf8 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e00a      	b.n	8003c64 <GET_COMMAND_OBC+0x16c>
							myDebug("%02x ", OBC_CMD[i]);
 8003c4e:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	484b      	ldr	r0, [pc, #300]	; (8003d88 <GET_COMMAND_OBC+0x290>)
 8003c5a:	f7fd faed 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	ddf1      	ble.n	8003c4e <GET_COMMAND_OBC+0x156>
						}
						myDebug("\n");
 8003c6a:	4848      	ldr	r0, [pc, #288]	; (8003d8c <GET_COMMAND_OBC+0x294>)
 8003c6c:	f7fd fae4 	bl	8001238 <myDebug>
						memset(OBC_CMD, '\0', CMD_LENGTH);
 8003c70:	2207      	movs	r2, #7
 8003c72:	2100      	movs	r1, #0
 8003c74:	4841      	ldr	r0, [pc, #260]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003c76:	f005 facd 	bl	8009214 <memset>

						return opera_mode;
 8003c7a:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e078      	b.n	8003d72 <GET_COMMAND_OBC+0x27a>
					}
					break;
				default:
					opera_mode = 1;
 8003c80:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
					mode = 1;
 8003c86:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <GET_COMMAND_OBC+0x2a0>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
					if (HAL_UART_Transmit(&huart3, OBC_CMD, CMD_LENGTH, 2000)
 8003c8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c90:	2207      	movs	r2, #7
 8003c92:	493a      	ldr	r1, [pc, #232]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003c94:	483a      	ldr	r0, [pc, #232]	; (8003d80 <GET_COMMAND_OBC+0x288>)
 8003c96:	f004 fbf1 	bl	800847c <HAL_UART_Transmit>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d165      	bne.n	8003d6c <GET_COMMAND_OBC+0x274>
							== HAL_OK) {
						myDebug("--> ADCS_MODE 1 Executing: \n");
 8003ca0:	483e      	ldr	r0, [pc, #248]	; (8003d9c <GET_COMMAND_OBC+0x2a4>)
 8003ca2:	f7fd fac9 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e00a      	b.n	8003cc2 <GET_COMMAND_OBC+0x1ca>
							myDebug("%02x ", OBC_CMD[i]);
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4834      	ldr	r0, [pc, #208]	; (8003d88 <GET_COMMAND_OBC+0x290>)
 8003cb8:	f7fd fabe 	bl	8001238 <myDebug>
						for (int i = 0; i < (CMD_LENGTH); i++) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	ddf1      	ble.n	8003cac <GET_COMMAND_OBC+0x1b4>
						}
						myDebug("\n");
 8003cc8:	4830      	ldr	r0, [pc, #192]	; (8003d8c <GET_COMMAND_OBC+0x294>)
 8003cca:	f7fd fab5 	bl	8001238 <myDebug>
						memset(OBC_CMD, '\0', CMD_LENGTH);
 8003cce:	2207      	movs	r2, #7
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	482a      	ldr	r0, [pc, #168]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003cd4:	f005 fa9e 	bl	8009214 <memset>

						return opera_mode;
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e049      	b.n	8003d72 <GET_COMMAND_OBC+0x27a>
					break;
 8003cde:	bf00      	nop
 8003ce0:	e044      	b.n	8003d6c <GET_COMMAND_OBC+0x274>
					break;
 8003ce2:	bf00      	nop
			if (OBC_CMD[1] == ADCS_HEAD_1 && OBC_CMD[2] == ADCS_HEAD_2
 8003ce4:	e042      	b.n	8003d6c <GET_COMMAND_OBC+0x274>
					}

				}
			}
		} else {
			myDebug("*** Unknown CMD command received!\n");
 8003ce6:	482f      	ldr	r0, [pc, #188]	; (8003da4 <GET_COMMAND_OBC+0x2ac>)
 8003ce8:	f7fd faa6 	bl	8001238 <myDebug>
			if (HAL_UART_Transmit(&huart3, OBC_CMD, CMD_LENGTH, 2000)
 8003cec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	4922      	ldr	r1, [pc, #136]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003cf4:	4822      	ldr	r0, [pc, #136]	; (8003d80 <GET_COMMAND_OBC+0x288>)
 8003cf6:	f004 fbc1 	bl	800847c <HAL_UART_Transmit>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d136      	bne.n	8003d6e <GET_COMMAND_OBC+0x276>
					== HAL_OK) {
				myDebug("--> Unknown CMD, re-transmit to OBC.\n");
 8003d00:	4829      	ldr	r0, [pc, #164]	; (8003da8 <GET_COMMAND_OBC+0x2b0>)
 8003d02:	f7fd fa99 	bl	8001238 <myDebug>
				for (int i = 0; i < (CMD_LENGTH); i++) {
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	e00a      	b.n	8003d22 <GET_COMMAND_OBC+0x22a>
					myDebug("%02x ", OBC_CMD[i]);
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4413      	add	r3, r2
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	481c      	ldr	r0, [pc, #112]	; (8003d88 <GET_COMMAND_OBC+0x290>)
 8003d18:	f7fd fa8e 	bl	8001238 <myDebug>
				for (int i = 0; i < (CMD_LENGTH); i++) {
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	ddf1      	ble.n	8003d0c <GET_COMMAND_OBC+0x214>
				}
				myDebug("\n");
 8003d28:	4818      	ldr	r0, [pc, #96]	; (8003d8c <GET_COMMAND_OBC+0x294>)
 8003d2a:	f7fd fa85 	bl	8001238 <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8003d2e:	2207      	movs	r2, #7
 8003d30:	2100      	movs	r1, #0
 8003d32:	481e      	ldr	r0, [pc, #120]	; (8003dac <GET_COMMAND_OBC+0x2b4>)
 8003d34:	f005 fa6e 	bl	8009214 <memset>
				opera_mode = 0;
 8003d38:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
				mode = 0;
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <GET_COMMAND_OBC+0x2a0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
				GET_COMMAND_OBC();
 8003d44:	f7ff fed8 	bl	8003af8 <GET_COMMAND_OBC>
 8003d48:	e011      	b.n	8003d6e <GET_COMMAND_OBC+0x276>
			}
		}
	} else {
		myDebug("*** CMD Command receive failed, try again!\n");
 8003d4a:	4819      	ldr	r0, [pc, #100]	; (8003db0 <GET_COMMAND_OBC+0x2b8>)
 8003d4c:	f7fd fa74 	bl	8001238 <myDebug>
		memset(OBC_CMD, '\0', CMD_LENGTH);
 8003d50:	2207      	movs	r2, #7
 8003d52:	2100      	movs	r1, #0
 8003d54:	4809      	ldr	r0, [pc, #36]	; (8003d7c <GET_COMMAND_OBC+0x284>)
 8003d56:	f005 fa5d 	bl	8009214 <memset>
		opera_mode = 0;
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
		mode = 0;
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <GET_COMMAND_OBC+0x2a0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
		GET_COMMAND_OBC();
 8003d66:	f7ff fec7 	bl	8003af8 <GET_COMMAND_OBC>
 8003d6a:	e000      	b.n	8003d6e <GET_COMMAND_OBC+0x276>
			if (OBC_CMD[1] == ADCS_HEAD_1 && OBC_CMD[2] == ADCS_HEAD_2
 8003d6c:	bf00      	nop
	}

	return opera_mode;
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <GET_COMMAND_OBC+0x29c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200003cc 	.word	0x200003cc
 8003d80:	200004e8 	.word	0x200004e8
 8003d84:	08010ad8 	.word	0x08010ad8
 8003d88:	080109e8 	.word	0x080109e8
 8003d8c:	080109f0 	.word	0x080109f0
 8003d90:	080109f4 	.word	0x080109f4
 8003d94:	20000268 	.word	0x20000268
 8003d98:	20000278 	.word	0x20000278
 8003d9c:	08010b04 	.word	0x08010b04
 8003da0:	08010b24 	.word	0x08010b24
 8003da4:	08010b44 	.word	0x08010b44
 8003da8:	08010b68 	.word	0x08010b68
 8003dac:	200003d4 	.word	0x200003d4
 8003db0:	08010b90 	.word	0x08010b90

08003db4 <RCFilter_Init>:
 *      Author: Dell
 */

#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (2.0f * 3.1416f * cutoffFreqHz);
 8003dc0:	4918      	ldr	r1, [pc, #96]	; (8003e24 <RCFilter_Init+0x70>)
 8003dc2:	68b8      	ldr	r0, [r7, #8]
 8003dc4:	f7fc ffde 	bl	8000d84 <__aeabi_fmul>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003dd0:	f7fd f88c 	bl	8000eec <__aeabi_fdiv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	617b      	str	r3, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8003dd8:	6979      	ldr	r1, [r7, #20]
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc feca 	bl	8000b74 <__addsf3>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fd f881 	bl	8000eec <__aeabi_fdiv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fc febd 	bl	8000b74 <__addsf3>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7fd f874 	bl	8000eec <__aeabi_fdiv>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	60da      	str	r2, [r3, #12]

}
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40c90ff9 	.word	0x40c90ff9

08003e28 <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc ff9f 	bl	8000d84 <__aeabi_fmul>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461c      	mov	r4, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fc ff95 	bl	8000d84 <__aeabi_fmul>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7fc fe88 	bl	8000b74 <__addsf3>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	609a      	str	r2, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd90      	pop	{r4, r7, pc}

08003e78 <Attitude_genEstimate>:

extern sat_attitude attitude_sat;
extern sat_att_combined combined_sat_att;
extern imu_filter imu_filter_data;

void Attitude_genEstimate(imu_filter *filt, sat_attitude *att) {
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	float phiHat_deg_ = 0.0f;
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
	float thetaHat_deg_ = 0.0f;
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	phiHat_deg_ = atanf(filt->ay_mps2 / (filt->az_mps2 + epsilon)) * RAD2DEG;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685c      	ldr	r4, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	499c      	ldr	r1, [pc, #624]	; (8004108 <Attitude_genEstimate+0x290>)
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc fe6b 	bl	8000b74 <__addsf3>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7fd f822 	bl	8000eec <__aeabi_fdiv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f009 fe3a 	bl	800db24 <atanf>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc fab8 	bl	8000428 <__aeabi_f2d>
 8003eb8:	a38f      	add	r3, pc, #572	; (adr r3, 80040f8 <Attitude_genEstimate+0x280>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc fb0b 	bl	80004d8 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f7fc fdfd 	bl	8000ac8 <__aeabi_d2f>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2) * RAD2DEG;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	498d      	ldr	r1, [pc, #564]	; (800410c <Attitude_genEstimate+0x294>)
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fd f807 	bl	8000eec <__aeabi_fdiv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f009 ffe9 	bl	800deb8 <asinf>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc fa9d 	bl	8000428 <__aeabi_f2d>
 8003eee:	a382      	add	r3, pc, #520	; (adr r3, 80040f8 <Attitude_genEstimate+0x280>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc faf0 	bl	80004d8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fde2 	bl	8000ac8 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	613b      	str	r3, [r7, #16]
//	thetaHat_deg_ = asinf(filt->ax_mps2 / G_MPS2);

//	myDebug("Accel phiHat_deg : %.2f\n", (double) phiHat_deg_);
//	myDebug("Accel thetahat_deg : %.2f\n", (double) thetaHat_deg_);

	att->accel_phiHat = phiHat_deg_;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	601a      	str	r2, [r3, #0]
	att->accel_thetaHat = thetaHat_deg_;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	605a      	str	r2, [r3, #4]

	phiHat_deg_ = 0.0f;    //just try need to be actually on code
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = 0.0f;
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]

//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope reading
	float phiDot_rps = filt->p_rps
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_deg_ * DEG2RAD)
 8003f24:	6938      	ldr	r0, [r7, #16]
 8003f26:	f7fc fa7f 	bl	8000428 <__aeabi_f2d>
 8003f2a:	a375      	add	r3, pc, #468	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f7fc fad2 	bl	80004d8 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fc fdc4 	bl	8000ac8 <__aeabi_d2f>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f009 ff68 	bl	800de18 <tanf>
 8003f48:	4605      	mov	r5, r0
					* (sinf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7fc fa6c 	bl	8000428 <__aeabi_f2d>
 8003f50:	a36b      	add	r3, pc, #428	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc fabf 	bl	80004d8 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc fdb1 	bl	8000ac8 <__aeabi_d2f>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f009 ff1f 	bl	800ddac <sinf>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7fc ff04 	bl	8000d84 <__aeabi_fmul>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461e      	mov	r6, r3
							+ cosf(phiHat_deg_ * DEG2RAD) * filt->r_rps);
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f7fc fa51 	bl	8000428 <__aeabi_f2d>
 8003f86:	a35e      	add	r3, pc, #376	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f7fc faa4 	bl	80004d8 <__aeabi_dmul>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	f7fc fd96 	bl	8000ac8 <__aeabi_d2f>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f009 fecc 	bl	800dd3c <cosf>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fc fee9 	bl	8000d84 <__aeabi_fmul>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f7fc fddc 	bl	8000b74 <__addsf3>
 8003fbc:	4603      	mov	r3, r0
					* (sinf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7fc fedf 	bl	8000d84 <__aeabi_fmul>
 8003fc6:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7fc fdd2 	bl	8000b74 <__addsf3>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 8003fd4:	6978      	ldr	r0, [r7, #20]
 8003fd6:	f7fc fa27 	bl	8000428 <__aeabi_f2d>
 8003fda:	a349      	add	r3, pc, #292	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fa7a 	bl	80004d8 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7fc fd6c 	bl	8000ac8 <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f009 fea2 	bl	800dd3c <cosf>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fc febf 	bl	8000d84 <__aeabi_fmul>
 8004006:	4603      	mov	r3, r0
 8004008:	461c      	mov	r4, r3
			- sinf(phiHat_deg_ * DEG2RAD) * filt->r_rps;
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7fc fa0c 	bl	8000428 <__aeabi_f2d>
 8004010:	a33b      	add	r3, pc, #236	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	f7fc fa5f 	bl	80004d8 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fd51 	bl	8000ac8 <__aeabi_d2f>
 8004026:	4603      	mov	r3, r0
 8004028:	4618      	mov	r0, r3
 800402a:	f009 febf 	bl	800ddac <sinf>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7fc fea4 	bl	8000d84 <__aeabi_fmul>
 800403c:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_deg_ * DEG2RAD) * filt->q_rps
 800403e:	4619      	mov	r1, r3
 8004040:	4620      	mov	r0, r4
 8004042:	f7fc fd95 	bl	8000b70 <__aeabi_fsub>
 8004046:	4603      	mov	r3, r0
 8004048:	60bb      	str	r3, [r7, #8]

	//Integrate Euler rates to get estimate of roll and pitch angles
	phiHat_deg_ = (phiHat_deg_ * DEG2RAD
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7fc f9ec 	bl	8000428 <__aeabi_f2d>
 8004050:	a32b      	add	r3, pc, #172	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc fa3f 	bl	80004d8 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4614      	mov	r4, r2
 8004060:	461d      	mov	r5, r3
			+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps) * RAD2DEG;
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7fc f9e0 	bl	8000428 <__aeabi_f2d>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4620      	mov	r0, r4
 800406e:	4629      	mov	r1, r5
 8004070:	f7fc f87c 	bl	800016c <__adddf3>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	a31e      	add	r3, pc, #120	; (adr r3, 80040f8 <Attitude_genEstimate+0x280>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f7fc fa29 	bl	80004d8 <__aeabi_dmul>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
	phiHat_deg_ = (phiHat_deg_ * DEG2RAD
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	f7fc fd1b 	bl	8000ac8 <__aeabi_d2f>
 8004092:	4603      	mov	r3, r0
 8004094:	617b      	str	r3, [r7, #20]
	thetaHat_deg_ = (thetaHat_deg_ * DEG2RAD
 8004096:	6938      	ldr	r0, [r7, #16]
 8004098:	f7fc f9c6 	bl	8000428 <__aeabi_f2d>
 800409c:	a318      	add	r3, pc, #96	; (adr r3, 8004100 <Attitude_genEstimate+0x288>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc fa19 	bl	80004d8 <__aeabi_dmul>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	461d      	mov	r5, r3
			+ (SAMPLE_TIME_MS_USB_ / 1000.0F) * thetaDot_rps) * RAD2DEG;
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7fc f9ba 	bl	8000428 <__aeabi_f2d>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f7fc f856 	bl	800016c <__adddf3>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	a30b      	add	r3, pc, #44	; (adr r3, 80040f8 <Attitude_genEstimate+0x280>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc fa03 	bl	80004d8 <__aeabi_dmul>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
	thetaHat_deg_ = (thetaHat_deg_ * DEG2RAD
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f7fc fcf5 	bl	8000ac8 <__aeabi_d2f>
 80040de:	4603      	mov	r3, r0
 80040e0:	613b      	str	r3, [r7, #16]

//	myDebug("Gyro phiHat_deg: %.2f\n", (double) phiHat_deg_);
//	myDebug("Gyro thetaHat_deg: %.2f\n", (double) thetaHat_deg_);

	att->gyro_phiHat = phiHat_deg_;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
	att->gyro_thetaHat = thetaHat_deg_;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	60da      	str	r2, [r3, #12]
	return;
 80040ee:	bf00      	nop
}
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	1a63cbb0 	.word	0x1a63cbb0
 80040fc:	404ca5dc 	.word	0x404ca5dc
 8004100:	a226e211 	.word	0xa226e211
 8004104:	3f91df46 	.word	0x3f91df46
 8004108:	358637bd 	.word	0x358637bd
 800410c:	411cf5c3 	.word	0x411cf5c3

08004110 <Attitude_compleEstimate>:

void Attitude_compleEstimate(imu_filter *filt, sat_att_combined *att) {
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

//	float thetaHat_rad_comb = 0.0f;
//	float phiHat_rad_comb = 0.0f;

	float thetaHat_rad_comb = att->pitch;   //use just to try
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61fb      	str	r3, [r7, #28]
	float phiHat_rad_comb = att->roll;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	61bb      	str	r3, [r7, #24]

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	float phiHat_acc_rad = atanf(filt->ay_mps2 / (filt->az_mps2 + epsilon));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685c      	ldr	r4, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4956      	ldr	r1, [pc, #344]	; (8004288 <Attitude_compleEstimate+0x178>)
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fd1f 	bl	8000b74 <__addsf3>
 8004136:	4603      	mov	r3, r0
 8004138:	4619      	mov	r1, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f7fc fed6 	bl	8000eec <__aeabi_fdiv>
 8004140:	4603      	mov	r3, r0
 8004142:	4618      	mov	r0, r3
 8004144:	f009 fcee 	bl	800db24 <atanf>
 8004148:	6178      	str	r0, [r7, #20]
	float thetaHat_acc_rad = asinf(filt->ax_mps2 / G_MPS2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	494f      	ldr	r1, [pc, #316]	; (800428c <Attitude_compleEstimate+0x17c>)
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fecb 	bl	8000eec <__aeabi_fdiv>
 8004156:	4603      	mov	r3, r0
 8004158:	4618      	mov	r0, r3
 800415a:	f009 fead 	bl	800deb8 <asinf>
 800415e:	6138      	str	r0, [r7, #16]

//	myDebug("accel phiHat_rad : %.2f\n", (double) phiHat_acc_rad);
//	myDebug("accel thetaHat_rad : %.2f\n", (double) thetaHat_acc_rad);

//Transform body rates to Euler rates to get estimate of roll and pitch angles using filtered gyroscope readings
	float phiDot_rps = filt->p_rps
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68dc      	ldr	r4, [r3, #12]
			+ tanf(thetaHat_rad_comb)
 8004164:	69f8      	ldr	r0, [r7, #28]
 8004166:	f009 fe57 	bl	800de18 <tanf>
 800416a:	4605      	mov	r5, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 800416c:	69b8      	ldr	r0, [r7, #24]
 800416e:	f009 fe1d 	bl	800ddac <sinf>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fc fe02 	bl	8000d84 <__aeabi_fmul>
 8004180:	4603      	mov	r3, r0
 8004182:	461e      	mov	r6, r3
							+ cosf(phiHat_rad_comb) * filt->r_rps);
 8004184:	69b8      	ldr	r0, [r7, #24]
 8004186:	f009 fdd9 	bl	800dd3c <cosf>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fc fdf6 	bl	8000d84 <__aeabi_fmul>
 8004198:	4603      	mov	r3, r0
 800419a:	4619      	mov	r1, r3
 800419c:	4630      	mov	r0, r6
 800419e:	f7fc fce9 	bl	8000b74 <__addsf3>
 80041a2:	4603      	mov	r3, r0
					* (sinf(phiHat_rad_comb) * filt->q_rps
 80041a4:	4619      	mov	r1, r3
 80041a6:	4628      	mov	r0, r5
 80041a8:	f7fc fdec 	bl	8000d84 <__aeabi_fmul>
 80041ac:	4603      	mov	r3, r0
	float phiDot_rps = filt->p_rps
 80041ae:	4619      	mov	r1, r3
 80041b0:	4620      	mov	r0, r4
 80041b2:	f7fc fcdf 	bl	8000b74 <__addsf3>
 80041b6:	4603      	mov	r3, r0
 80041b8:	60fb      	str	r3, [r7, #12]
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f009 fdbe 	bl	800dd3c <cosf>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7fc fddb 	bl	8000d84 <__aeabi_fmul>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461c      	mov	r4, r3
			- sinf(phiHat_rad_comb) * filt->r_rps;
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f009 fdea 	bl	800ddac <sinf>
 80041d8:	4602      	mov	r2, r0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fc fdcf 	bl	8000d84 <__aeabi_fmul>
 80041e6:	4603      	mov	r3, r0
	float thetaDot_rps = cosf(phiHat_rad_comb) * filt->q_rps
 80041e8:	4619      	mov	r1, r3
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7fc fcc0 	bl	8000b70 <__aeabi_fsub>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60bb      	str	r3, [r7, #8]

//	myDebug("Gryo phidot_rps : %.2f\n", (double) phiDot_rps);
//	myDebug("Gyro thetadot_rps : %.2f\n", (double) thetaDot_rps);

//Combining Accel and Gyro data for complementary filter
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 80041f4:	4926      	ldr	r1, [pc, #152]	; (8004290 <Attitude_compleEstimate+0x180>)
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7fc fdc4 	bl	8000d84 <__aeabi_fmul>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (phiHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps));
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	69b8      	ldr	r0, [r7, #24]
 8004204:	f7fc fcb6 	bl	8000b74 <__addsf3>
 8004208:	4603      	mov	r3, r0
					* (phiHat_rad_comb
 800420a:	4922      	ldr	r1, [pc, #136]	; (8004294 <Attitude_compleEstimate+0x184>)
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc fdb9 	bl	8000d84 <__aeabi_fmul>
 8004212:	4603      	mov	r3, r0
	phiHat_rad_comb = (COMP_FILT_ALPHA * phiHat_acc_rad
 8004214:	4619      	mov	r1, r3
 8004216:	4620      	mov	r0, r4
 8004218:	f7fc fcac 	bl	8000b74 <__addsf3>
 800421c:	4603      	mov	r3, r0
 800421e:	61bb      	str	r3, [r7, #24]
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8004220:	491b      	ldr	r1, [pc, #108]	; (8004290 <Attitude_compleEstimate+0x180>)
 8004222:	6938      	ldr	r0, [r7, #16]
 8004224:	f7fc fdae 	bl	8000d84 <__aeabi_fmul>
 8004228:	4603      	mov	r3, r0
 800422a:	461c      	mov	r4, r3
			+ (1.0f - COMP_FILT_ALPHA)
					* (thetaHat_rad_comb
							+ (SAMPLE_TIME_MS_USB_ / 1000.0f) * thetaDot_rps));
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	69f8      	ldr	r0, [r7, #28]
 8004230:	f7fc fca0 	bl	8000b74 <__addsf3>
 8004234:	4603      	mov	r3, r0
					* (thetaHat_rad_comb
 8004236:	4917      	ldr	r1, [pc, #92]	; (8004294 <Attitude_compleEstimate+0x184>)
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc fda3 	bl	8000d84 <__aeabi_fmul>
 800423e:	4603      	mov	r3, r0
	thetaHat_rad_comb = (COMP_FILT_ALPHA * thetaHat_acc_rad
 8004240:	4619      	mov	r1, r3
 8004242:	4620      	mov	r0, r4
 8004244:	f7fc fc96 	bl	8000b74 <__addsf3>
 8004248:	4603      	mov	r3, r0
 800424a:	61fb      	str	r3, [r7, #28]
//	att->pitch = RAD2DEG * thetaHat_rad_comb;
//	att->roll = RAD2DEG * phiHat_rad_comb;

	att->pitch = thetaHat_rad_comb;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	605a      	str	r2, [r3, #4]
	att->roll = phiHat_rad_comb;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	601a      	str	r2, [r3, #0]
	myDebug("\nComplementary filter roll: %.2f rad\n", (double) att->roll);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc f8e3 	bl	8000428 <__aeabi_f2d>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	480c      	ldr	r0, [pc, #48]	; (8004298 <Attitude_compleEstimate+0x188>)
 8004268:	f7fc ffe6 	bl	8001238 <myDebug>
	myDebug("Complementary filter pitch: %.2f rad\n", (double) att->pitch);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc f8d9 	bl	8000428 <__aeabi_f2d>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4808      	ldr	r0, [pc, #32]	; (800429c <Attitude_compleEstimate+0x18c>)
 800427c:	f7fc ffdc 	bl	8001238 <myDebug>

}
 8004280:	bf00      	nop
 8004282:	3724      	adds	r7, #36	; 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004288:	358637bd 	.word	0x358637bd
 800428c:	411cf5c3 	.word	0x411cf5c3
 8004290:	3d4ccccd 	.word	0x3d4ccccd
 8004294:	3f733333 	.word	0x3f733333
 8004298:	08010bbc 	.word	0x08010bbc
 800429c:	08010be4 	.word	0x08010be4

080042a0 <Attitude_ekfEstimate>:

void Attitude_ekfEstimate(imu_filter *filt, sat_att_combined *att) {
 80042a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042a4:	b0a2      	sub	sp, #136	; 0x88
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]

	float KALMAN_P_INIT = 0.1f;
 80042ac:	4bbe      	ldr	r3, [pc, #760]	; (80045a8 <Attitude_ekfEstimate+0x308>)
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	float KALMAN_Q = 0.001f;
 80042b0:	4bbe      	ldr	r3, [pc, #760]	; (80045ac <Attitude_ekfEstimate+0x30c>)
 80042b2:	67bb      	str	r3, [r7, #120]	; 0x78
	float KALMAN_R = 0.011f;
 80042b4:	4bbe      	ldr	r3, [pc, #760]	; (80045b0 <Attitude_ekfEstimate+0x310>)
 80042b6:	677b      	str	r3, [r7, #116]	; 0x74
	float KalmanQ[2] = { KALMAN_Q, KALMAN_Q };
 80042b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
	float KalmanR[3] = { KALMAN_R, KALMAN_R, KALMAN_R };
 80042c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40
 80042c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c6:	647b      	str	r3, [r7, #68]	; 0x44
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
	float Kalman_P_Init[2] = { KALMAN_P_INIT, KALMAN_P_INIT };
 80042cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	Eekf ekf_1;

	//Filtered accelerometer measurement
	float ax_mps2 = 0.0f;
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	673b      	str	r3, [r7, #112]	; 0x70
	float ay_mps2 = 0.0f;
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	66fb      	str	r3, [r7, #108]	; 0x6c
	float az_mps2 = 0.0f;
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	66bb      	str	r3, [r7, #104]	; 0x68
	//Filtered gyroscope measurement
	float p_rps = 0.0f;
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	667b      	str	r3, [r7, #100]	; 0x64
	float q_rps = 0.0f;
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	663b      	str	r3, [r7, #96]	; 0x60
	float r_rps = 0.0f;
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	65fb      	str	r3, [r7, #92]	; 0x5c

	//Remapping axis data of Accel and Gyro
	ax_mps2 = (filt->ax_mps2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	673b      	str	r3, [r7, #112]	; 0x70
	ay_mps2 = filt->ay_mps2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	66fb      	str	r3, [r7, #108]	; 0x6c
	az_mps2 = (filt->az_mps2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	66bb      	str	r3, [r7, #104]	; 0x68
	p_rps = (filt->p_rps);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	667b      	str	r3, [r7, #100]	; 0x64
	q_rps = filt->q_rps;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	663b      	str	r3, [r7, #96]	; 0x60
	r_rps = (filt->r_rps);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	65fb      	str	r3, [r7, #92]	; 0x5c

	//Initialize kalman filter
	EKF_Init(&ekf_1, Kalman_P_Init, KalmanQ, KalmanR);
 800431c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004320:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004324:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004328:	f107 000c 	add.w	r0, r7, #12
 800432c:	f7fd fab2 	bl	8001894 <EKF_Init>
	//Prediction step using filtered gyro data
	EKF_Predict(&ekf_1, p_rps, q_rps, r_rps, 0.001f * KALMAN_PREDICT_PERIOD_MS);
 8004330:	f107 000c 	add.w	r0, r7, #12
 8004334:	4b9f      	ldr	r3, [pc, #636]	; (80045b4 <Attitude_ekfEstimate+0x314>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800433c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800433e:	f7fd fae1 	bl	8001904 <EKF_Predict>

	//Update step using Accel data
	EKF_Update(&ekf_1, ax_mps2, ay_mps2, az_mps2);
 8004342:	f107 000c 	add.w	r0, r7, #12
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004348:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800434a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800434c:	f7fd fc8b 	bl	8001c66 <EKF_Update>

	att->pitch = ekf_1.theta_r;
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]
	att->roll = ekf_1.phi_r;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	601a      	str	r2, [r3, #0]
	float Xm = imu_filter_data.mx_ut * cos(att->pitch)
 800435c:	4b96      	ldr	r3, [pc, #600]	; (80045b8 <Attitude_ekfEstimate+0x318>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc f861 	bl	8000428 <__aeabi_f2d>
 8004366:	4604      	mov	r4, r0
 8004368:	460d      	mov	r5, r1
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f85a 	bl	8000428 <__aeabi_f2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f009 fb4a 	bl	800da14 <cos>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fc f8a6 	bl	80004d8 <__aeabi_dmul>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4690      	mov	r8, r2
 8004392:	4699      	mov	r9, r3
			- imu_filter_data.my_ut * sin(att->roll) * sin(att->pitch)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <Attitude_ekfEstimate+0x318>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f845 	bl	8000428 <__aeabi_f2d>
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f83e 	bl	8000428 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f009 fb70 	bl	800da98 <sin>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4620      	mov	r0, r4
 80043be:	4629      	mov	r1, r5
 80043c0:	f7fc f88a 	bl	80004d8 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f829 	bl	8000428 <__aeabi_f2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f009 fb5b 	bl	800da98 <sin>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc f875 	bl	80004d8 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	f7fb feb7 	bl	8000168 <__aeabi_dsub>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
			+ imu_filter_data.mz_ut * cos(att->roll) * sin(att->pitch);
 8004402:	4b6d      	ldr	r3, [pc, #436]	; (80045b8 <Attitude_ekfEstimate+0x318>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc f80e 	bl	8000428 <__aeabi_f2d>
 800440c:	4604      	mov	r4, r0
 800440e:	460d      	mov	r5, r1
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f807 	bl	8000428 <__aeabi_f2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	f009 faf7 	bl	800da14 <cos>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fc f853 	bl	80004d8 <__aeabi_dmul>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4614      	mov	r4, r2
 8004438:	461d      	mov	r5, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fb fff2 	bl	8000428 <__aeabi_f2d>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	f009 fb24 	bl	800da98 <sin>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4620      	mov	r0, r4
 8004456:	4629      	mov	r1, r5
 8004458:	f7fc f83e 	bl	80004d8 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4640      	mov	r0, r8
 8004462:	4649      	mov	r1, r9
 8004464:	f7fb fe82 	bl	800016c <__adddf3>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
	float Xm = imu_filter_data.mx_ut * cos(att->pitch)
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f7fc fb2a 	bl	8000ac8 <__aeabi_d2f>
 8004474:	4603      	mov	r3, r0
 8004476:	65bb      	str	r3, [r7, #88]	; 0x58

	float Ym = imu_filter_data.my_ut * cos(att->roll)
 8004478:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <Attitude_ekfEstimate+0x318>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fb ffd3 	bl	8000428 <__aeabi_f2d>
 8004482:	4604      	mov	r4, r0
 8004484:	460d      	mov	r5, r1
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fb ffcc 	bl	8000428 <__aeabi_f2d>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f009 fabc 	bl	800da14 <cos>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4620      	mov	r0, r4
 80044a2:	4629      	mov	r1, r5
 80044a4:	f7fc f818 	bl	80004d8 <__aeabi_dmul>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4690      	mov	r8, r2
 80044ae:	4699      	mov	r9, r3
			+ imu_filter_data.mz_ut * sin(att->roll);
 80044b0:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <Attitude_ekfEstimate+0x318>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fb ffb7 	bl	8000428 <__aeabi_f2d>
 80044ba:	4604      	mov	r4, r0
 80044bc:	460d      	mov	r5, r1
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fb ffb0 	bl	8000428 <__aeabi_f2d>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f009 fae2 	bl	800da98 <sin>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4620      	mov	r0, r4
 80044da:	4629      	mov	r1, r5
 80044dc:	f7fb fffc 	bl	80004d8 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fb fe40 	bl	800016c <__adddf3>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
	float Ym = imu_filter_data.my_ut * cos(att->roll)
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7fc fae8 	bl	8000ac8 <__aeabi_d2f>
 80044f8:	4603      	mov	r3, r0
 80044fa:	657b      	str	r3, [r7, #84]	; 0x54

	att->yaw = atan2(Ym, Xm);
 80044fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044fe:	f7fb ff93 	bl	8000428 <__aeabi_f2d>
 8004502:	4604      	mov	r4, r0
 8004504:	460d      	mov	r5, r1
 8004506:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004508:	f7fb ff8e 	bl	8000428 <__aeabi_f2d>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4620      	mov	r0, r4
 8004512:	4629      	mov	r1, r5
 8004514:	f009 fca2 	bl	800de5c <atan2>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	f7fc fad2 	bl	8000ac8 <__aeabi_d2f>
 8004524:	4602      	mov	r2, r0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	609a      	str	r2, [r3, #8]

	att->pitch = RAD2DEG * ekf_1.theta_r;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fb ff7b 	bl	8000428 <__aeabi_f2d>
 8004532:	a31b      	add	r3, pc, #108	; (adr r3, 80045a0 <Attitude_ekfEstimate+0x300>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fb ffce 	bl	80004d8 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f7fc fac0 	bl	8000ac8 <__aeabi_d2f>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	605a      	str	r2, [r3, #4]
	att->roll = RAD2DEG * ekf_1.phi_r;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fb ff69 	bl	8000428 <__aeabi_f2d>
 8004556:	a312      	add	r3, pc, #72	; (adr r3, 80045a0 <Attitude_ekfEstimate+0x300>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb ffbc 	bl	80004d8 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fc faae 	bl	8000ac8 <__aeabi_d2f>
 800456c:	4602      	mov	r2, r0
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	601a      	str	r2, [r3, #0]
	att->yaw = RAD2DEG * att->yaw;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb ff56 	bl	8000428 <__aeabi_f2d>
 800457c:	a308      	add	r3, pc, #32	; (adr r3, 80045a0 <Attitude_ekfEstimate+0x300>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	f7fc fa9b 	bl	8000ac8 <__aeabi_d2f>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	609a      	str	r2, [r3, #8]

	myDebug("\nEKF Update : pitch : %.2f deg\n", (double) att->pitch);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4618      	mov	r0, r3
 800459e:	e00d      	b.n	80045bc <Attitude_ekfEstimate+0x31c>
 80045a0:	1a63cbb0 	.word	0x1a63cbb0
 80045a4:	404ca5dc 	.word	0x404ca5dc
 80045a8:	3dcccccd 	.word	0x3dcccccd
 80045ac:	3a83126f 	.word	0x3a83126f
 80045b0:	3c343958 	.word	0x3c343958
 80045b4:	3c23d70b 	.word	0x3c23d70b
 80045b8:	20000590 	.word	0x20000590
 80045bc:	f7fb ff34 	bl	8000428 <__aeabi_f2d>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	480d      	ldr	r0, [pc, #52]	; (80045fc <Attitude_ekfEstimate+0x35c>)
 80045c6:	f7fc fe37 	bl	8001238 <myDebug>
	myDebug("EKF Update : roll : %.2f deg\n", (double) att->roll);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ff2a 	bl	8000428 <__aeabi_f2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4809      	ldr	r0, [pc, #36]	; (8004600 <Attitude_ekfEstimate+0x360>)
 80045da:	f7fc fe2d 	bl	8001238 <myDebug>
	myDebug("EKF Update : yaw : %.2f deg\n", (double) att->yaw);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ff20 	bl	8000428 <__aeabi_f2d>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4805      	ldr	r0, [pc, #20]	; (8004604 <Attitude_ekfEstimate+0x364>)
 80045ee:	f7fc fe23 	bl	8001238 <myDebug>
}
 80045f2:	bf00      	nop
 80045f4:	3780      	adds	r7, #128	; 0x80
 80045f6:	46bd      	mov	sp, r7
 80045f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045fc:	08010c0c 	.word	0x08010c0c
 8004600:	08010c2c 	.word	0x08010c2c
 8004604:	08010c4c 	.word	0x08010c4c

08004608 <process_IMU_filt>:
void process_IMU_filt(imu_filter filt_imu) {
 8004608:	b084      	sub	sp, #16
 800460a:	b580      	push	{r7, lr}
 800460c:	af00      	add	r7, sp, #0
 800460e:	f107 0c08 	add.w	ip, r7, #8
 8004612:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Attitude_genEstimate(&filt_imu, &attitude_sat);
 8004616:	490a      	ldr	r1, [pc, #40]	; (8004640 <process_IMU_filt+0x38>)
 8004618:	f107 0008 	add.w	r0, r7, #8
 800461c:	f7ff fc2c 	bl	8003e78 <Attitude_genEstimate>
	Attitude_compleEstimate(&filt_imu, &combined_sat_att);
 8004620:	4908      	ldr	r1, [pc, #32]	; (8004644 <process_IMU_filt+0x3c>)
 8004622:	f107 0008 	add.w	r0, r7, #8
 8004626:	f7ff fd73 	bl	8004110 <Attitude_compleEstimate>
	Attitude_ekfEstimate(&filt_imu, &combined_sat_att);
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <process_IMU_filt+0x3c>)
 800462c:	f107 0008 	add.w	r0, r7, #8
 8004630:	f7ff fe36 	bl	80042a0 <Attitude_ekfEstimate>
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800463c:	b004      	add	sp, #16
 800463e:	4770      	bx	lr
 8004640:	20000608 	.word	0x20000608
 8004644:	2000043c 	.word	0x2000043c

08004648 <encode_int16_to_uint8>:
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void arrangeData();
void arrangeData1();
void encode_int16_to_uint8(int16_t *int_values, uint8_t *encoded_data,
		int length) {
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < length; i++) {
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e01e      	b.n	8004698 <encode_int16_to_uint8+0x50>
		encoded_data[2 * i] = (uint8_t) ((int_values[i] >> 8) & 0xFF); // High byte
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004666:	121b      	asrs	r3, r3, #8
 8004668:	b21a      	sxth	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4619      	mov	r1, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	440b      	add	r3, r1
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
		encoded_data[2 * i + 1] = (uint8_t) (int_values[i] & 0xFF);  // Low byte
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	3301      	adds	r3, #1
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	b2ca      	uxtb	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	429a      	cmp	r2, r3
 800469e:	dbdc      	blt.n	800465a <encode_int16_to_uint8+0x12>
	}
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b099      	sub	sp, #100	; 0x64
 80046b0:	af08      	add	r7, sp, #32
 80046b2:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim == &htim1) {
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	4a91      	ldr	r2, [pc, #580]	; (80048fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	f040 817c 	bne.w	80049b6 <HAL_TIM_PeriodElapsedCallback+0x30a>
		mSEC++;
 80046be:	4b90      	ldr	r3, [pc, #576]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a8e      	ldr	r2, [pc, #568]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046c6:	6013      	str	r3, [r2, #0]
		if (mSEC > 999) {
 80046c8:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d0:	d30c      	bcc.n	80046ec <HAL_TIM_PeriodElapsedCallback+0x40>
			sec++;
 80046d2:	4b8c      	ldr	r3, [pc, #560]	; (8004904 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a8a      	ldr	r2, [pc, #552]	; (8004904 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80046da:	6013      	str	r3, [r2, #0]
			count++;
 80046dc:	4b8a      	ldr	r3, [pc, #552]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a89      	ldr	r2, [pc, #548]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80046e4:	6013      	str	r3, [r2, #0]
			mSEC = 0;
 80046e6:	4b86      	ldr	r3, [pc, #536]	; (8004900 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
		}

		if (count == 60) {
 80046ec:	4b86      	ldr	r3, [pc, #536]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b3c      	cmp	r3, #60	; 0x3c
 80046f2:	f040 8160 	bne.w	80049b6 <HAL_TIM_PeriodElapsedCallback+0x30a>
			MTQ_Disable();
 80046f6:	f7fd f861 	bl	80017bc <MTQ_Disable>
			count = 0;
 80046fa:	4b83      	ldr	r3, [pc, #524]	; (8004908 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
			myDebug("MTQ Disable\r\n");
 8004700:	4882      	ldr	r0, [pc, #520]	; (800490c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004702:	f7fc fd99 	bl	8001238 <myDebug>

			HAL_TIM_Base_Stop_IT(&htim1);
 8004706:	487d      	ldr	r0, [pc, #500]	; (80048fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004708:	f002 ff8a 	bl	8007620 <HAL_TIM_Base_Stop_IT>

			rxToOBC_temp[9] = (int16_t) (mag_moment_bdot.MomentX * 100);
 800470c:	4b80      	ldr	r3, [pc, #512]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4980      	ldr	r1, [pc, #512]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fb36 	bl	8000d84 <__aeabi_fmul>
 8004718:	4603      	mov	r3, r0
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fd0e 	bl	800113c <__aeabi_f2iz>
 8004720:	4603      	mov	r3, r0
 8004722:	b21a      	sxth	r2, r3
 8004724:	4b7c      	ldr	r3, [pc, #496]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004726:	825a      	strh	r2, [r3, #18]
			rxToOBC_temp[10] = (int16_t) (mag_moment_bdot.MomentY * 100);
 8004728:	4b79      	ldr	r3, [pc, #484]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4979      	ldr	r1, [pc, #484]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc fb28 	bl	8000d84 <__aeabi_fmul>
 8004734:	4603      	mov	r3, r0
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fd00 	bl	800113c <__aeabi_f2iz>
 800473c:	4603      	mov	r3, r0
 800473e:	b21a      	sxth	r2, r3
 8004740:	4b75      	ldr	r3, [pc, #468]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004742:	829a      	strh	r2, [r3, #20]
			rxToOBC_temp[11] = (int16_t) (mag_moment_bdot.MomentZ * 100);
 8004744:	4b72      	ldr	r3, [pc, #456]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4972      	ldr	r1, [pc, #456]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800474a:	4618      	mov	r0, r3
 800474c:	f7fc fb1a 	bl	8000d84 <__aeabi_fmul>
 8004750:	4603      	mov	r3, r0
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fcf2 	bl	800113c <__aeabi_f2iz>
 8004758:	4603      	mov	r3, r0
 800475a:	b21a      	sxth	r2, r3
 800475c:	4b6e      	ldr	r3, [pc, #440]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800475e:	82da      	strh	r2, [r3, #22]
			rxToOBC_temp[12] = (int16_t) (mag_moment_bdot.Dy_per * 100);
 8004760:	4b6b      	ldr	r3, [pc, #428]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	496b      	ldr	r1, [pc, #428]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fb0c 	bl	8000d84 <__aeabi_fmul>
 800476c:	4603      	mov	r3, r0
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fce4 	bl	800113c <__aeabi_f2iz>
 8004774:	4603      	mov	r3, r0
 8004776:	b21a      	sxth	r2, r3
 8004778:	4b67      	ldr	r3, [pc, #412]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800477a:	831a      	strh	r2, [r3, #24]
			rxToOBC_temp[13] = (int16_t) (mag_moment_bdot.Dz_per * 100);
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4964      	ldr	r1, [pc, #400]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc fafe 	bl	8000d84 <__aeabi_fmul>
 8004788:	4603      	mov	r3, r0
 800478a:	4618      	mov	r0, r3
 800478c:	f7fc fcd6 	bl	800113c <__aeabi_f2iz>
 8004790:	4603      	mov	r3, r0
 8004792:	b21a      	sxth	r2, r3
 8004794:	4b60      	ldr	r3, [pc, #384]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004796:	835a      	strh	r2, [r3, #26]

			imu_filter_data = IMU_Get_Data(&DEFAULT_MPU6500, &DEFAULT_LSM9DS1); //IMU filtered data
 8004798:	4c60      	ldr	r4, [pc, #384]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800479a:	463b      	mov	r3, r7
 800479c:	4a60      	ldr	r2, [pc, #384]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800479e:	4961      	ldr	r1, [pc, #388]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fb7b 	bl	8002e9c <IMU_Get_Data>
 80047a6:	4625      	mov	r5, r4
 80047a8:	463c      	mov	r4, r7
 80047aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			process_IMU_filt(imu_filter_data);
 80047ba:	4e58      	ldr	r6, [pc, #352]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80047bc:	466d      	mov	r5, sp
 80047be:	f106 0410 	add.w	r4, r6, #16
 80047c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80047ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80047d2:	f7ff ff19 	bl	8004608 <process_IMU_filt>

			rxToOBC_temp[14] = (int16_t) (imu_filter_data.p_rps * 100);
 80047d6:	4b51      	ldr	r3, [pc, #324]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	494e      	ldr	r1, [pc, #312]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fc fad1 	bl	8000d84 <__aeabi_fmul>
 80047e2:	4603      	mov	r3, r0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc fca9 	bl	800113c <__aeabi_f2iz>
 80047ea:	4603      	mov	r3, r0
 80047ec:	b21a      	sxth	r2, r3
 80047ee:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80047f0:	839a      	strh	r2, [r3, #28]
			rxToOBC_temp[15] = (int16_t) (imu_filter_data.q_rps * 100);
 80047f2:	4b4a      	ldr	r3, [pc, #296]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	4947      	ldr	r1, [pc, #284]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fc fac3 	bl	8000d84 <__aeabi_fmul>
 80047fe:	4603      	mov	r3, r0
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fc9b 	bl	800113c <__aeabi_f2iz>
 8004806:	4603      	mov	r3, r0
 8004808:	b21a      	sxth	r2, r3
 800480a:	4b43      	ldr	r3, [pc, #268]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800480c:	83da      	strh	r2, [r3, #30]
			rxToOBC_temp[16] = (int16_t) (imu_filter_data.r_rps * 100);
 800480e:	4b43      	ldr	r3, [pc, #268]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4940      	ldr	r1, [pc, #256]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fab5 	bl	8000d84 <__aeabi_fmul>
 800481a:	4603      	mov	r3, r0
 800481c:	4618      	mov	r0, r3
 800481e:	f7fc fc8d 	bl	800113c <__aeabi_f2iz>
 8004822:	4603      	mov	r3, r0
 8004824:	b21a      	sxth	r2, r3
 8004826:	4b3c      	ldr	r3, [pc, #240]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004828:	841a      	strh	r2, [r3, #32]

			rxToOBC_temp[17] = (int16_t) (imu_filter_data.mx_ut * 100);
 800482a:	4b3c      	ldr	r3, [pc, #240]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	4939      	ldr	r1, [pc, #228]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc faa7 	bl	8000d84 <__aeabi_fmul>
 8004836:	4603      	mov	r3, r0
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fc7f 	bl	800113c <__aeabi_f2iz>
 800483e:	4603      	mov	r3, r0
 8004840:	b21a      	sxth	r2, r3
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004844:	845a      	strh	r2, [r3, #34]	; 0x22
			rxToOBC_temp[18] = (int16_t) (imu_filter_data.my_ut * 100);
 8004846:	4b35      	ldr	r3, [pc, #212]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4932      	ldr	r1, [pc, #200]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fa99 	bl	8000d84 <__aeabi_fmul>
 8004852:	4603      	mov	r3, r0
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc fc71 	bl	800113c <__aeabi_f2iz>
 800485a:	4603      	mov	r3, r0
 800485c:	b21a      	sxth	r2, r3
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004860:	849a      	strh	r2, [r3, #36]	; 0x24
			rxToOBC_temp[19] = (int16_t) (imu_filter_data.mz_ut * 100);
 8004862:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	492b      	ldr	r1, [pc, #172]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fa8b 	bl	8000d84 <__aeabi_fmul>
 800486e:	4603      	mov	r3, r0
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc fc63 	bl	800113c <__aeabi_f2iz>
 8004876:	4603      	mov	r3, r0
 8004878:	b21a      	sxth	r2, r3
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800487c:	84da      	strh	r2, [r3, #38]	; 0x26

			rxToOBC_temp[20] = (int16_t) (combined_sat_att.roll * 100);
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4924      	ldr	r1, [pc, #144]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc fa7d 	bl	8000d84 <__aeabi_fmul>
 800488a:	4603      	mov	r3, r0
 800488c:	4618      	mov	r0, r3
 800488e:	f7fc fc55 	bl	800113c <__aeabi_f2iz>
 8004892:	4603      	mov	r3, r0
 8004894:	b21a      	sxth	r2, r3
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
			rxToOBC_temp[21] = (int16_t) (combined_sat_att.pitch * 100);
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	491d      	ldr	r1, [pc, #116]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fc fa6f 	bl	8000d84 <__aeabi_fmul>
 80048a6:	4603      	mov	r3, r0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fc47 	bl	800113c <__aeabi_f2iz>
 80048ae:	4603      	mov	r3, r0
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
			rxToOBC_temp[22] = (int16_t) (combined_sat_att.yaw * 100);
 80048b6:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4916      	ldr	r1, [pc, #88]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fc fa61 	bl	8000d84 <__aeabi_fmul>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fc fc39 	bl	800113c <__aeabi_f2iz>
 80048ca:	4603      	mov	r3, r0
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80048d0:	859a      	strh	r2, [r3, #44]	; 0x2c

			encode_int16_to_uint8(rxToOBC_temp, temp, 46);
 80048d2:	222e      	movs	r2, #46	; 0x2e
 80048d4:	4915      	ldr	r1, [pc, #84]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048d6:	4810      	ldr	r0, [pc, #64]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80048d8:	f7ff feb6 	bl	8004648 <encode_int16_to_uint8>
			if (HAL_UART_Transmit(&huart3, temp, 46, 1000) == HAL_OK) {
 80048dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e0:	222e      	movs	r2, #46	; 0x2e
 80048e2:	4912      	ldr	r1, [pc, #72]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048e4:	4812      	ldr	r0, [pc, #72]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80048e6:	f003 fdc9 	bl	800847c <HAL_UART_Transmit>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d134      	bne.n	800495a <HAL_TIM_PeriodElapsedCallback+0x2ae>
				myDebug("Transmitted to OBC\r\n");
 80048f0:	4810      	ldr	r0, [pc, #64]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80048f2:	f7fc fca1 	bl	8001238 <myDebug>
				for (int i = 0; i < 46; i++) {
 80048f6:	2300      	movs	r3, #0
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fa:	e028      	b.n	800494e <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80048fc:	20000f88 	.word	0x20000f88
 8004900:	2000026c 	.word	0x2000026c
 8004904:	20000270 	.word	0x20000270
 8004908:	20000274 	.word	0x20000274
 800490c:	08010c6c 	.word	0x08010c6c
 8004910:	20000398 	.word	0x20000398
 8004914:	42c80000 	.word	0x42c80000
 8004918:	20000e30 	.word	0x20000e30
 800491c:	20000590 	.word	0x20000590
 8004920:	200010f0 	.word	0x200010f0
 8004924:	20000fd0 	.word	0x20000fd0
 8004928:	2000043c 	.word	0x2000043c
 800492c:	2000027c 	.word	0x2000027c
 8004930:	200004e8 	.word	0x200004e8
 8004934:	08010c7c 	.word	0x08010c7c
					myDebug("%02x ", temp[i]);
 8004938:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	4413      	add	r3, r2
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	4820      	ldr	r0, [pc, #128]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8004944:	f7fc fc78 	bl	8001238 <myDebug>
				for (int i = 0; i < 46; i++) {
 8004948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494a:	3301      	adds	r3, #1
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004950:	2b2d      	cmp	r3, #45	; 0x2d
 8004952:	ddf1      	ble.n	8004938 <HAL_TIM_PeriodElapsedCallback+0x28c>
				}
				myDebug("\n");
 8004954:	481c      	ldr	r0, [pc, #112]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004956:	f7fc fc6f 	bl	8001238 <myDebug>
			}
			uint8_t text[] = { 0xff, 0xd9, '\0' };
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x320>)
 800495c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	4611      	mov	r1, r2
 8004964:	8019      	strh	r1, [r3, #0]
 8004966:	3302      	adds	r3, #2
 8004968:	0c12      	lsrs	r2, r2, #16
 800496a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, text, strlen(text), 600);
 800496c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004970:	4618      	mov	r0, r3
 8004972:	f7fb fbed 	bl	8000150 <strlen>
 8004976:	4603      	mov	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800497e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004982:	4813      	ldr	r0, [pc, #76]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004984:	f003 fd7a 	bl	800847c <HAL_UART_Transmit>

			memset(rxToOBC, '\0', sizeof(temp));
 8004988:	22fa      	movs	r2, #250	; 0xfa
 800498a:	2100      	movs	r1, #0
 800498c:	4811      	ldr	r0, [pc, #68]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800498e:	f004 fc41 	bl	8009214 <memset>
			memset(rxToOBC_temp, '\0', sizeof(rxToOBC_temp));
 8004992:	22f0      	movs	r2, #240	; 0xf0
 8004994:	2100      	movs	r1, #0
 8004996:	4810      	ldr	r0, [pc, #64]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004998:	f004 fc3c 	bl	8009214 <memset>

			HAL_Delay(1000);
 800499c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049a0:	f001 f87a 	bl	8005a98 <HAL_Delay>

			mSEC = 0;
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x330>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
			sec = 0;
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
			IS_TAKE_DATA = 1;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80049b6:	bf00      	nop
 80049b8:	3744      	adds	r7, #68	; 0x44
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000027c 	.word	0x2000027c
 80049c4:	08010c94 	.word	0x08010c94
 80049c8:	08010c9c 	.word	0x08010c9c
 80049cc:	08010ca0 	.word	0x08010ca0
 80049d0:	200004e8 	.word	0x200004e8
 80049d4:	20000f58 	.word	0x20000f58
 80049d8:	20000e30 	.word	0x20000e30
 80049dc:	2000026c 	.word	0x2000026c
 80049e0:	20000270 	.word	0x20000270
 80049e4:	20000000 	.word	0x20000000

080049e8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80049e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ea:	b09b      	sub	sp, #108	; 0x6c
 80049ec:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80049ee:	f000 fff1 	bl	80059d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80049f2:	f000 fa19 	bl	8004e28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80049f6:	f000 fc39 	bl	800526c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80049fa:	f000 fbe3 	bl	80051c4 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80049fe:	f000 fc0b 	bl	8005218 <MX_USART3_UART_Init>
	MX_SPI1_Init();
 8004a02:	f000 fa57 	bl	8004eb4 <MX_SPI1_Init>
	MX_TIM3_Init();
 8004a06:	f000 fb11 	bl	800502c <MX_TIM3_Init>
	MX_TIM4_Init();
 8004a0a:	f000 fb75 	bl	80050f8 <MX_TIM4_Init>
	MX_TIM1_Init();
 8004a0e:	f000 fabd 	bl	8004f8c <MX_TIM1_Init>
	MX_SPI2_Init();
 8004a12:	f000 fa85 	bl	8004f20 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	myDebug("##### Welcome to Active ADCS Debug Zone #####\r\n");
 8004a16:	4808      	ldr	r0, [pc, #32]	; (8004a38 <main+0x50>)
 8004a18:	f7fc fc0e 	bl	8001238 <myDebug>
//	myDebug("----- Waiting for Handshake command from OBC -----\r\n");
	OBC_HANDSHAKE_FLAG = 1;
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <main+0x54>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
	while (OBC_HANDSHAKE_FLAG == 0) {
 8004a22:	e001      	b.n	8004a28 <main+0x40>
		WAIT_FOR_HANDSHAKE();
 8004a24:	f7fe ff96 	bl	8003954 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <main+0x54>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f9      	beq.n	8004a24 <main+0x3c>
	}

	myDebug("----- Waiting Enable command from OBC -----\r\n");
 8004a30:	4803      	ldr	r0, [pc, #12]	; (8004a40 <main+0x58>)
 8004a32:	f7fc fc01 	bl	8001238 <myDebug>
//	mode = 2;
	while (mode == 0) {
 8004a36:	e007      	b.n	8004a48 <main+0x60>
 8004a38:	08010ca4 	.word	0x08010ca4
 8004a3c:	20000f31 	.word	0x20000f31
 8004a40:	08010cd4 	.word	0x08010cd4
		GET_COMMAND_OBC();
 8004a44:	f7ff f858 	bl	8003af8 <GET_COMMAND_OBC>
	while (mode == 0) {
 8004a48:	4b9b      	ldr	r3, [pc, #620]	; (8004cb8 <main+0x2d0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f9      	beq.n	8004a44 <main+0x5c>
	}
	IMU_Setup(&DEFAULT_MPU6500); //initialization and calibration
 8004a50:	489a      	ldr	r0, [pc, #616]	; (8004cbc <main+0x2d4>)
 8004a52:	f7fd ffc3 	bl	80029dc <IMU_Setup>
	counter = 0;
 8004a56:	4b9a      	ldr	r3, [pc, #616]	; (8004cc0 <main+0x2d8>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
	counter2 = 0;
 8004a5c:	4b99      	ldr	r3, [pc, #612]	; (8004cc4 <main+0x2dc>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (IS_TAKE_DATA == 1) {
 8004a62:	4b99      	ldr	r3, [pc, #612]	; (8004cc8 <main+0x2e0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d1fb      	bne.n	8004a62 <main+0x7a>

			if (mode == 0) {
 8004a6a:	4b93      	ldr	r3, [pc, #588]	; (8004cb8 <main+0x2d0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <main+0x8e>
				GET_COMMAND_OBC();
 8004a72:	f7ff f841 	bl	8003af8 <GET_COMMAND_OBC>
			}

			if (mode == 1 || mode == 2) {
 8004a76:	4b90      	ldr	r3, [pc, #576]	; (8004cb8 <main+0x2d0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d003      	beq.n	8004a86 <main+0x9e>
 8004a7e:	4b8e      	ldr	r3, [pc, #568]	; (8004cb8 <main+0x2d0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d1ed      	bne.n	8004a62 <main+0x7a>
				counter2++;
 8004a86:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <main+0x2dc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a8d      	ldr	r2, [pc, #564]	; (8004cc4 <main+0x2dc>)
 8004a8e:	6013      	str	r3, [r2, #0]

				imu_filter_data = IMU_Get_Data(&DEFAULT_MPU6500,
 8004a90:	4c8e      	ldr	r4, [pc, #568]	; (8004ccc <main+0x2e4>)
 8004a92:	463b      	mov	r3, r7
 8004a94:	4a8e      	ldr	r2, [pc, #568]	; (8004cd0 <main+0x2e8>)
 8004a96:	4989      	ldr	r1, [pc, #548]	; (8004cbc <main+0x2d4>)
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe f9ff 	bl	8002e9c <IMU_Get_Data>
 8004a9e:	4625      	mov	r5, r4
 8004aa0:	463c      	mov	r4, r7
 8004aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004aae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
						&DEFAULT_LSM9DS1); //IMU filtered data
				HAL_Delay(100);
 8004ab2:	2064      	movs	r0, #100	; 0x64
 8004ab4:	f000 fff0 	bl	8005a98 <HAL_Delay>
				process_IMU_filt(imu_filter_data);
 8004ab8:	4e84      	ldr	r6, [pc, #528]	; (8004ccc <main+0x2e4>)
 8004aba:	466d      	mov	r5, sp
 8004abc:	f106 0410 	add.w	r4, r6, #16
 8004ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ac8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004acc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ad0:	f7ff fd9a 	bl	8004608 <process_IMU_filt>

				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.p_rps
 8004ad4:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <main+0x2e4>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
						* 100);
 8004ad8:	497e      	ldr	r1, [pc, #504]	; (8004cd4 <main+0x2ec>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc f952 	bl	8000d84 <__aeabi_fmul>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.p_rps
 8004ae4:	4b76      	ldr	r3, [pc, #472]	; (8004cc0 <main+0x2d8>)
 8004ae6:	681c      	ldr	r4, [r3, #0]
 8004ae8:	1c63      	adds	r3, r4, #1
 8004aea:	4a75      	ldr	r2, [pc, #468]	; (8004cc0 <main+0x2d8>)
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4608      	mov	r0, r1
 8004af0:	f7fc fb24 	bl	800113c <__aeabi_f2iz>
 8004af4:	4603      	mov	r3, r0
 8004af6:	b21a      	sxth	r2, r3
 8004af8:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <main+0x2f0>)
 8004afa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.q_rps
 8004afe:	4b73      	ldr	r3, [pc, #460]	; (8004ccc <main+0x2e4>)
 8004b00:	691b      	ldr	r3, [r3, #16]
						* 100);
 8004b02:	4974      	ldr	r1, [pc, #464]	; (8004cd4 <main+0x2ec>)
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc f93d 	bl	8000d84 <__aeabi_fmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.q_rps
 8004b0e:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <main+0x2d8>)
 8004b10:	681c      	ldr	r4, [r3, #0]
 8004b12:	1c63      	adds	r3, r4, #1
 8004b14:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <main+0x2d8>)
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	f7fc fb0f 	bl	800113c <__aeabi_f2iz>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	4b6d      	ldr	r3, [pc, #436]	; (8004cd8 <main+0x2f0>)
 8004b24:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.r_rps
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <main+0x2e4>)
 8004b2a:	695b      	ldr	r3, [r3, #20]
						* 100);
 8004b2c:	4969      	ldr	r1, [pc, #420]	; (8004cd4 <main+0x2ec>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fc f928 	bl	8000d84 <__aeabi_fmul>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.r_rps
 8004b38:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <main+0x2d8>)
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	1c63      	adds	r3, r4, #1
 8004b3e:	4a60      	ldr	r2, [pc, #384]	; (8004cc0 <main+0x2d8>)
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4608      	mov	r0, r1
 8004b44:	f7fc fafa 	bl	800113c <__aeabi_f2iz>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	b21a      	sxth	r2, r3
 8004b4c:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <main+0x2f0>)
 8004b4e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.mx_ut
 8004b52:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <main+0x2e4>)
 8004b54:	699b      	ldr	r3, [r3, #24]
						* 100);
 8004b56:	495f      	ldr	r1, [pc, #380]	; (8004cd4 <main+0x2ec>)
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fc f913 	bl	8000d84 <__aeabi_fmul>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.mx_ut
 8004b62:	4b57      	ldr	r3, [pc, #348]	; (8004cc0 <main+0x2d8>)
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	1c63      	adds	r3, r4, #1
 8004b68:	4a55      	ldr	r2, [pc, #340]	; (8004cc0 <main+0x2d8>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	f7fc fae5 	bl	800113c <__aeabi_f2iz>
 8004b72:	4603      	mov	r3, r0
 8004b74:	b21a      	sxth	r2, r3
 8004b76:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <main+0x2f0>)
 8004b78:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.my_ut
 8004b7c:	4b53      	ldr	r3, [pc, #332]	; (8004ccc <main+0x2e4>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
						* 100);
 8004b80:	4954      	ldr	r1, [pc, #336]	; (8004cd4 <main+0x2ec>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc f8fe 	bl	8000d84 <__aeabi_fmul>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.my_ut
 8004b8c:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <main+0x2d8>)
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	1c63      	adds	r3, r4, #1
 8004b92:	4a4b      	ldr	r2, [pc, #300]	; (8004cc0 <main+0x2d8>)
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4608      	mov	r0, r1
 8004b98:	f7fc fad0 	bl	800113c <__aeabi_f2iz>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <main+0x2f0>)
 8004ba2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.mz_ut
 8004ba6:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <main+0x2e4>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
						* 100);
 8004baa:	494a      	ldr	r1, [pc, #296]	; (8004cd4 <main+0x2ec>)
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fc f8e9 	bl	8000d84 <__aeabi_fmul>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (imu_filter_data.mz_ut
 8004bb6:	4b42      	ldr	r3, [pc, #264]	; (8004cc0 <main+0x2d8>)
 8004bb8:	681c      	ldr	r4, [r3, #0]
 8004bba:	1c63      	adds	r3, r4, #1
 8004bbc:	4a40      	ldr	r2, [pc, #256]	; (8004cc0 <main+0x2d8>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	f7fc fabb 	bl	800113c <__aeabi_f2iz>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <main+0x2f0>)
 8004bcc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				rxToOBC_temp[counter++] = (int16_t) (combined_sat_att.roll
 8004bd0:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <main+0x2f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
						* 100);
 8004bd4:	493f      	ldr	r1, [pc, #252]	; (8004cd4 <main+0x2ec>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fc f8d4 	bl	8000d84 <__aeabi_fmul>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (combined_sat_att.roll
 8004be0:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <main+0x2d8>)
 8004be2:	681c      	ldr	r4, [r3, #0]
 8004be4:	1c63      	adds	r3, r4, #1
 8004be6:	4a36      	ldr	r2, [pc, #216]	; (8004cc0 <main+0x2d8>)
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4608      	mov	r0, r1
 8004bec:	f7fc faa6 	bl	800113c <__aeabi_f2iz>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b21a      	sxth	r2, r3
 8004bf4:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <main+0x2f0>)
 8004bf6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (combined_sat_att.pitch
 8004bfa:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <main+0x2f4>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
						* 100);
 8004bfe:	4935      	ldr	r1, [pc, #212]	; (8004cd4 <main+0x2ec>)
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc f8bf 	bl	8000d84 <__aeabi_fmul>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4619      	mov	r1, r3
				rxToOBC_temp[counter++] = (int16_t) (combined_sat_att.pitch
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <main+0x2d8>)
 8004c0c:	681c      	ldr	r4, [r3, #0]
 8004c0e:	1c63      	adds	r3, r4, #1
 8004c10:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <main+0x2d8>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4608      	mov	r0, r1
 8004c16:	f7fc fa91 	bl	800113c <__aeabi_f2iz>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	b21a      	sxth	r2, r3
 8004c1e:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <main+0x2f0>)
 8004c20:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				rxToOBC_temp[counter++] = (int16_t) (combined_sat_att.yaw * 100);
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <main+0x2f4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	492a      	ldr	r1, [pc, #168]	; (8004cd4 <main+0x2ec>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fc f8aa 	bl	8000d84 <__aeabi_fmul>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4619      	mov	r1, r3
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <main+0x2d8>)
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	1c63      	adds	r3, r4, #1
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <main+0x2d8>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4608      	mov	r0, r1
 8004c40:	f7fc fa7c 	bl	800113c <__aeabi_f2iz>
 8004c44:	4603      	mov	r3, r0
 8004c46:	b21a      	sxth	r2, r3
 8004c48:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <main+0x2f0>)
 8004c4a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

				uint8_t index = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (mode == 1) {
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <main+0x2d0>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 80a8 	bne.w	8004dae <main+0x3c6>
					if (counter2 % 10 == 0 && counter2 <= 60) {
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <main+0x2dc>)
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <main+0x2f8>)
 8004c64:	fb83 2301 	smull	r2, r3, r3, r1
 8004c68:	109a      	asrs	r2, r3, #2
 8004c6a:	17cb      	asrs	r3, r1, #31
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	1aca      	subs	r2, r1, r3
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d16c      	bne.n	8004d56 <main+0x36e>
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <main+0x2dc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b3c      	cmp	r3, #60	; 0x3c
 8004c82:	dc68      	bgt.n	8004d56 <main+0x36e>
						encode_int16_to_uint8(rxToOBC_temp, temp, 90);
 8004c84:	225a      	movs	r2, #90	; 0x5a
 8004c86:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <main+0x2fc>)
 8004c88:	4813      	ldr	r0, [pc, #76]	; (8004cd8 <main+0x2f0>)
 8004c8a:	f7ff fcdd 	bl	8004648 <encode_int16_to_uint8>
						HAL_UART_Transmit(&huart3, temp, 2 * counter, 6000);
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <main+0x2d8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c9c:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <main+0x2fc>)
 8004c9e:	4812      	ldr	r0, [pc, #72]	; (8004ce8 <main+0x300>)
 8004ca0:	f003 fbec 	bl	800847c <HAL_UART_Transmit>
//						HAL_UART_Transmit(&huart1,temp,2*counter, 6000);
						HAL_UART_Transmit(&huart1, '\n', 1, 600);
 8004ca4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004ca8:	2201      	movs	r2, #1
 8004caa:	210a      	movs	r1, #10
 8004cac:	480f      	ldr	r0, [pc, #60]	; (8004cec <main+0x304>)
 8004cae:	f003 fbe5 	bl	800847c <HAL_UART_Transmit>
						for (int i = 0; i < counter; i++) {
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	e02b      	b.n	8004d10 <main+0x328>
 8004cb8:	20000278 	.word	0x20000278
 8004cbc:	20000fd0 	.word	0x20000fd0
 8004cc0:	20000378 	.word	0x20000378
 8004cc4:	2000037c 	.word	0x2000037c
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000590 	.word	0x20000590
 8004cd0:	200010f0 	.word	0x200010f0
 8004cd4:	42c80000 	.word	0x42c80000
 8004cd8:	20000e30 	.word	0x20000e30
 8004cdc:	2000043c 	.word	0x2000043c
 8004ce0:	66666667 	.word	0x66666667
 8004ce4:	2000027c 	.word	0x2000027c
 8004ce8:	200004e8 	.word	0x200004e8
 8004cec:	20000de8 	.word	0x20000de8
							myDebug("%d ", rxToOBC_temp[i] * 1000);
 8004cf0:	4a3f      	ldr	r2, [pc, #252]	; (8004df0 <main+0x408>)
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cfe:	fb03 f302 	mul.w	r3, r3, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	483b      	ldr	r0, [pc, #236]	; (8004df4 <main+0x40c>)
 8004d06:	f7fc fa97 	bl	8001238 <myDebug>
						for (int i = 0; i < counter; i++) {
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d10:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <main+0x410>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dbea      	blt.n	8004cf0 <main+0x308>
						}

						counter = 0;
 8004d1a:	4b37      	ldr	r3, [pc, #220]	; (8004df8 <main+0x410>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
						index = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//						counter2=0;
						memset(rxToOBC_temp, '\0', sizeof(rxToOBC_temp));
 8004d26:	22f0      	movs	r2, #240	; 0xf0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4831      	ldr	r0, [pc, #196]	; (8004df0 <main+0x408>)
 8004d2c:	f004 fa72 	bl	8009214 <memset>

						memset(temp, '\0', sizeof(temp));
 8004d30:	22fa      	movs	r2, #250	; 0xfa
 8004d32:	2100      	movs	r1, #0
 8004d34:	4831      	ldr	r0, [pc, #196]	; (8004dfc <main+0x414>)
 8004d36:	f004 fa6d 	bl	8009214 <memset>

						HAL_UART_Transmit(&huart1, '\n', 1, 600);
 8004d3a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004d3e:	2201      	movs	r2, #1
 8004d40:	210a      	movs	r1, #10
 8004d42:	482f      	ldr	r0, [pc, #188]	; (8004e00 <main+0x418>)
 8004d44:	f003 fb9a 	bl	800847c <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart1, '\n', 1, 600);
 8004d48:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	210a      	movs	r1, #10
 8004d50:	482b      	ldr	r0, [pc, #172]	; (8004e00 <main+0x418>)
 8004d52:	f003 fb93 	bl	800847c <HAL_UART_Transmit>
					}
					if (counter2 > 60) {
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <main+0x41c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b3c      	cmp	r3, #60	; 0x3c
 8004d5c:	dd27      	ble.n	8004dae <main+0x3c6>

						HAL_UART_Transmit(&huart1, '\n', 1, 600);
 8004d5e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004d62:	2201      	movs	r2, #1
 8004d64:	210a      	movs	r1, #10
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <main+0x418>)
 8004d68:	f003 fb88 	bl	800847c <HAL_UART_Transmit>

						HAL_UART_Transmit(&huart1, '\n', 1, 600);
 8004d6c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004d70:	2201      	movs	r2, #1
 8004d72:	210a      	movs	r1, #10
 8004d74:	4822      	ldr	r0, [pc, #136]	; (8004e00 <main+0x418>)
 8004d76:	f003 fb81 	bl	800847c <HAL_UART_Transmit>
						uint8_t text[] = { 0xff, 0xd9, '\0' };
 8004d7a:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <main+0x420>)
 8004d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4611      	mov	r1, r2
 8004d84:	8019      	strh	r1, [r3, #0]
 8004d86:	3302      	adds	r3, #2
 8004d88:	0c12      	lsrs	r2, r2, #16
 8004d8a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart3, text, strlen(text), 600);
 8004d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb f9dd 	bl	8000150 <strlen>
 8004d96:	4603      	mov	r3, r0
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004d9e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004da2:	481a      	ldr	r0, [pc, #104]	; (8004e0c <main+0x424>)
 8004da4:	f003 fb6a 	bl	800847c <HAL_UART_Transmit>
						HAL_Delay(200000000);
 8004da8:	4819      	ldr	r0, [pc, #100]	; (8004e10 <main+0x428>)
 8004daa:	f000 fe75 	bl	8005a98 <HAL_Delay>
					}
				}

				if (mode == 2) {
 8004dae:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <main+0x42c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d117      	bne.n	8004de6 <main+0x3fe>

					IS_TAKE_DATA = 0;
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <main+0x430>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

					CalTorque(imu_filter_data, &DEFAULT_LSM9DS1,
 8004dbc:	4e17      	ldr	r6, [pc, #92]	; (8004e1c <main+0x434>)
 8004dbe:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <main+0x438>)
 8004dc0:	ab09      	add	r3, sp, #36	; 0x24
 8004dc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <main+0x43c>)
 8004dca:	9308      	str	r3, [sp, #32]
 8004dcc:	466d      	mov	r5, sp
 8004dce:	f106 0410 	add.w	r4, r6, #16
 8004dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004dde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004de2:	f7fc fa65 	bl	80012b0 <CalTorque>
							combined_sat_att);
				}
				HAL_Delay(1000);
 8004de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dea:	f000 fe55 	bl	8005a98 <HAL_Delay>
		if (IS_TAKE_DATA == 1) {
 8004dee:	e638      	b.n	8004a62 <main+0x7a>
 8004df0:	20000e30 	.word	0x20000e30
 8004df4:	08010d04 	.word	0x08010d04
 8004df8:	20000378 	.word	0x20000378
 8004dfc:	2000027c 	.word	0x2000027c
 8004e00:	20000de8 	.word	0x20000de8
 8004e04:	2000037c 	.word	0x2000037c
 8004e08:	08010ca0 	.word	0x08010ca0
 8004e0c:	200004e8 	.word	0x200004e8
 8004e10:	0bebc200 	.word	0x0bebc200
 8004e14:	20000278 	.word	0x20000278
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	20000590 	.word	0x20000590
 8004e20:	2000043c 	.word	0x2000043c
 8004e24:	200010f0 	.word	0x200010f0

08004e28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004e2e:	f107 0318 	add.w	r3, r7, #24
 8004e32:	2228      	movs	r2, #40	; 0x28
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 f9ec 	bl	8009214 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e52:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004e54:	2300      	movs	r3, #0
 8004e56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004e66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004e6c:	f107 0318 	add.w	r3, r7, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f991 	bl	8006198 <HAL_RCC_OscConfig>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <SystemClock_Config+0x58>
		Error_Handler();
 8004e7c:	f000 fa56 	bl	800532c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004e80:	230f      	movs	r3, #15
 8004e82:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e84:	2302      	movs	r3, #2
 8004e86:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	2102      	movs	r1, #2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 fbfc 	bl	8006698 <HAL_RCC_ClockConfig>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <SystemClock_Config+0x82>
		Error_Handler();
 8004ea6:	f000 fa41 	bl	800532c <Error_Handler>
	}
}
 8004eaa:	bf00      	nop
 8004eac:	3740      	adds	r7, #64	; 0x40
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <MX_SPI1_Init+0x68>)
 8004ebc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ec4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ecc:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ee8:	2220      	movs	r2, #32
 8004eea:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004f00:	220a      	movs	r2, #10
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004f04:	4804      	ldr	r0, [pc, #16]	; (8004f18 <MX_SPI1_Init+0x64>)
 8004f06:	f001 fd55 	bl	80069b4 <HAL_SPI_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_SPI1_Init+0x60>
		Error_Handler();
 8004f10:	f000 fa0c 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20001034 	.word	0x20001034
 8004f1c:	40013000 	.word	0x40013000

08004f20 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8004f24:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f28:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f30:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f50:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f6c:	220a      	movs	r2, #10
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8004f70:	4804      	ldr	r0, [pc, #16]	; (8004f84 <MX_SPI2_Init+0x64>)
 8004f72:	f001 fd1f 	bl	80069b4 <HAL_SPI_Init>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_SPI2_Init+0x60>
		Error_Handler();
 8004f7c:	f000 f9d6 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000448 	.word	0x20000448
 8004f88:	40003800 	.word	0x40003800

08004f8c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <MX_TIM1_Init+0x98>)
 8004faa:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <MX_TIM1_Init+0x9c>)
 8004fac:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fb0:	2247      	movs	r2, #71	; 0x47
 8004fb2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8004fba:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fc0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8004fd4:	4813      	ldr	r0, [pc, #76]	; (8005024 <MX_TIM1_Init+0x98>)
 8004fd6:	f002 fa82 	bl	80074de <HAL_TIM_Base_Init>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <MX_TIM1_Init+0x58>
		Error_Handler();
 8004fe0:	f000 f9a4 	bl	800532c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480c      	ldr	r0, [pc, #48]	; (8005024 <MX_TIM1_Init+0x98>)
 8004ff2:	f002 fde7 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_TIM1_Init+0x74>
		Error_Handler();
 8004ffc:	f000 f996 	bl	800532c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005000:	2300      	movs	r3, #0
 8005002:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005004:	2300      	movs	r3, #0
 8005006:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8005008:	463b      	mov	r3, r7
 800500a:	4619      	mov	r1, r3
 800500c:	4805      	ldr	r0, [pc, #20]	; (8005024 <MX_TIM1_Init+0x98>)
 800500e:	f003 f975 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8005018:	f000 f988 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800501c:	bf00      	nop
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000f88 	.word	0x20000f88
 8005028:	40012c00 	.word	0x40012c00

0800502c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005032:	f107 0320 	add.w	r3, r7, #32
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	60da      	str	r2, [r3, #12]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	615a      	str	r2, [r3, #20]
 800504c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <MX_TIM3_Init+0xc8>)
 8005052:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 2000 - 1;
 8005054:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005056:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800505a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800505c:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <MX_TIM3_Init+0xc4>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 36000 - 1;
 8005062:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005064:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005068:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800506a:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <MX_TIM3_Init+0xc4>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8005076:	481e      	ldr	r0, [pc, #120]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005078:	f002 fb00 	bl	800767c <HAL_TIM_PWM_Init>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <MX_TIM3_Init+0x5a>
		Error_Handler();
 8005082:	f000 f953 	bl	800532c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800508e:	f107 0320 	add.w	r3, r7, #32
 8005092:	4619      	mov	r1, r3
 8005094:	4816      	ldr	r0, [pc, #88]	; (80050f0 <MX_TIM3_Init+0xc4>)
 8005096:	f003 f931 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80050a0:	f000 f944 	bl	800532c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050a4:	2360      	movs	r3, #96	; 0x60
 80050a6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	2200      	movs	r2, #0
 80050b8:	4619      	mov	r1, r3
 80050ba:	480d      	ldr	r0, [pc, #52]	; (80050f0 <MX_TIM3_Init+0xc4>)
 80050bc:	f002 fcc0 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80050c6:	f000 f931 	bl	800532c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	2204      	movs	r2, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4807      	ldr	r0, [pc, #28]	; (80050f0 <MX_TIM3_Init+0xc4>)
 80050d2:	f002 fcb5 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80050dc:	f000 f926 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80050e0:	4803      	ldr	r0, [pc, #12]	; (80050f0 <MX_TIM3_Init+0xc4>)
 80050e2:	f000 fa39 	bl	8005558 <HAL_TIM_MspPostInit>

}
 80050e6:	bf00      	nop
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200005c0 	.word	0x200005c0
 80050f4:	40000400 	.word	0x40000400

080050f8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80050fe:	f107 0320 	add.w	r3, r7, #32
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	609a      	str	r2, [r3, #8]
 8005112:	60da      	str	r2, [r3, #12]
 8005114:	611a      	str	r2, [r3, #16]
 8005116:	615a      	str	r2, [r3, #20]
 8005118:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800511a:	4b28      	ldr	r3, [pc, #160]	; (80051bc <MX_TIM4_Init+0xc4>)
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <MX_TIM4_Init+0xc8>)
 800511e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 2000 - 1;
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005122:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005126:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005128:	4b24      	ldr	r3, [pc, #144]	; (80051bc <MX_TIM4_Init+0xc4>)
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 36000 - 1;
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005130:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005134:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005138:	2200      	movs	r2, #0
 800513a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800513c:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <MX_TIM4_Init+0xc4>)
 800513e:	2200      	movs	r2, #0
 8005140:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8005142:	481e      	ldr	r0, [pc, #120]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005144:	f002 fa9a 	bl	800767c <HAL_TIM_PWM_Init>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM4_Init+0x5a>
		Error_Handler();
 800514e:	f000 f8ed 	bl	800532c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800515a:	f107 0320 	add.w	r3, r7, #32
 800515e:	4619      	mov	r1, r3
 8005160:	4816      	ldr	r0, [pc, #88]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005162:	f003 f8cb 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 800516c:	f000 f8de 	bl	800532c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005170:	2360      	movs	r3, #96	; 0x60
 8005172:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	2208      	movs	r2, #8
 8005184:	4619      	mov	r1, r3
 8005186:	480d      	ldr	r0, [pc, #52]	; (80051bc <MX_TIM4_Init+0xc4>)
 8005188:	f002 fc5a 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8005192:	f000 f8cb 	bl	800532c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	220c      	movs	r2, #12
 800519a:	4619      	mov	r1, r3
 800519c:	4807      	ldr	r0, [pc, #28]	; (80051bc <MX_TIM4_Init+0xc4>)
 800519e:	f002 fc4f 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80051a8:	f000 f8c0 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80051ac:	4803      	ldr	r0, [pc, #12]	; (80051bc <MX_TIM4_Init+0xc4>)
 80051ae:	f000 f9d3 	bl	8005558 <HAL_TIM_MspPostInit>

}
 80051b2:	bf00      	nop
 80051b4:	3728      	adds	r7, #40	; 0x28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	200004a0 	.word	0x200004a0
 80051c0:	40000800 	.word	0x40000800

080051c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <MX_USART1_UART_Init+0x50>)
 80051cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051d6:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051de:	2200      	movs	r2, #0
 80051e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051ea:	220c      	movs	r2, #12
 80051ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80051fa:	4805      	ldr	r0, [pc, #20]	; (8005210 <MX_USART1_UART_Init+0x4c>)
 80051fc:	f003 f8ee 	bl	80083dc <HAL_UART_Init>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8005206:	f000 f891 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000de8 	.word	0x20000de8
 8005214:	40013800 	.word	0x40013800

08005218 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <MX_USART3_UART_Init+0x50>)
 8005220:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 8005224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005228:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 8005232:	2200      	movs	r2, #0
 8005234:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 8005238:	2200      	movs	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 800523e:	220c      	movs	r2, #12
 8005240:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 8005244:	2200      	movs	r2, #0
 8005246:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800524e:	4805      	ldr	r0, [pc, #20]	; (8005264 <MX_USART3_UART_Init+0x4c>)
 8005250:	f003 f8c4 	bl	80083dc <HAL_UART_Init>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800525a:	f000 f867 	bl	800532c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200004e8 	.word	0x200004e8
 8005268:	40004800 	.word	0x40004800

0800526c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005272:	f107 0310 	add.w	r3, r7, #16
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	609a      	str	r2, [r3, #8]
 800527e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <MX_GPIO_Init+0xb4>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <MX_GPIO_Init+0xb4>)
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	6193      	str	r3, [r2, #24]
 800528c:	4b24      	ldr	r3, [pc, #144]	; (8005320 <MX_GPIO_Init+0xb4>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005298:	4b21      	ldr	r3, [pc, #132]	; (8005320 <MX_GPIO_Init+0xb4>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4a20      	ldr	r2, [pc, #128]	; (8005320 <MX_GPIO_Init+0xb4>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6193      	str	r3, [r2, #24]
 80052a4:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <MX_GPIO_Init+0xb4>)
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <MX_GPIO_Init+0xb4>)
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <MX_GPIO_Init+0xb4>)
 80052b6:	f043 0308 	orr.w	r3, r3, #8
 80052ba:	6193      	str	r3, [r2, #24]
 80052bc:	4b18      	ldr	r3, [pc, #96]	; (8005320 <MX_GPIO_Init+0xb4>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2110      	movs	r1, #16
 80052cc:	4815      	ldr	r0, [pc, #84]	; (8005324 <MX_GPIO_Init+0xb8>)
 80052ce:	f000 ff4b 	bl	8006168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin | MTQEN_5V_Pin, GPIO_PIN_RESET);
 80052d2:	2200      	movs	r2, #0
 80052d4:	f241 0108 	movw	r1, #4104	; 0x1008
 80052d8:	4813      	ldr	r0, [pc, #76]	; (8005328 <MX_GPIO_Init+0xbc>)
 80052da:	f000 ff45 	bl	8006168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_MAG_Pin */
	GPIO_InitStruct.Pin = CS_MAG_Pin;
 80052de:	2310      	movs	r3, #16
 80052e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052e2:	2301      	movs	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ea:	2302      	movs	r3, #2
 80052ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 80052ee:	f107 0310 	add.w	r3, r7, #16
 80052f2:	4619      	mov	r1, r3
 80052f4:	480b      	ldr	r0, [pc, #44]	; (8005324 <MX_GPIO_Init+0xb8>)
 80052f6:	f000 fdb3 	bl	8005e60 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_MPU_Pin MTQEN_5V_Pin */
	GPIO_InitStruct.Pin = CS_MPU_Pin | MTQEN_5V_Pin;
 80052fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80052fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005308:	2302      	movs	r3, #2
 800530a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800530c:	f107 0310 	add.w	r3, r7, #16
 8005310:	4619      	mov	r1, r3
 8005312:	4805      	ldr	r0, [pc, #20]	; (8005328 <MX_GPIO_Init+0xbc>)
 8005314:	f000 fda4 	bl	8005e60 <HAL_GPIO_Init>

}
 8005318:	bf00      	nop
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	40010800 	.word	0x40010800
 8005328:	40010c00 	.word	0x40010c00

0800532c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005330:	b672      	cpsid	i
}
 8005332:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005334:	e7fe      	b.n	8005334 <Error_Handler+0x8>
	...

08005338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <HAL_MspInit+0x5c>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_MspInit+0x5c>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6193      	str	r3, [r2, #24]
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <HAL_MspInit+0x5c>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <HAL_MspInit+0x5c>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <HAL_MspInit+0x5c>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	61d3      	str	r3, [r2, #28]
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <HAL_MspInit+0x5c>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_MspInit+0x60>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <HAL_MspInit+0x60>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	40021000 	.word	0x40021000
 8005398:	40010000 	.word	0x40010000

0800539c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	f107 0318 	add.w	r3, r7, #24
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a37      	ldr	r2, [pc, #220]	; (8005494 <HAL_SPI_MspInit+0xf8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d130      	bne.n	800541e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053c6:	6193      	str	r3, [r2, #24]
 80053c8:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	4a2f      	ldr	r2, [pc, #188]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	6193      	str	r3, [r2, #24]
 80053e0:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 80053ec:	23a0      	movs	r3, #160	; 0xa0
 80053ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f0:	2302      	movs	r3, #2
 80053f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053f4:	2303      	movs	r3, #3
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f8:	f107 0318 	add.w	r3, r7, #24
 80053fc:	4619      	mov	r1, r3
 80053fe:	4827      	ldr	r0, [pc, #156]	; (800549c <HAL_SPI_MspInit+0x100>)
 8005400:	f000 fd2e 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	4619      	mov	r1, r3
 8005416:	4821      	ldr	r0, [pc, #132]	; (800549c <HAL_SPI_MspInit+0x100>)
 8005418:	f000 fd22 	bl	8005e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800541c:	e036      	b.n	800548c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <HAL_SPI_MspInit+0x104>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d131      	bne.n	800548c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 800542e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005432:	61d3      	str	r3, [r2, #28]
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005440:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	4a14      	ldr	r2, [pc, #80]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 8005446:	f043 0308 	orr.w	r3, r3, #8
 800544a:	6193      	str	r3, [r2, #24]
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_SPI_MspInit+0xfc>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005458:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545e:	2302      	movs	r3, #2
 8005460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005462:	2303      	movs	r3, #3
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005466:	f107 0318 	add.w	r3, r7, #24
 800546a:	4619      	mov	r1, r3
 800546c:	480d      	ldr	r0, [pc, #52]	; (80054a4 <HAL_SPI_MspInit+0x108>)
 800546e:	f000 fcf7 	bl	8005e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005480:	f107 0318 	add.w	r3, r7, #24
 8005484:	4619      	mov	r1, r3
 8005486:	4807      	ldr	r0, [pc, #28]	; (80054a4 <HAL_SPI_MspInit+0x108>)
 8005488:	f000 fcea 	bl	8005e60 <HAL_GPIO_Init>
}
 800548c:	bf00      	nop
 800548e:	3728      	adds	r7, #40	; 0x28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40013000 	.word	0x40013000
 8005498:	40021000 	.word	0x40021000
 800549c:	40010800 	.word	0x40010800
 80054a0:	40003800 	.word	0x40003800
 80054a4:	40010c00 	.word	0x40010c00

080054a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <HAL_TIM_Base_MspInit+0x44>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <HAL_TIM_Base_MspInit+0x48>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_TIM_Base_MspInit+0x48>)
 80054c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054c4:	6193      	str	r3, [r2, #24]
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_TIM_Base_MspInit+0x48>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80054d2:	2200      	movs	r2, #0
 80054d4:	2100      	movs	r1, #0
 80054d6:	2019      	movs	r0, #25
 80054d8:	f000 fbd9 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80054dc:	2019      	movs	r0, #25
 80054de:	f000 fbf2 	bl	8005cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40021000 	.word	0x40021000

080054f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a12      	ldr	r2, [pc, #72]	; (800554c <HAL_TIM_PWM_MspInit+0x58>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10c      	bne.n	8005520 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	61d3      	str	r3, [r2, #28]
 8005512:	4b0f      	ldr	r3, [pc, #60]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800551e:	e010      	b.n	8005542 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <HAL_TIM_PWM_MspInit+0x60>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10b      	bne.n	8005542 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	61d3      	str	r3, [r2, #28]
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_TIM_PWM_MspInit+0x5c>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40000400 	.word	0x40000400
 8005550:	40021000 	.word	0x40021000
 8005554:	40000800 	.word	0x40000800

08005558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005560:	f107 0314 	add.w	r3, r7, #20
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a28      	ldr	r2, [pc, #160]	; (8005614 <HAL_TIM_MspPostInit+0xbc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d12a      	bne.n	80055ce <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005578:	4b27      	ldr	r3, [pc, #156]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	4a26      	ldr	r2, [pc, #152]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 800557e:	f043 0308 	orr.w	r3, r3, #8
 8005582:	6193      	str	r3, [r2, #24]
 8005584:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005590:	2330      	movs	r3, #48	; 0x30
 8005592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005594:	2302      	movs	r3, #2
 8005596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4619      	mov	r1, r3
 80055a2:	481e      	ldr	r0, [pc, #120]	; (800561c <HAL_TIM_MspPostInit+0xc4>)
 80055a4:	f000 fc5c 	bl	8005e60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_TIM_MspPostInit+0xc8>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_TIM_MspPostInit+0xc8>)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80055cc:	e01d      	b.n	800560a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM4)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIM_MspPostInit+0xcc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d118      	bne.n	800560a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	6193      	str	r3, [r2, #24]
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_TIM_MspPostInit+0xc0>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fa:	2302      	movs	r3, #2
 80055fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fe:	f107 0314 	add.w	r3, r7, #20
 8005602:	4619      	mov	r1, r3
 8005604:	4805      	ldr	r0, [pc, #20]	; (800561c <HAL_TIM_MspPostInit+0xc4>)
 8005606:	f000 fc2b 	bl	8005e60 <HAL_GPIO_Init>
}
 800560a:	bf00      	nop
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40000400 	.word	0x40000400
 8005618:	40021000 	.word	0x40021000
 800561c:	40010c00 	.word	0x40010c00
 8005620:	40010000 	.word	0x40010000
 8005624:	40000800 	.word	0x40000800

08005628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	; 0x30
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005630:	f107 031c 	add.w	r3, r7, #28
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	605a      	str	r2, [r3, #4]
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a46      	ldr	r2, [pc, #280]	; (800575c <HAL_UART_MspInit+0x134>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d146      	bne.n	80056d6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005648:	4b45      	ldr	r3, [pc, #276]	; (8005760 <HAL_UART_MspInit+0x138>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	4a44      	ldr	r2, [pc, #272]	; (8005760 <HAL_UART_MspInit+0x138>)
 800564e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005652:	6193      	str	r3, [r2, #24]
 8005654:	4b42      	ldr	r3, [pc, #264]	; (8005760 <HAL_UART_MspInit+0x138>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005660:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <HAL_UART_MspInit+0x138>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <HAL_UART_MspInit+0x138>)
 8005666:	f043 0308 	orr.w	r3, r3, #8
 800566a:	6193      	str	r3, [r2, #24]
 800566c:	4b3c      	ldr	r3, [pc, #240]	; (8005760 <HAL_UART_MspInit+0x138>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567c:	2302      	movs	r3, #2
 800567e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005680:	2303      	movs	r3, #3
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005684:	f107 031c 	add.w	r3, r7, #28
 8005688:	4619      	mov	r1, r3
 800568a:	4836      	ldr	r0, [pc, #216]	; (8005764 <HAL_UART_MspInit+0x13c>)
 800568c:	f000 fbe8 	bl	8005e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005694:	2300      	movs	r3, #0
 8005696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800569c:	f107 031c 	add.w	r3, r7, #28
 80056a0:	4619      	mov	r1, r3
 80056a2:	4830      	ldr	r0, [pc, #192]	; (8005764 <HAL_UART_MspInit+0x13c>)
 80056a4:	f000 fbdc 	bl	8005e60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80056a8:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <HAL_UART_MspInit+0x140>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	f043 0304 	orr.w	r3, r3, #4
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <HAL_UART_MspInit+0x140>)
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	2025      	movs	r0, #37	; 0x25
 80056ca:	f000 fae0 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056ce:	2025      	movs	r0, #37	; 0x25
 80056d0:	f000 faf9 	bl	8005cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80056d4:	e03e      	b.n	8005754 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a24      	ldr	r2, [pc, #144]	; (800576c <HAL_UART_MspInit+0x144>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d139      	bne.n	8005754 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_UART_MspInit+0x138>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_UART_MspInit+0x138>)
 80056e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ea:	61d3      	str	r3, [r2, #28]
 80056ec:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_UART_MspInit+0x138>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_UART_MspInit+0x138>)
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_UART_MspInit+0x138>)
 80056fe:	f043 0308 	orr.w	r3, r3, #8
 8005702:	6193      	str	r3, [r2, #24]
 8005704:	4b16      	ldr	r3, [pc, #88]	; (8005760 <HAL_UART_MspInit+0x138>)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005716:	2302      	movs	r3, #2
 8005718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800571a:	2303      	movs	r3, #3
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	f107 031c 	add.w	r3, r7, #28
 8005722:	4619      	mov	r1, r3
 8005724:	480f      	ldr	r0, [pc, #60]	; (8005764 <HAL_UART_MspInit+0x13c>)
 8005726:	f000 fb9b 	bl	8005e60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800572a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800572e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005730:	2300      	movs	r3, #0
 8005732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005738:	f107 031c 	add.w	r3, r7, #28
 800573c:	4619      	mov	r1, r3
 800573e:	4809      	ldr	r0, [pc, #36]	; (8005764 <HAL_UART_MspInit+0x13c>)
 8005740:	f000 fb8e 	bl	8005e60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005744:	2200      	movs	r2, #0
 8005746:	2100      	movs	r1, #0
 8005748:	2027      	movs	r0, #39	; 0x27
 800574a:	f000 faa0 	bl	8005c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800574e:	2027      	movs	r0, #39	; 0x27
 8005750:	f000 fab9 	bl	8005cc6 <HAL_NVIC_EnableIRQ>
}
 8005754:	bf00      	nop
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40013800 	.word	0x40013800
 8005760:	40021000 	.word	0x40021000
 8005764:	40010c00 	.word	0x40010c00
 8005768:	40010000 	.word	0x40010000
 800576c:	40004800 	.word	0x40004800

08005770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005774:	e7fe      	b.n	8005774 <NMI_Handler+0x4>

08005776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005776:	b480      	push	{r7}
 8005778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800577a:	e7fe      	b.n	800577a <HardFault_Handler+0x4>

0800577c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005780:	e7fe      	b.n	8005780 <MemManage_Handler+0x4>

08005782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005782:	b480      	push	{r7}
 8005784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005786:	e7fe      	b.n	8005786 <BusFault_Handler+0x4>

08005788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800578c:	e7fe      	b.n	800578c <UsageFault_Handler+0x4>

0800578e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057a6:	b480      	push	{r7}
 80057a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057b6:	f000 f953 	bl	8005a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057c4:	4802      	ldr	r0, [pc, #8]	; (80057d0 <TIM1_UP_IRQHandler+0x10>)
 80057c6:	f002 f84b 	bl	8007860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000f88 	.word	0x20000f88

080057d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <USART1_IRQHandler+0x10>)
 80057da:	f002 ff71 	bl	80086c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000de8 	.word	0x20000de8

080057e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057ec:	4802      	ldr	r0, [pc, #8]	; (80057f8 <USART3_IRQHandler+0x10>)
 80057ee:	f002 ff67 	bl	80086c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200004e8 	.word	0x200004e8

080057fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	return 1;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <_kill>:

int _kill(int pid, int sig)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005814:	f003 fcac 	bl	8009170 <__errno>
 8005818:	4603      	mov	r3, r0
 800581a:	2216      	movs	r2, #22
 800581c:	601a      	str	r2, [r3, #0]
	return -1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <_exit>:

void _exit (int status)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005832:	f04f 31ff 	mov.w	r1, #4294967295
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffe7 	bl	800580a <_kill>
	while (1) {}		/* Make sure we hang here */
 800583c:	e7fe      	b.n	800583c <_exit+0x12>

0800583e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e00a      	b.n	8005866 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005850:	f3af 8000 	nop.w
 8005854:	4601      	mov	r1, r0
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	60ba      	str	r2, [r7, #8]
 800585c:	b2ca      	uxtb	r2, r1
 800585e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3301      	adds	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	dbf0      	blt.n	8005850 <_read+0x12>
	}

return len;
 800586e:	687b      	ldr	r3, [r7, #4]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e009      	b.n	800589e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	60ba      	str	r2, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	dbf1      	blt.n	800588a <_write+0x12>
	}
	return len;
 80058a6:	687b      	ldr	r3, [r7, #4]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <_close>:

int _close(int file)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	return -1;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058d6:	605a      	str	r2, [r3, #4]
	return 0;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <_isatty>:

int _isatty(int file)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	return 1;
 80058ec:	2301      	movs	r3, #1
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005918:	4a14      	ldr	r2, [pc, #80]	; (800596c <_sbrk+0x5c>)
 800591a:	4b15      	ldr	r3, [pc, #84]	; (8005970 <_sbrk+0x60>)
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <_sbrk+0x64>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800592c:	4b11      	ldr	r3, [pc, #68]	; (8005974 <_sbrk+0x64>)
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <_sbrk+0x68>)
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005932:	4b10      	ldr	r3, [pc, #64]	; (8005974 <_sbrk+0x64>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4413      	add	r3, r2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	429a      	cmp	r2, r3
 800593e:	d207      	bcs.n	8005950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005940:	f003 fc16 	bl	8009170 <__errno>
 8005944:	4603      	mov	r3, r0
 8005946:	220c      	movs	r2, #12
 8005948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	e009      	b.n	8005964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <_sbrk+0x64>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005956:	4b07      	ldr	r3, [pc, #28]	; (8005974 <_sbrk+0x64>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	4a05      	ldr	r2, [pc, #20]	; (8005974 <_sbrk+0x64>)
 8005960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005962:	68fb      	ldr	r3, [r7, #12]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20005000 	.word	0x20005000
 8005970:	00000400 	.word	0x00000400
 8005974:	20000380 	.word	0x20000380
 8005978:	20001128 	.word	0x20001128

0800597c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005980:	bf00      	nop
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005988:	f7ff fff8 	bl	800597c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800598c:	480b      	ldr	r0, [pc, #44]	; (80059bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800598e:	490c      	ldr	r1, [pc, #48]	; (80059c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005994:	e002      	b.n	800599c <LoopCopyDataInit>

08005996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800599a:	3304      	adds	r3, #4

0800599c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800599c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800599e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059a0:	d3f9      	bcc.n	8005996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80059a4:	4c09      	ldr	r4, [pc, #36]	; (80059cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059a8:	e001      	b.n	80059ae <LoopFillZerobss>

080059aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059ac:	3204      	adds	r2, #4

080059ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059b0:	d3fb      	bcc.n	80059aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059b2:	f003 fbf5 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059b6:	f7ff f817 	bl	80049e8 <main>
  bx lr
 80059ba:	4770      	bx	lr
  ldr r0, =_sdata
 80059bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059c0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80059c4:	08011828 	.word	0x08011828
  ldr r2, =_sbss
 80059c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80059cc:	20001124 	.word	0x20001124

080059d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059d0:	e7fe      	b.n	80059d0 <ADC1_2_IRQHandler>
	...

080059d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <HAL_Init+0x28>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a07      	ldr	r2, [pc, #28]	; (80059fc <HAL_Init+0x28>)
 80059de:	f043 0310 	orr.w	r3, r3, #16
 80059e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059e4:	2003      	movs	r0, #3
 80059e6:	f000 f947 	bl	8005c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059ea:	200f      	movs	r0, #15
 80059ec:	f000 f808 	bl	8005a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059f0:	f7ff fca2 	bl	8005338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40022000 	.word	0x40022000

08005a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <HAL_InitTick+0x54>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <HAL_InitTick+0x58>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f95f 	bl	8005ce2 <HAL_SYSTICK_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e00e      	b.n	8005a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b0f      	cmp	r3, #15
 8005a32:	d80a      	bhi.n	8005a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a34:	2200      	movs	r2, #0
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	f000 f927 	bl	8005c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a40:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <HAL_InitTick+0x5c>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000004 	.word	0x20000004
 8005a58:	2000000c 	.word	0x2000000c
 8005a5c:	20000008 	.word	0x20000008

08005a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_IncTick+0x1c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_IncTick+0x20>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	4a03      	ldr	r2, [pc, #12]	; (8005a80 <HAL_IncTick+0x20>)
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	20001110 	.word	0x20001110

08005a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return uwTick;
 8005a88:	4b02      	ldr	r3, [pc, #8]	; (8005a94 <HAL_GetTick+0x10>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20001110 	.word	0x20001110

08005a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aa0:	f7ff fff0 	bl	8005a84 <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d005      	beq.n	8005abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_Delay+0x44>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005abe:	bf00      	nop
 8005ac0:	f7ff ffe0 	bl	8005a84 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d8f7      	bhi.n	8005ac0 <HAL_Delay+0x28>
  {
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005af0:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <__NVIC_SetPriorityGrouping+0x44>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b12:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <__NVIC_SetPriorityGrouping+0x44>)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	60d3      	str	r3, [r2, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <__NVIC_GetPriorityGrouping+0x18>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	0a1b      	lsrs	r3, r3, #8
 8005b32:	f003 0307 	and.w	r3, r3, #7
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	db0b      	blt.n	8005b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	f003 021f 	and.w	r2, r3, #31
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <__NVIC_EnableIRQ+0x34>)
 8005b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2001      	movs	r0, #1
 8005b66:	fa00 f202 	lsl.w	r2, r0, r2
 8005b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	e000e100 	.word	0xe000e100

08005b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	6039      	str	r1, [r7, #0]
 8005b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	db0a      	blt.n	8005ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	490c      	ldr	r1, [pc, #48]	; (8005bc8 <__NVIC_SetPriority+0x4c>)
 8005b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ba4:	e00a      	b.n	8005bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4908      	ldr	r1, [pc, #32]	; (8005bcc <__NVIC_SetPriority+0x50>)
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	3b04      	subs	r3, #4
 8005bb4:	0112      	lsls	r2, r2, #4
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	440b      	add	r3, r1
 8005bba:	761a      	strb	r2, [r3, #24]
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	e000e100 	.word	0xe000e100
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f1c3 0307 	rsb	r3, r3, #7
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf28      	it	cs
 8005bee:	2304      	movcs	r3, #4
 8005bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2b06      	cmp	r3, #6
 8005bf8:	d902      	bls.n	8005c00 <NVIC_EncodePriority+0x30>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3b03      	subs	r3, #3
 8005bfe:	e000      	b.n	8005c02 <NVIC_EncodePriority+0x32>
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	401a      	ands	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c18:	f04f 31ff 	mov.w	r1, #4294967295
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	43d9      	mvns	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c28:	4313      	orrs	r3, r2
         );
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3724      	adds	r7, #36	; 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c44:	d301      	bcc.n	8005c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c46:	2301      	movs	r3, #1
 8005c48:	e00f      	b.n	8005c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <SysTick_Config+0x40>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c52:	210f      	movs	r1, #15
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	f7ff ff90 	bl	8005b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <SysTick_Config+0x40>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <SysTick_Config+0x40>)
 8005c64:	2207      	movs	r2, #7
 8005c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000e010 	.word	0xe000e010

08005c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff2d 	bl	8005ae0 <__NVIC_SetPriorityGrouping>
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ca0:	f7ff ff42 	bl	8005b28 <__NVIC_GetPriorityGrouping>
 8005ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7ff ff90 	bl	8005bd0 <NVIC_EncodePriority>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff ff5f 	bl	8005b7c <__NVIC_SetPriority>
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	4603      	mov	r3, r0
 8005cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff35 	bl	8005b44 <__NVIC_EnableIRQ>
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ffa2 	bl	8005c34 <SysTick_Config>
 8005cf0:	4603      	mov	r3, r0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d008      	beq.n	8005d24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e020      	b.n	8005d66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 020e 	bic.w	r2, r2, #14
 8005d32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d005      	beq.n	8005d94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
 8005d92:	e051      	b.n	8005e38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 020e 	bic.w	r2, r2, #14
 8005da2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_DMA_Abort_IT+0xd4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d029      	beq.n	8005e12 <HAL_DMA_Abort_IT+0xa2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <HAL_DMA_Abort_IT+0xd8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <HAL_DMA_Abort_IT+0x9e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_DMA_Abort_IT+0xdc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01a      	beq.n	8005e08 <HAL_DMA_Abort_IT+0x98>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_DMA_Abort_IT+0xe0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d012      	beq.n	8005e02 <HAL_DMA_Abort_IT+0x92>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_DMA_Abort_IT+0xe4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00a      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x8c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_DMA_Abort_IT+0xe8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d102      	bne.n	8005df6 <HAL_DMA_Abort_IT+0x86>
 8005df0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005df4:	e00e      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dfa:	e00b      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e00:	e008      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e06:	e005      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e0c:	e002      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005e0e:	2310      	movs	r3, #16
 8005e10:	e000      	b.n	8005e14 <HAL_DMA_Abort_IT+0xa4>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <HAL_DMA_Abort_IT+0xec>)
 8005e16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
    } 
  }
  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40020008 	.word	0x40020008
 8005e48:	4002001c 	.word	0x4002001c
 8005e4c:	40020030 	.word	0x40020030
 8005e50:	40020044 	.word	0x40020044
 8005e54:	40020058 	.word	0x40020058
 8005e58:	4002006c 	.word	0x4002006c
 8005e5c:	40020000 	.word	0x40020000

08005e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b08b      	sub	sp, #44	; 0x2c
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e72:	e169      	b.n	8006148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e74:	2201      	movs	r2, #1
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	f040 8158 	bne.w	8006142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4a9a      	ldr	r2, [pc, #616]	; (8006100 <HAL_GPIO_Init+0x2a0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d05e      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
 8005e9c:	4a98      	ldr	r2, [pc, #608]	; (8006100 <HAL_GPIO_Init+0x2a0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d875      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005ea2:	4a98      	ldr	r2, [pc, #608]	; (8006104 <HAL_GPIO_Init+0x2a4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d058      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
 8005ea8:	4a96      	ldr	r2, [pc, #600]	; (8006104 <HAL_GPIO_Init+0x2a4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d86f      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005eae:	4a96      	ldr	r2, [pc, #600]	; (8006108 <HAL_GPIO_Init+0x2a8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d052      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
 8005eb4:	4a94      	ldr	r2, [pc, #592]	; (8006108 <HAL_GPIO_Init+0x2a8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d869      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005eba:	4a94      	ldr	r2, [pc, #592]	; (800610c <HAL_GPIO_Init+0x2ac>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d04c      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
 8005ec0:	4a92      	ldr	r2, [pc, #584]	; (800610c <HAL_GPIO_Init+0x2ac>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d863      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005ec6:	4a92      	ldr	r2, [pc, #584]	; (8006110 <HAL_GPIO_Init+0x2b0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d046      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
 8005ecc:	4a90      	ldr	r2, [pc, #576]	; (8006110 <HAL_GPIO_Init+0x2b0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d85d      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005ed2:	2b12      	cmp	r3, #18
 8005ed4:	d82a      	bhi.n	8005f2c <HAL_GPIO_Init+0xcc>
 8005ed6:	2b12      	cmp	r3, #18
 8005ed8:	d859      	bhi.n	8005f8e <HAL_GPIO_Init+0x12e>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <HAL_GPIO_Init+0x80>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f5b 	.word	0x08005f5b
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f47 	.word	0x08005f47
 8005eec:	08005f89 	.word	0x08005f89
 8005ef0:	08005f8f 	.word	0x08005f8f
 8005ef4:	08005f8f 	.word	0x08005f8f
 8005ef8:	08005f8f 	.word	0x08005f8f
 8005efc:	08005f8f 	.word	0x08005f8f
 8005f00:	08005f8f 	.word	0x08005f8f
 8005f04:	08005f8f 	.word	0x08005f8f
 8005f08:	08005f8f 	.word	0x08005f8f
 8005f0c:	08005f8f 	.word	0x08005f8f
 8005f10:	08005f8f 	.word	0x08005f8f
 8005f14:	08005f8f 	.word	0x08005f8f
 8005f18:	08005f8f 	.word	0x08005f8f
 8005f1c:	08005f8f 	.word	0x08005f8f
 8005f20:	08005f8f 	.word	0x08005f8f
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	4a79      	ldr	r2, [pc, #484]	; (8006114 <HAL_GPIO_Init+0x2b4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f32:	e02c      	b.n	8005f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	623b      	str	r3, [r7, #32]
          break;
 8005f3a:	e029      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	3304      	adds	r3, #4
 8005f42:	623b      	str	r3, [r7, #32]
          break;
 8005f44:	e024      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	623b      	str	r3, [r7, #32]
          break;
 8005f4e:	e01f      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	330c      	adds	r3, #12
 8005f56:	623b      	str	r3, [r7, #32]
          break;
 8005f58:	e01a      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f62:	2304      	movs	r3, #4
 8005f64:	623b      	str	r3, [r7, #32]
          break;
 8005f66:	e013      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d105      	bne.n	8005f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f70:	2308      	movs	r3, #8
 8005f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	611a      	str	r2, [r3, #16]
          break;
 8005f7a:	e009      	b.n	8005f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	615a      	str	r2, [r3, #20]
          break;
 8005f86:	e003      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	623b      	str	r3, [r7, #32]
          break;
 8005f8c:	e000      	b.n	8005f90 <HAL_GPIO_Init+0x130>
          break;
 8005f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d801      	bhi.n	8005f9a <HAL_GPIO_Init+0x13a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	e001      	b.n	8005f9e <HAL_GPIO_Init+0x13e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2bff      	cmp	r3, #255	; 0xff
 8005fa4:	d802      	bhi.n	8005fac <HAL_GPIO_Init+0x14c>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	e002      	b.n	8005fb2 <HAL_GPIO_Init+0x152>
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3b08      	subs	r3, #8
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	210f      	movs	r1, #15
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80b1 	beq.w	8006142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fe0:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <HAL_GPIO_Init+0x2b8>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	4a4c      	ldr	r2, [pc, #304]	; (8006118 <HAL_GPIO_Init+0x2b8>)
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	6193      	str	r3, [r2, #24]
 8005fec:	4b4a      	ldr	r3, [pc, #296]	; (8006118 <HAL_GPIO_Init+0x2b8>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005ff8:	4a48      	ldr	r2, [pc, #288]	; (800611c <HAL_GPIO_Init+0x2bc>)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	3302      	adds	r3, #2
 8006000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	220f      	movs	r2, #15
 8006010:	fa02 f303 	lsl.w	r3, r2, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4013      	ands	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a40      	ldr	r2, [pc, #256]	; (8006120 <HAL_GPIO_Init+0x2c0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <HAL_GPIO_Init+0x1ec>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3f      	ldr	r2, [pc, #252]	; (8006124 <HAL_GPIO_Init+0x2c4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00d      	beq.n	8006048 <HAL_GPIO_Init+0x1e8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3e      	ldr	r2, [pc, #248]	; (8006128 <HAL_GPIO_Init+0x2c8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d007      	beq.n	8006044 <HAL_GPIO_Init+0x1e4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3d      	ldr	r2, [pc, #244]	; (800612c <HAL_GPIO_Init+0x2cc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <HAL_GPIO_Init+0x1e0>
 800603c:	2303      	movs	r3, #3
 800603e:	e006      	b.n	800604e <HAL_GPIO_Init+0x1ee>
 8006040:	2304      	movs	r3, #4
 8006042:	e004      	b.n	800604e <HAL_GPIO_Init+0x1ee>
 8006044:	2302      	movs	r3, #2
 8006046:	e002      	b.n	800604e <HAL_GPIO_Init+0x1ee>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_GPIO_Init+0x1ee>
 800604c:	2300      	movs	r3, #0
 800604e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006050:	f002 0203 	and.w	r2, r2, #3
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	4093      	lsls	r3, r2
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800605e:	492f      	ldr	r1, [pc, #188]	; (800611c <HAL_GPIO_Init+0x2bc>)
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	3302      	adds	r3, #2
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	492c      	ldr	r1, [pc, #176]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4313      	orrs	r3, r2
 8006082:	608b      	str	r3, [r1, #8]
 8006084:	e006      	b.n	8006094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006086:	4b2a      	ldr	r3, [pc, #168]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	43db      	mvns	r3, r3
 800608e:	4928      	ldr	r1, [pc, #160]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 8006090:	4013      	ands	r3, r2
 8006092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80060a0:	4b23      	ldr	r3, [pc, #140]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	4922      	ldr	r1, [pc, #136]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60cb      	str	r3, [r1, #12]
 80060ac:	e006      	b.n	80060bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	491e      	ldr	r1, [pc, #120]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80060c8:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	4918      	ldr	r1, [pc, #96]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
 80060d4:	e006      	b.n	80060e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	43db      	mvns	r3, r3
 80060de:	4914      	ldr	r1, [pc, #80]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d021      	beq.n	8006134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	490e      	ldr	r1, [pc, #56]	; (8006130 <HAL_GPIO_Init+0x2d0>)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
 80060fc:	e021      	b.n	8006142 <HAL_GPIO_Init+0x2e2>
 80060fe:	bf00      	nop
 8006100:	10320000 	.word	0x10320000
 8006104:	10310000 	.word	0x10310000
 8006108:	10220000 	.word	0x10220000
 800610c:	10210000 	.word	0x10210000
 8006110:	10120000 	.word	0x10120000
 8006114:	10110000 	.word	0x10110000
 8006118:	40021000 	.word	0x40021000
 800611c:	40010000 	.word	0x40010000
 8006120:	40010800 	.word	0x40010800
 8006124:	40010c00 	.word	0x40010c00
 8006128:	40011000 	.word	0x40011000
 800612c:	40011400 	.word	0x40011400
 8006130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_GPIO_Init+0x304>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	43db      	mvns	r3, r3
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <HAL_GPIO_Init+0x304>)
 800613e:	4013      	ands	r3, r2
 8006140:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	3301      	adds	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	f47f ae8e 	bne.w	8005e74 <HAL_GPIO_Init+0x14>
  }
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	372c      	adds	r7, #44	; 0x2c
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	40010400 	.word	0x40010400

08006168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
 8006174:	4613      	mov	r3, r2
 8006176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006178:	787b      	ldrb	r3, [r7, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006184:	e003      	b.n	800618e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	041a      	lsls	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	611a      	str	r2, [r3, #16]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e26c      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8087 	beq.w	80062c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061b8:	4b92      	ldr	r3, [pc, #584]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d00c      	beq.n	80061de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061c4:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 030c 	and.w	r3, r3, #12
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d112      	bne.n	80061f6 <HAL_RCC_OscConfig+0x5e>
 80061d0:	4b8c      	ldr	r3, [pc, #560]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d10b      	bne.n	80061f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061de:	4b89      	ldr	r3, [pc, #548]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d06c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x12c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d168      	bne.n	80062c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e246      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fe:	d106      	bne.n	800620e <HAL_RCC_OscConfig+0x76>
 8006200:	4b80      	ldr	r3, [pc, #512]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a7f      	ldr	r2, [pc, #508]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e02e      	b.n	800626c <HAL_RCC_OscConfig+0xd4>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10c      	bne.n	8006230 <HAL_RCC_OscConfig+0x98>
 8006216:	4b7b      	ldr	r3, [pc, #492]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7a      	ldr	r2, [pc, #488]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b78      	ldr	r3, [pc, #480]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a77      	ldr	r2, [pc, #476]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e01d      	b.n	800626c <HAL_RCC_OscConfig+0xd4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0xbc>
 800623a:	4b72      	ldr	r3, [pc, #456]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a71      	ldr	r2, [pc, #452]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4b6f      	ldr	r3, [pc, #444]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a6e      	ldr	r2, [pc, #440]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e00b      	b.n	800626c <HAL_RCC_OscConfig+0xd4>
 8006254:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6a      	ldr	r2, [pc, #424]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4b68      	ldr	r3, [pc, #416]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a67      	ldr	r2, [pc, #412]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d013      	beq.n	800629c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006274:	f7ff fc06 	bl	8005a84 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800627c:	f7ff fc02 	bl	8005a84 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	; 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1fa      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	4b5d      	ldr	r3, [pc, #372]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0xe4>
 800629a:	e014      	b.n	80062c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7ff fbf2 	bl	8005a84 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a4:	f7ff fbee 	bl	8005a84 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	; 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e1e6      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b6:	4b53      	ldr	r3, [pc, #332]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x10c>
 80062c2:	e000      	b.n	80062c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d063      	beq.n	800639a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062d2:	4b4c      	ldr	r3, [pc, #304]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062de:	4b49      	ldr	r3, [pc, #292]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d11c      	bne.n	8006324 <HAL_RCC_OscConfig+0x18c>
 80062ea:	4b46      	ldr	r3, [pc, #280]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d116      	bne.n	8006324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f6:	4b43      	ldr	r3, [pc, #268]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_RCC_OscConfig+0x176>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d001      	beq.n	800630e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e1ba      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630e:	4b3d      	ldr	r3, [pc, #244]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	4939      	ldr	r1, [pc, #228]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006322:	e03a      	b.n	800639a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d020      	beq.n	800636e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <HAL_RCC_OscConfig+0x270>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006332:	f7ff fba7 	bl	8005a84 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7ff fba3 	bl	8005a84 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e19b      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006358:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4927      	ldr	r1, [pc, #156]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]
 800636c:	e015      	b.n	800639a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800636e:	4b26      	ldr	r3, [pc, #152]	; (8006408 <HAL_RCC_OscConfig+0x270>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006374:	f7ff fb86 	bl	8005a84 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637c:	f7ff fb82 	bl	8005a84 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e17a      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d03a      	beq.n	800641c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d019      	beq.n	80063e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ae:	4b17      	ldr	r3, [pc, #92]	; (800640c <HAL_RCC_OscConfig+0x274>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b4:	f7ff fb66 	bl	8005a84 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063bc:	f7ff fb62 	bl	8005a84 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e15a      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <HAL_RCC_OscConfig+0x26c>)
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063da:	2001      	movs	r0, #1
 80063dc:	f000 facc 	bl	8006978 <RCC_Delay>
 80063e0:	e01c      	b.n	800641c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <HAL_RCC_OscConfig+0x274>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e8:	f7ff fb4c 	bl	8005a84 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ee:	e00f      	b.n	8006410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f0:	f7ff fb48 	bl	8005a84 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d908      	bls.n	8006410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e140      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
 8006402:	bf00      	nop
 8006404:	40021000 	.word	0x40021000
 8006408:	42420000 	.word	0x42420000
 800640c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	4b9e      	ldr	r3, [pc, #632]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e9      	bne.n	80063f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80a6 	beq.w	8006576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b97      	ldr	r3, [pc, #604]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	4b94      	ldr	r3, [pc, #592]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	4a93      	ldr	r2, [pc, #588]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006444:	61d3      	str	r3, [r2, #28]
 8006446:	4b91      	ldr	r3, [pc, #580]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644e:	60bb      	str	r3, [r7, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006456:	4b8e      	ldr	r3, [pc, #568]	; (8006690 <HAL_RCC_OscConfig+0x4f8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d118      	bne.n	8006494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006462:	4b8b      	ldr	r3, [pc, #556]	; (8006690 <HAL_RCC_OscConfig+0x4f8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a8a      	ldr	r2, [pc, #552]	; (8006690 <HAL_RCC_OscConfig+0x4f8>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646e:	f7ff fb09 	bl	8005a84 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006476:	f7ff fb05 	bl	8005a84 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b64      	cmp	r3, #100	; 0x64
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e0fd      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006488:	4b81      	ldr	r3, [pc, #516]	; (8006690 <HAL_RCC_OscConfig+0x4f8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d106      	bne.n	80064aa <HAL_RCC_OscConfig+0x312>
 800649c:	4b7b      	ldr	r3, [pc, #492]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4a7a      	ldr	r2, [pc, #488]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	6213      	str	r3, [r2, #32]
 80064a8:	e02d      	b.n	8006506 <HAL_RCC_OscConfig+0x36e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <HAL_RCC_OscConfig+0x334>
 80064b2:	4b76      	ldr	r3, [pc, #472]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	4a75      	ldr	r2, [pc, #468]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	6213      	str	r3, [r2, #32]
 80064be:	4b73      	ldr	r3, [pc, #460]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	4a72      	ldr	r2, [pc, #456]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	6213      	str	r3, [r2, #32]
 80064ca:	e01c      	b.n	8006506 <HAL_RCC_OscConfig+0x36e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b05      	cmp	r3, #5
 80064d2:	d10c      	bne.n	80064ee <HAL_RCC_OscConfig+0x356>
 80064d4:	4b6d      	ldr	r3, [pc, #436]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a6c      	ldr	r2, [pc, #432]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064da:	f043 0304 	orr.w	r3, r3, #4
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	4a69      	ldr	r2, [pc, #420]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6213      	str	r3, [r2, #32]
 80064ec:	e00b      	b.n	8006506 <HAL_RCC_OscConfig+0x36e>
 80064ee:	4b67      	ldr	r3, [pc, #412]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4a66      	ldr	r2, [pc, #408]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	6213      	str	r3, [r2, #32]
 80064fa:	4b64      	ldr	r3, [pc, #400]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	4a63      	ldr	r2, [pc, #396]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006500:	f023 0304 	bic.w	r3, r3, #4
 8006504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650e:	f7ff fab9 	bl	8005a84 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7ff fab5 	bl	8005a84 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e0ab      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652c:	4b57      	ldr	r3, [pc, #348]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ee      	beq.n	8006516 <HAL_RCC_OscConfig+0x37e>
 8006538:	e014      	b.n	8006564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653a:	f7ff faa3 	bl	8005a84 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006540:	e00a      	b.n	8006558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7ff fa9f 	bl	8005a84 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e095      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006558:	4b4c      	ldr	r3, [pc, #304]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ee      	bne.n	8006542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656a:	4b48      	ldr	r3, [pc, #288]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4a47      	ldr	r2, [pc, #284]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8081 	beq.w	8006682 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006580:	4b42      	ldr	r3, [pc, #264]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	2b08      	cmp	r3, #8
 800658a:	d061      	beq.n	8006650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d146      	bne.n	8006622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006594:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <HAL_RCC_OscConfig+0x4fc>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659a:	f7ff fa73 	bl	8005a84 <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a2:	f7ff fa6f 	bl	8005a84 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e067      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b4:	4b35      	ldr	r3, [pc, #212]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1f0      	bne.n	80065a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c8:	d108      	bne.n	80065dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	492d      	ldr	r1, [pc, #180]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065dc:	4b2b      	ldr	r3, [pc, #172]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a19      	ldr	r1, [r3, #32]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	430b      	orrs	r3, r1
 80065ee:	4927      	ldr	r1, [pc, #156]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x4fc>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fa:	f7ff fa43 	bl	8005a84 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006602:	f7ff fa3f 	bl	8005a84 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e037      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x46a>
 8006620:	e02f      	b.n	8006682 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006622:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <HAL_RCC_OscConfig+0x4fc>)
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7ff fa2c 	bl	8005a84 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006630:	f7ff fa28 	bl	8005a84 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e020      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x498>
 800664e:	e018      	b.n	8006682 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e013      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_OscConfig+0x4f4>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	429a      	cmp	r2, r3
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d001      	beq.n	8006682 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	40007000 	.word	0x40007000
 8006694:	42420060 	.word	0x42420060

08006698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0d0      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ac:	4b6a      	ldr	r3, [pc, #424]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d910      	bls.n	80066dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b67      	ldr	r3, [pc, #412]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 0207 	bic.w	r2, r3, #7
 80066c2:	4965      	ldr	r1, [pc, #404]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ca:	4b63      	ldr	r3, [pc, #396]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d001      	beq.n	80066dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0b8      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d020      	beq.n	800672a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066f4:	4b59      	ldr	r3, [pc, #356]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a58      	ldr	r2, [pc, #352]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 80066fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800670c:	4b53      	ldr	r3, [pc, #332]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4a52      	ldr	r2, [pc, #328]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006716:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006718:	4b50      	ldr	r3, [pc, #320]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	494d      	ldr	r1, [pc, #308]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006726:	4313      	orrs	r3, r2
 8006728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d040      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d107      	bne.n	800674e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	4b47      	ldr	r3, [pc, #284]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d115      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e07f      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006756:	4b41      	ldr	r3, [pc, #260]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e073      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006766:	4b3d      	ldr	r3, [pc, #244]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e06b      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f023 0203 	bic.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4936      	ldr	r1, [pc, #216]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006784:	4313      	orrs	r3, r2
 8006786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006788:	f7ff f97c 	bl	8005a84 <HAL_GetTick>
 800678c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	e00a      	b.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006790:	f7ff f978 	bl	8005a84 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e053      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	4b2d      	ldr	r3, [pc, #180]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f003 020c 	and.w	r2, r3, #12
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d1eb      	bne.n	8006790 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d210      	bcs.n	80067e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c6:	4b24      	ldr	r3, [pc, #144]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f023 0207 	bic.w	r2, r3, #7
 80067ce:	4922      	ldr	r1, [pc, #136]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d001      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e032      	b.n	800684e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4916      	ldr	r1, [pc, #88]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006802:	4313      	orrs	r3, r2
 8006804:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	490e      	ldr	r1, [pc, #56]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006822:	4313      	orrs	r3, r2
 8006824:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006826:	f000 f821 	bl	800686c <HAL_RCC_GetSysClockFreq>
 800682a:	4602      	mov	r2, r0
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	490a      	ldr	r1, [pc, #40]	; (8006860 <HAL_RCC_ClockConfig+0x1c8>)
 8006838:	5ccb      	ldrb	r3, [r1, r3]
 800683a:	fa22 f303 	lsr.w	r3, r2, r3
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <HAL_RCC_ClockConfig+0x1cc>)
 8006840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <HAL_RCC_ClockConfig+0x1d0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f8da 	bl	8005a00 <HAL_InitTick>

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40022000 	.word	0x40022000
 800685c:	40021000 	.word	0x40021000
 8006860:	08010d08 	.word	0x08010d08
 8006864:	20000004 	.word	0x20000004
 8006868:	20000008 	.word	0x20000008

0800686c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006886:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <HAL_RCC_GetSysClockFreq+0x94>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b04      	cmp	r3, #4
 8006894:	d002      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x30>
 8006896:	2b08      	cmp	r3, #8
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x36>
 800689a:	e027      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800689c:	4b19      	ldr	r3, [pc, #100]	; (8006904 <HAL_RCC_GetSysClockFreq+0x98>)
 800689e:	613b      	str	r3, [r7, #16]
      break;
 80068a0:	e027      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	0c9b      	lsrs	r3, r3, #18
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	4a17      	ldr	r2, [pc, #92]	; (8006908 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068ac:	5cd3      	ldrb	r3, [r2, r3]
 80068ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_RCC_GetSysClockFreq+0x94>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	0c5b      	lsrs	r3, r3, #17
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	4a11      	ldr	r2, [pc, #68]	; (800690c <HAL_RCC_GetSysClockFreq+0xa0>)
 80068c6:	5cd3      	ldrb	r3, [r2, r3]
 80068c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <HAL_RCC_GetSysClockFreq+0x98>)
 80068ce:	fb02 f203 	mul.w	r2, r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e004      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <HAL_RCC_GetSysClockFreq+0xa4>)
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	613b      	str	r3, [r7, #16]
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_RCC_GetSysClockFreq+0x98>)
 80068ee:	613b      	str	r3, [r7, #16]
      break;
 80068f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f2:	693b      	ldr	r3, [r7, #16]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40021000 	.word	0x40021000
 8006904:	007a1200 	.word	0x007a1200
 8006908:	08010d20 	.word	0x08010d20
 800690c:	08010d30 	.word	0x08010d30
 8006910:	003d0900 	.word	0x003d0900

08006914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <HAL_RCC_GetHCLKFreq+0x10>)
 800691a:	681b      	ldr	r3, [r3, #0]
}
 800691c:	4618      	mov	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	20000004 	.word	0x20000004

08006928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800692c:	f7ff fff2 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4903      	ldr	r1, [pc, #12]	; (800694c <HAL_RCC_GetPCLK1Freq+0x24>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000
 800694c:	08010d18 	.word	0x08010d18

08006950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006954:	f7ff ffde 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8006958:	4602      	mov	r2, r0
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	0adb      	lsrs	r3, r3, #11
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	4903      	ldr	r1, [pc, #12]	; (8006974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006966:	5ccb      	ldrb	r3, [r1, r3]
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000
 8006974:	08010d18 	.word	0x08010d18

08006978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <RCC_Delay+0x34>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <RCC_Delay+0x38>)
 8006986:	fba2 2303 	umull	r2, r3, r2, r3
 800698a:	0a5b      	lsrs	r3, r3, #9
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006994:	bf00      	nop
  }
  while (Delay --);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1e5a      	subs	r2, r3, #1
 800699a:	60fa      	str	r2, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f9      	bne.n	8006994 <RCC_Delay+0x1c>
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	20000004 	.word	0x20000004
 80069b0:	10624dd3 	.word	0x10624dd3

080069b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e076      	b.n	8006ab4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e005      	b.n	80069ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fe fcc8 	bl	800539c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a70:	ea42 0103 	orr.w	r1, r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	0c1a      	lsrs	r2, r3, #16
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f002 0204 	and.w	r2, r2, #4
 8006a92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fe ffda 	bl	8005a84 <HAL_GetTick>
 8006ad0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d001      	beq.n	8006ae6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e12a      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_SPI_Transmit+0x36>
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e122      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_SPI_Transmit+0x48>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e11b      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b52:	d10f      	bne.n	8006b74 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d007      	beq.n	8006b92 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9a:	d152      	bne.n	8006c42 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_SPI_Transmit+0xee>
 8006ba4:	8b7b      	ldrh	r3, [r7, #26]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d145      	bne.n	8006c36 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	881a      	ldrh	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	1c9a      	adds	r2, r3, #2
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bce:	e032      	b.n	8006c36 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d112      	bne.n	8006c04 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	881a      	ldrh	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c02:	e018      	b.n	8006c36 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c04:	f7fe ff3e 	bl	8005a84 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d803      	bhi.n	8006c1c <HAL_SPI_Transmit+0x160>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d102      	bne.n	8006c22 <HAL_SPI_Transmit+0x166>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e082      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1c7      	bne.n	8006bd0 <HAL_SPI_Transmit+0x114>
 8006c40:	e053      	b.n	8006cea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Transmit+0x194>
 8006c4a:	8b7b      	ldrh	r3, [r7, #26]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d147      	bne.n	8006ce0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c76:	e033      	b.n	8006ce0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d113      	bne.n	8006cae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cac:	e018      	b.n	8006ce0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cae:	f7fe fee9 	bl	8005a84 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_Transmit+0x20a>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_Transmit+0x210>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e02d      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1c6      	bne.n	8006c78 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fbc4 	bl	800747c <SPI_EndRxTxTransaction>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
  }
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d001      	beq.n	8006d64 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
 8006d62:	e104      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d6c:	d112      	bne.n	8006d94 <HAL_SPI_Receive+0x50>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10e      	bne.n	8006d94 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f8f3 	bl	8006f76 <HAL_SPI_TransmitReceive>
 8006d90:	4603      	mov	r3, r0
 8006d92:	e0ec      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d94:	f7fe fe76 	bl	8005a84 <HAL_GetTick>
 8006d98:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_Receive+0x62>
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e0e1      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_SPI_Receive+0x74>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e0da      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e06:	d10f      	bne.n	8006e28 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d007      	beq.n	8006e46 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d170      	bne.n	8006f30 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e4e:	e035      	b.n	8006ebc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d115      	bne.n	8006e8a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f103 020c 	add.w	r2, r3, #12
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e88:	e018      	b.n	8006ebc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e8a:	f7fe fdfb 	bl	8005a84 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d803      	bhi.n	8006ea2 <HAL_SPI_Receive+0x15e>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d102      	bne.n	8006ea8 <HAL_SPI_Receive+0x164>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e058      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1c4      	bne.n	8006e50 <HAL_SPI_Receive+0x10c>
 8006ec6:	e038      	b.n	8006f3a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d113      	bne.n	8006efe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006efc:	e018      	b.n	8006f30 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efe:	f7fe fdc1 	bl	8005a84 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d803      	bhi.n	8006f16 <HAL_SPI_Receive+0x1d2>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d102      	bne.n	8006f1c <HAL_SPI_Receive+0x1d8>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e01e      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1c6      	bne.n	8006ec8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fa4a 	bl	80073d8 <SPI_EndRxTransaction>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b08a      	sub	sp, #40	; 0x28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f84:	2301      	movs	r3, #1
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f88:	f7fe fd7c 	bl	8005a84 <HAL_GetTick>
 8006f8c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f94:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f9c:	887b      	ldrh	r3, [r7, #2]
 8006f9e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa0:	7ffb      	ldrb	r3, [r7, #31]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_SPI_TransmitReceive+0x4a>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fac:	d106      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x46>
 8006fb6:	7ffb      	ldrb	r3, [r7, #31]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d001      	beq.n	8006fc0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e17f      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_SPI_TransmitReceive+0x5c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_TransmitReceive+0x5c>
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e174      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x6e>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e16d      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d003      	beq.n	8007000 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2205      	movs	r2, #5
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	887a      	ldrh	r2, [r7, #2]
 8007016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	887a      	ldrh	r2, [r7, #2]
 8007022:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	887a      	ldrh	r2, [r7, #2]
 8007028:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d007      	beq.n	8007054 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	d17e      	bne.n	800715c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SPI_TransmitReceive+0xf6>
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d16c      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007090:	e059      	b.n	8007146 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d11b      	bne.n	80070d8 <HAL_SPI_TransmitReceive+0x162>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d016      	beq.n	80070d8 <HAL_SPI_TransmitReceive+0x162>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d113      	bne.n	80070d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	881a      	ldrh	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	1c9a      	adds	r2, r3, #2
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d119      	bne.n	800711a <HAL_SPI_TransmitReceive+0x1a4>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d014      	beq.n	800711a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	b292      	uxth	r2, r2
 80070fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007116:	2301      	movs	r3, #1
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800711a:	f7fe fcb3 	bl	8005a84 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	429a      	cmp	r2, r3
 8007128:	d80d      	bhi.n	8007146 <HAL_SPI_TransmitReceive+0x1d0>
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d009      	beq.n	8007146 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0bc      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1a0      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x11c>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d19b      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x11c>
 800715a:	e082      	b.n	8007262 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_SPI_TransmitReceive+0x1f4>
 8007164:	8afb      	ldrh	r3, [r7, #22]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d171      	bne.n	800724e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007190:	e05d      	b.n	800724e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b02      	cmp	r3, #2
 800719e:	d11c      	bne.n	80071da <HAL_SPI_TransmitReceive+0x264>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d017      	beq.n	80071da <HAL_SPI_TransmitReceive+0x264>
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d114      	bne.n	80071da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d119      	bne.n	800721c <HAL_SPI_TransmitReceive+0x2a6>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d014      	beq.n	800721c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007218:	2301      	movs	r3, #1
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800721c:	f7fe fc32 	bl	8005a84 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007228:	429a      	cmp	r2, r3
 800722a:	d803      	bhi.n	8007234 <HAL_SPI_TransmitReceive+0x2be>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d102      	bne.n	800723a <HAL_SPI_TransmitReceive+0x2c4>
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e038      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d19c      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x21c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d197      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007262:	6a3a      	ldr	r2, [r7, #32]
 8007264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f908 	bl	800747c <SPI_EndRxTxTransaction>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d008      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2220      	movs	r2, #32
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e01d      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80072be:	2300      	movs	r3, #0
  }
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3728      	adds	r7, #40	; 0x28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	4613      	mov	r3, r2
 80072d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072d8:	f7fe fbd4 	bl	8005a84 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072e8:	f7fe fbcc 	bl	8005a84 <HAL_GetTick>
 80072ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072ee:	4b39      	ldr	r3, [pc, #228]	; (80073d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	015b      	lsls	r3, r3, #5
 80072f4:	0d1b      	lsrs	r3, r3, #20
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fe:	e054      	b.n	80073aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d050      	beq.n	80073aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007308:	f7fe fbbc 	bl	8005a84 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	429a      	cmp	r2, r3
 8007316:	d902      	bls.n	800731e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d13d      	bne.n	800739a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800732c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007336:	d111      	bne.n	800735c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007340:	d004      	beq.n	800734c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734a:	d107      	bne.n	800735c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800735a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007364:	d10f      	bne.n	8007386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e017      	b.n	80073ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d19b      	bne.n	8007300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000004 	.word	0x20000004

080073d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ec:	d111      	bne.n	8007412 <SPI_EndRxTransaction+0x3a>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f6:	d004      	beq.n	8007402 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d107      	bne.n	8007412 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007410:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800741a:	d117      	bne.n	800744c <SPI_EndRxTransaction+0x74>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007424:	d112      	bne.n	800744c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	2101      	movs	r1, #1
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff ff49 	bl	80072c8 <SPI_WaitFlagStateUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01a      	beq.n	8007472 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e013      	b.n	8007474 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	2180      	movs	r1, #128	; 0x80
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff ff36 	bl	80072c8 <SPI_WaitFlagStateUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e000      	b.n	8007474 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2201      	movs	r2, #1
 8007490:	2102      	movs	r1, #2
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7ff ff18 	bl	80072c8 <SPI_WaitFlagStateUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a2:	f043 0220 	orr.w	r2, r3, #32
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e013      	b.n	80074d6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff ff05 	bl	80072c8 <SPI_WaitFlagStateUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f043 0220 	orr.w	r2, r3, #32
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e000      	b.n	80074d6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e041      	b.n	8007574 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fd ffcf 	bl	80054a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f000 fc3d 	bl	8007d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	d001      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e03a      	b.n	800760a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_TIM_Base_Start_IT+0x98>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_TIM_Base_Start_IT+0x58>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075be:	d009      	beq.n	80075d4 <HAL_TIM_Base_Start_IT+0x58>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <HAL_TIM_Base_Start_IT+0x9c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_TIM_Base_Start_IT+0x58>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <HAL_TIM_Base_Start_IT+0xa0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d111      	bne.n	80075f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d010      	beq.n	8007608 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f042 0201 	orr.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f6:	e007      	b.n	8007608 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800

08007620 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10f      	bne.n	8007668 <HAL_TIM_Base_Stop_IT+0x48>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	f240 4344 	movw	r3, #1092	; 0x444
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <HAL_TIM_Base_Stop_IT+0x48>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e041      	b.n	8007712 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fd ff26 	bl	80054f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f000 fb6e 	bl	8007d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d109      	bne.n	8007740 <HAL_TIM_PWM_Start+0x24>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	e022      	b.n	8007786 <HAL_TIM_PWM_Start+0x6a>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d109      	bne.n	800775a <HAL_TIM_PWM_Start+0x3e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	e015      	b.n	8007786 <HAL_TIM_PWM_Start+0x6a>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b08      	cmp	r3, #8
 800775e:	d109      	bne.n	8007774 <HAL_TIM_PWM_Start+0x58>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	bf14      	ite	ne
 800776c:	2301      	movne	r3, #1
 800776e:	2300      	moveq	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	e008      	b.n	8007786 <HAL_TIM_PWM_Start+0x6a>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	bf14      	ite	ne
 8007780:	2301      	movne	r3, #1
 8007782:	2300      	moveq	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e05e      	b.n	800784c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_TIM_PWM_Start+0x82>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800779c:	e013      	b.n	80077c6 <HAL_TIM_PWM_Start+0xaa>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d104      	bne.n	80077ae <HAL_TIM_PWM_Start+0x92>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077ac:	e00b      	b.n	80077c6 <HAL_TIM_PWM_Start+0xaa>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d104      	bne.n	80077be <HAL_TIM_PWM_Start+0xa2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077bc:	e003      	b.n	80077c6 <HAL_TIM_PWM_Start+0xaa>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2201      	movs	r2, #1
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fd70 	bl	80082b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <HAL_TIM_PWM_Start+0x138>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d107      	bne.n	80077ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_TIM_PWM_Start+0x138>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00e      	beq.n	8007816 <HAL_TIM_PWM_Start+0xfa>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007800:	d009      	beq.n	8007816 <HAL_TIM_PWM_Start+0xfa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <HAL_TIM_PWM_Start+0x13c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <HAL_TIM_PWM_Start+0xfa>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a12      	ldr	r2, [pc, #72]	; (800785c <HAL_TIM_PWM_Start+0x140>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d111      	bne.n	800783a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d010      	beq.n	800784a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007838:	e007      	b.n	800784a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0201 	orr.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40000400 	.word	0x40000400
 800785c:	40000800 	.word	0x40000800

08007860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d020      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01b      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0202 	mvn.w	r2, #2
 8007894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa5a 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 80078b0:	e005      	b.n	80078be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa4d 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa5c 	bl	8007d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d020      	beq.n	8007910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01b      	beq.n	8007910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa34 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa27 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fa36 	bl	8007d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d020      	beq.n	800795c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01b      	beq.n	800795c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0208 	mvn.w	r2, #8
 800792c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2204      	movs	r2, #4
 8007932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa0e 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 8007948:	e005      	b.n	8007956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa01 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa10 	bl	8007d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 0310 	and.w	r3, r3, #16
 8007962:	2b00      	cmp	r3, #0
 8007964:	d020      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0210 	mvn.w	r2, #16
 8007978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2208      	movs	r2, #8
 800797e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9e8 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9db 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9ea 	bl	8007d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00c      	beq.n	80079cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0201 	mvn.w	r2, #1
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7fc fe70 	bl	80046ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00c      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fced 	bl	80083ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00c      	beq.n	8007a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d007      	beq.n	8007a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9ba 	bl	8007d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00c      	beq.n	8007a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0220 	mvn.w	r2, #32
 8007a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fcc0 	bl	80083b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0ae      	b.n	8007bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b0c      	cmp	r3, #12
 8007a6a:	f200 809f 	bhi.w	8007bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007aa9 	.word	0x08007aa9
 8007a78:	08007bad 	.word	0x08007bad
 8007a7c:	08007bad 	.word	0x08007bad
 8007a80:	08007bad 	.word	0x08007bad
 8007a84:	08007ae9 	.word	0x08007ae9
 8007a88:	08007bad 	.word	0x08007bad
 8007a8c:	08007bad 	.word	0x08007bad
 8007a90:	08007bad 	.word	0x08007bad
 8007a94:	08007b2b 	.word	0x08007b2b
 8007a98:	08007bad 	.word	0x08007bad
 8007a9c:	08007bad 	.word	0x08007bad
 8007aa0:	08007bad 	.word	0x08007bad
 8007aa4:	08007b6b 	.word	0x08007b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f9e2 	bl	8007e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0208 	orr.w	r2, r2, #8
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	619a      	str	r2, [r3, #24]
      break;
 8007ae6:	e064      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fa28 	bl	8007f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6999      	ldr	r1, [r3, #24]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	619a      	str	r2, [r3, #24]
      break;
 8007b28:	e043      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa71 	bl	8008018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0208 	orr.w	r2, r2, #8
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0204 	bic.w	r2, r2, #4
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	61da      	str	r2, [r3, #28]
      break;
 8007b68:	e023      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fabb 	bl	80080ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69d9      	ldr	r1, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	021a      	lsls	r2, r3, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	61da      	str	r2, [r3, #28]
      break;
 8007baa:	e002      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e0b4      	b.n	8007d4a <HAL_TIM_ConfigClockSource+0x186>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c18:	d03e      	beq.n	8007c98 <HAL_TIM_ConfigClockSource+0xd4>
 8007c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c1e:	f200 8087 	bhi.w	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c26:	f000 8086 	beq.w	8007d36 <HAL_TIM_ConfigClockSource+0x172>
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d87f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c30:	2b70      	cmp	r3, #112	; 0x70
 8007c32:	d01a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0xa6>
 8007c34:	2b70      	cmp	r3, #112	; 0x70
 8007c36:	d87b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c38:	2b60      	cmp	r3, #96	; 0x60
 8007c3a:	d050      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x11a>
 8007c3c:	2b60      	cmp	r3, #96	; 0x60
 8007c3e:	d877      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c40:	2b50      	cmp	r3, #80	; 0x50
 8007c42:	d03c      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0xfa>
 8007c44:	2b50      	cmp	r3, #80	; 0x50
 8007c46:	d873      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d058      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x13a>
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d86f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c50:	2b30      	cmp	r3, #48	; 0x30
 8007c52:	d064      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c54:	2b30      	cmp	r3, #48	; 0x30
 8007c56:	d86b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d060      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d867      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05c      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d05a      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c68:	e062      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6899      	ldr	r1, [r3, #8]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f000 fafc 	bl	8008276 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	609a      	str	r2, [r3, #8]
      break;
 8007c96:	e04f      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6899      	ldr	r1, [r3, #8]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f000 fae5 	bl	8008276 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cba:	609a      	str	r2, [r3, #8]
      break;
 8007cbc:	e03c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f000 fa5c 	bl	8008188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2150      	movs	r1, #80	; 0x50
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fab3 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007cdc:	e02c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f000 fa7a 	bl	80081e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2160      	movs	r1, #96	; 0x60
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 faa3 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007cfc:	e01c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 fa3c 	bl	8008188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fa93 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e00c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f000 fa8a 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007d2e:	e003      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      break;
 8007d34:	e000      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr

08007d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr
	...

08007d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a2f      	ldr	r2, [pc, #188]	; (8007e6c <TIM_Base_SetConfig+0xd0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00b      	beq.n	8007dcc <TIM_Base_SetConfig+0x30>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d007      	beq.n	8007dcc <TIM_Base_SetConfig+0x30>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a2c      	ldr	r2, [pc, #176]	; (8007e70 <TIM_Base_SetConfig+0xd4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0x30>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a2b      	ldr	r2, [pc, #172]	; (8007e74 <TIM_Base_SetConfig+0xd8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d108      	bne.n	8007dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a22      	ldr	r2, [pc, #136]	; (8007e6c <TIM_Base_SetConfig+0xd0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00b      	beq.n	8007dfe <TIM_Base_SetConfig+0x62>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dec:	d007      	beq.n	8007dfe <TIM_Base_SetConfig+0x62>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a1f      	ldr	r2, [pc, #124]	; (8007e70 <TIM_Base_SetConfig+0xd4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_Base_SetConfig+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <TIM_Base_SetConfig+0xd8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d108      	bne.n	8007e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <TIM_Base_SetConfig+0xd0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d103      	bne.n	8007e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f023 0201 	bic.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]
  }
}
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800

08007e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f023 0201 	bic.w	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f023 0302 	bic.w	r3, r3, #2
 8007ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <TIM_OC1_SetConfig+0xc8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d10c      	bne.n	8007eee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f023 0308 	bic.w	r3, r3, #8
 8007eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f023 0304 	bic.w	r3, r3, #4
 8007eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <TIM_OC1_SetConfig+0xc8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d111      	bne.n	8007f1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	621a      	str	r2, [r3, #32]
}
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	40012c00 	.word	0x40012c00

08007f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	f023 0210 	bic.w	r2, r3, #16
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0320 	bic.w	r3, r3, #32
 8007f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <TIM_OC2_SetConfig+0xd0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d10d      	bne.n	8007fc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a14      	ldr	r2, [pc, #80]	; (8008014 <TIM_OC2_SetConfig+0xd0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d113      	bne.n	8007ff0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	621a      	str	r2, [r3, #32]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr
 8008014:	40012c00 	.word	0x40012c00

08008018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1d      	ldr	r2, [pc, #116]	; (80080e8 <TIM_OC3_SetConfig+0xd0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d10d      	bne.n	8008092 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800807c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <TIM_OC3_SetConfig+0xd0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d113      	bne.n	80080c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00

080080ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	031b      	lsls	r3, r3, #12
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <TIM_OC4_SetConfig+0x98>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d109      	bne.n	8008160 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	019b      	lsls	r3, r3, #6
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	621a      	str	r2, [r3, #32]
}
 800817a:	bf00      	nop
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr
 8008184:	40012c00 	.word	0x40012c00

08008188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f023 0201 	bic.w	r2, r3, #1
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f023 030a 	bic.w	r3, r3, #10
 80081c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	621a      	str	r2, [r3, #32]
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0210 	bic.w	r2, r3, #16
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	031b      	lsls	r3, r3, #12
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	f043 0307 	orr.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008276:	b480      	push	{r7}
 8008278:	b087      	sub	sp, #28
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008290:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	021a      	lsls	r2, r3, #8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	431a      	orrs	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4313      	orrs	r3, r2
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	609a      	str	r2, [r3, #8]
}
 80082aa:	bf00      	nop
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 031f 	and.w	r3, r3, #31
 80082c6:	2201      	movs	r2, #1
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1a      	ldr	r2, [r3, #32]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	401a      	ands	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1a      	ldr	r2, [r3, #32]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	431a      	orrs	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	621a      	str	r2, [r3, #32]
}
 80082f2:	bf00      	nop
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e046      	b.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a16      	ldr	r2, [pc, #88]	; (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008360:	d009      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d10c      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800837c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	4313      	orrs	r3, r2
 8008386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	40012c00 	.word	0x40012c00
 80083b0:	40000400 	.word	0x40000400
 80083b4:	40000800 	.word	0x40000800

080083b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e042      	b.n	8008474 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fd f910 	bl	8005628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2224      	movs	r2, #36	; 0x24
 800840c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800841e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fdf9 	bl	8009018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	; 0x28
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	4613      	mov	r3, r2
 800848a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b20      	cmp	r3, #32
 800849a:	d175      	bne.n	8008588 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_UART_Transmit+0x2c>
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e06e      	b.n	800858a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2221      	movs	r2, #33	; 0x21
 80084b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ba:	f7fd fae3 	bl	8005a84 <HAL_GetTick>
 80084be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	88fa      	ldrh	r2, [r7, #6]
 80084ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d4:	d108      	bne.n	80084e8 <HAL_UART_Transmit+0x6c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	e003      	b.n	80084f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084f0:	e02e      	b.n	8008550 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	2180      	movs	r1, #128	; 0x80
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fb97 	bl	8008c30 <UART_WaitOnFlagUntilTimeout>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e03a      	b.n	800858a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	3302      	adds	r3, #2
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	e007      	b.n	8008542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	3301      	adds	r3, #1
 8008540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1cb      	bne.n	80084f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2200      	movs	r2, #0
 8008562:	2140      	movs	r1, #64	; 0x40
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fb63 	bl	8008c30 <UART_WaitOnFlagUntilTimeout>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e006      	b.n	800858a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b08a      	sub	sp, #40	; 0x28
 8008596:	af02      	add	r7, sp, #8
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	f040 8081 	bne.w	80086b6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_UART_Receive+0x2e>
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e079      	b.n	80086b8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2222      	movs	r2, #34	; 0x22
 80085ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085d8:	f7fd fa54 	bl	8005a84 <HAL_GetTick>
 80085dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	88fa      	ldrh	r2, [r7, #6]
 80085e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	d108      	bne.n	8008606 <HAL_UART_Receive+0x74>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e003      	b.n	800860e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800860e:	e047      	b.n	80086a0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2200      	movs	r2, #0
 8008618:	2120      	movs	r1, #32
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fb08 	bl	8008c30 <UART_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e042      	b.n	80086b8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10c      	bne.n	8008652 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b29b      	uxth	r3, r3
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	b29a      	uxth	r2, r3
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	3302      	adds	r3, #2
 800864e:	61bb      	str	r3, [r7, #24]
 8008650:	e01f      	b.n	8008692 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865a:	d007      	beq.n	800866c <HAL_UART_Receive+0xda>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <HAL_UART_Receive+0xe8>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e008      	b.n	800868c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008686:	b2da      	uxtb	r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	3301      	adds	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1b2      	bne.n	8008610 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2220      	movs	r2, #32
 80086ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	e000      	b.n	80086b8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80086b6:	2302      	movs	r3, #2
  }
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b0ba      	sub	sp, #232	; 0xe8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80086fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10f      	bne.n	8008726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <HAL_UART_IRQHandler+0x66>
 8008712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbbc 	bl	8008e9c <UART_Receive_IT>
      return;
 8008724:	e25b      	b.n	8008bde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80de 	beq.w	80088ec <HAL_UART_IRQHandler+0x22c>
 8008730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800873c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008740:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 80d1 	beq.w	80088ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HAL_UART_IRQHandler+0xae>
 8008756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	f043 0201 	orr.w	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <HAL_UART_IRQHandler+0xd2>
 800877a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	f043 0202 	orr.w	r2, r3, #2
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <HAL_UART_IRQHandler+0xf6>
 800879e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ae:	f043 0204 	orr.w	r2, r3, #4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d011      	beq.n	80087e6 <HAL_UART_IRQHandler+0x126>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087de:	f043 0208 	orr.w	r2, r3, #8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 81f2 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d008      	beq.n	800880e <HAL_UART_IRQHandler+0x14e>
 80087fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb47 	bl	8008e9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2301      	movne	r3, #1
 800881e:	2300      	moveq	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d103      	bne.n	800883a <HAL_UART_IRQHandler+0x17a>
 8008832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008836:	2b00      	cmp	r3, #0
 8008838:	d04f      	beq.n	80088da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa51 	bl	8008ce2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d041      	beq.n	80088d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3314      	adds	r3, #20
 8008854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3314      	adds	r3, #20
 8008876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800887a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800887e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1d9      	bne.n	800884e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d013      	beq.n	80088ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	4a7e      	ldr	r2, [pc, #504]	; (8008aa0 <HAL_UART_IRQHandler+0x3e0>)
 80088a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd fa5e 	bl	8005d70 <HAL_DMA_Abort_IT>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d016      	beq.n	80088e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c8:	e00e      	b.n	80088e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f99c 	bl	8008c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d0:	e00a      	b.n	80088e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f998 	bl	8008c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d8:	e006      	b.n	80088e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f994 	bl	8008c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80088e6:	e175      	b.n	8008bd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e8:	bf00      	nop
    return;
 80088ea:	e173      	b.n	8008bd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f040 814f 	bne.w	8008b94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8148 	beq.w	8008b94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8141 	beq.w	8008b94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008912:	2300      	movs	r3, #0
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	60bb      	str	r3, [r7, #8]
 8008926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80b6 	beq.w	8008aa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 8145 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008956:	429a      	cmp	r2, r3
 8008958:	f080 813e 	bcs.w	8008bd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008962:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b20      	cmp	r3, #32
 800896c:	f000 8088 	beq.w	8008a80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800898a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800898e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800899c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1d9      	bne.n	8008970 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3314      	adds	r3, #20
 80089c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3314      	adds	r3, #20
 80089dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e1      	bne.n	80089bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3314      	adds	r3, #20
 80089fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3314      	adds	r3, #20
 8008a18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e3      	bne.n	80089f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a50:	f023 0310 	bic.w	r3, r3, #16
 8008a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a62:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e3      	bne.n	8008a3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fd f93d 	bl	8005cfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f8bf 	bl	8008c1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a9c:	e09c      	b.n	8008bd8 <HAL_UART_IRQHandler+0x518>
 8008a9e:	bf00      	nop
 8008aa0:	08008da7 	.word	0x08008da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 808e 	beq.w	8008bdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8089 	beq.w	8008bdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	330c      	adds	r3, #12
 8008ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	330c      	adds	r3, #12
 8008aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008aee:	647a      	str	r2, [r7, #68]	; 0x44
 8008af0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e3      	bne.n	8008aca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3314      	adds	r3, #20
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	623b      	str	r3, [r7, #32]
   return(result);
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	f023 0301 	bic.w	r3, r3, #1
 8008b18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b26:	633a      	str	r2, [r7, #48]	; 0x30
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e3      	bne.n	8008b02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0310 	bic.w	r3, r3, #16
 8008b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b6c:	61fa      	str	r2, [r7, #28]
 8008b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e3      	bne.n	8008b48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f844 	bl	8008c1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b92:	e023      	b.n	8008bdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x4f4>
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f90e 	bl	8008dce <UART_Transmit_IT>
    return;
 8008bb2:	e014      	b.n	8008bde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <HAL_UART_IRQHandler+0x51e>
 8008bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d008      	beq.n	8008bde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f94d 	bl	8008e6c <UART_EndTransmit_IT>
    return;
 8008bd2:	e004      	b.n	8008bde <HAL_UART_IRQHandler+0x51e>
    return;
 8008bd4:	bf00      	nop
 8008bd6:	e002      	b.n	8008bde <HAL_UART_IRQHandler+0x51e>
      return;
 8008bd8:	bf00      	nop
 8008bda:	e000      	b.n	8008bde <HAL_UART_IRQHandler+0x51e>
      return;
 8008bdc:	bf00      	nop
  }
}
 8008bde:	37e8      	adds	r7, #232	; 0xe8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr

08008c1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr

08008c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c40:	e03b      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d037      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4a:	f7fc ff1b 	bl	8005a84 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	6a3a      	ldr	r2, [r7, #32]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d302      	bcc.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e03a      	b.n	8008cda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d023      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d020      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	d01d      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d116      	bne.n	8008cba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f81d 	bl	8008ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2208      	movs	r2, #8
 8008cac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e00f      	b.n	8008cda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	bf0c      	ite	eq
 8008cca:	2301      	moveq	r3, #1
 8008ccc:	2300      	movne	r3, #0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d0b4      	beq.n	8008c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b095      	sub	sp, #84	; 0x54
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	330c      	adds	r3, #12
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d0a:	643a      	str	r2, [r7, #64]	; 0x40
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e5      	bne.n	8008cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e5      	bne.n	8008d1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d119      	bne.n	8008d8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	330c      	adds	r3, #12
 8008d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f023 0310 	bic.w	r3, r3, #16
 8008d70:	647b      	str	r3, [r7, #68]	; 0x44
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d7a:	61ba      	str	r2, [r7, #24]
 8008d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6979      	ldr	r1, [r7, #20]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	613b      	str	r3, [r7, #16]
   return(result);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e5      	bne.n	8008d5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d9c:	bf00      	nop
 8008d9e:	3754      	adds	r7, #84	; 0x54
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr

08008da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff ff21 	bl	8008c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b21      	cmp	r3, #33	; 0x21
 8008de0:	d13e      	bne.n	8008e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dea:	d114      	bne.n	8008e16 <UART_Transmit_IT+0x48>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d110      	bne.n	8008e16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	1c9a      	adds	r2, r3, #2
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	621a      	str	r2, [r3, #32]
 8008e14:	e008      	b.n	8008e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6211      	str	r1, [r2, #32]
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4619      	mov	r1, r3
 8008e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10f      	bne.n	8008e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e000      	b.n	8008e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e60:	2302      	movs	r3, #2
  }
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68da      	ldr	r2, [r3, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fea9 	bl	8008be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08c      	sub	sp, #48	; 0x30
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b22      	cmp	r3, #34	; 0x22
 8008eae:	f040 80ae 	bne.w	800900e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	d117      	bne.n	8008eec <UART_Receive_IT+0x50>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d113      	bne.n	8008eec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	1c9a      	adds	r2, r3, #2
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8008eea:	e026      	b.n	8008f3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efe:	d007      	beq.n	8008f10 <UART_Receive_IT+0x74>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <UART_Receive_IT+0x82>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	e008      	b.n	8008f30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4619      	mov	r1, r3
 8008f48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d15d      	bne.n	800900a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0220 	bic.w	r2, r2, #32
 8008f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695a      	ldr	r2, [r3, #20]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0201 	bic.w	r2, r2, #1
 8008f7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d135      	bne.n	8009000 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f023 0310 	bic.w	r3, r3, #16
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fba:	623a      	str	r2, [r7, #32]
 8008fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	69f9      	ldr	r1, [r7, #28]
 8008fc0:	6a3a      	ldr	r2, [r7, #32]
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d10a      	bne.n	8008ff2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff fe0e 	bl	8008c1a <HAL_UARTEx_RxEventCallback>
 8008ffe:	e002      	b.n	8009006 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff fdf8 	bl	8008bf6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e002      	b.n	8009010 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e000      	b.n	8009010 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800900e:	2302      	movs	r3, #2
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3730      	adds	r7, #48	; 0x30
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009052:	f023 030c 	bic.w	r3, r3, #12
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	430b      	orrs	r3, r1
 800905e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a2c      	ldr	r2, [pc, #176]	; (800912c <UART_SetConfig+0x114>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d103      	bne.n	8009088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009080:	f7fd fc66 	bl	8006950 <HAL_RCC_GetPCLK2Freq>
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	e002      	b.n	800908e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009088:	f7fd fc4e 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 800908c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009a      	lsls	r2, r3, #2
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a4:	4a22      	ldr	r2, [pc, #136]	; (8009130 <UART_SetConfig+0x118>)
 80090a6:	fba2 2303 	umull	r2, r3, r2, r3
 80090aa:	095b      	lsrs	r3, r3, #5
 80090ac:	0119      	lsls	r1, r3, #4
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009a      	lsls	r2, r3, #2
 80090b8:	441a      	add	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80090c4:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <UART_SetConfig+0x118>)
 80090c6:	fba3 0302 	umull	r0, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	2064      	movs	r0, #100	; 0x64
 80090ce:	fb00 f303 	mul.w	r3, r0, r3
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	3332      	adds	r3, #50	; 0x32
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <UART_SetConfig+0x118>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e4:	4419      	add	r1, r3
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009a      	lsls	r2, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <UART_SetConfig+0x118>)
 80090fe:	fba3 0302 	umull	r0, r3, r3, r2
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	2064      	movs	r0, #100	; 0x64
 8009106:	fb00 f303 	mul.w	r3, r0, r3
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	3332      	adds	r3, #50	; 0x32
 8009110:	4a07      	ldr	r2, [pc, #28]	; (8009130 <UART_SetConfig+0x118>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	440a      	add	r2, r1
 8009122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009124:	bf00      	nop
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40013800 	.word	0x40013800
 8009130:	51eb851f 	.word	0x51eb851f

08009134 <__assert_func>:
 8009134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009136:	4614      	mov	r4, r2
 8009138:	461a      	mov	r2, r3
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <__assert_func+0x2c>)
 800913c:	4605      	mov	r5, r0
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68d8      	ldr	r0, [r3, #12]
 8009142:	b14c      	cbz	r4, 8009158 <__assert_func+0x24>
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <__assert_func+0x30>)
 8009146:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800914a:	9100      	str	r1, [sp, #0]
 800914c:	462b      	mov	r3, r5
 800914e:	4906      	ldr	r1, [pc, #24]	; (8009168 <__assert_func+0x34>)
 8009150:	f000 f814 	bl	800917c <fiprintf>
 8009154:	f002 f8a8 	bl	800b2a8 <abort>
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <__assert_func+0x38>)
 800915a:	461c      	mov	r4, r3
 800915c:	e7f3      	b.n	8009146 <__assert_func+0x12>
 800915e:	bf00      	nop
 8009160:	20000010 	.word	0x20000010
 8009164:	08010d32 	.word	0x08010d32
 8009168:	08010d3f 	.word	0x08010d3f
 800916c:	08010d6d 	.word	0x08010d6d

08009170 <__errno>:
 8009170:	4b01      	ldr	r3, [pc, #4]	; (8009178 <__errno+0x8>)
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20000010 	.word	0x20000010

0800917c <fiprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b503      	push	{r0, r1, lr}
 8009180:	4601      	mov	r1, r0
 8009182:	ab03      	add	r3, sp, #12
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <fiprintf+0x20>)
 8009186:	f853 2b04 	ldr.w	r2, [r3], #4
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f000 f917 	bl	80093c0 <_vfiprintf_r>
 8009192:	b002      	add	sp, #8
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	20000010 	.word	0x20000010

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	2600      	movs	r6, #0
 80091a4:	4d0c      	ldr	r5, [pc, #48]	; (80091d8 <__libc_init_array+0x38>)
 80091a6:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <__libc_init_array+0x3c>)
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	f007 f9ea 	bl	8010588 <_init>
 80091b4:	2600      	movs	r6, #0
 80091b6:	4d0a      	ldr	r5, [pc, #40]	; (80091e0 <__libc_init_array+0x40>)
 80091b8:	4c0a      	ldr	r4, [pc, #40]	; (80091e4 <__libc_init_array+0x44>)
 80091ba:	1b64      	subs	r4, r4, r5
 80091bc:	10a4      	asrs	r4, r4, #2
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	08011820 	.word	0x08011820
 80091dc:	08011820 	.word	0x08011820
 80091e0:	08011820 	.word	0x08011820
 80091e4:	08011824 	.word	0x08011824

080091e8 <malloc>:
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <malloc+0xc>)
 80091ea:	4601      	mov	r1, r0
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f000 b865 	b.w	80092bc <_malloc_r>
 80091f2:	bf00      	nop
 80091f4:	20000010 	.word	0x20000010

080091f8 <memcpy>:
 80091f8:	440a      	add	r2, r1
 80091fa:	4291      	cmp	r1, r2
 80091fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009200:	d100      	bne.n	8009204 <memcpy+0xc>
 8009202:	4770      	bx	lr
 8009204:	b510      	push	{r4, lr}
 8009206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920a:	4291      	cmp	r1, r2
 800920c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009210:	d1f9      	bne.n	8009206 <memcpy+0xe>
 8009212:	bd10      	pop	{r4, pc}

08009214 <memset>:
 8009214:	4603      	mov	r3, r0
 8009216:	4402      	add	r2, r0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <memset+0xa>
 800921c:	4770      	bx	lr
 800921e:	f803 1b01 	strb.w	r1, [r3], #1
 8009222:	e7f9      	b.n	8009218 <memset+0x4>

08009224 <_free_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4605      	mov	r5, r0
 8009228:	2900      	cmp	r1, #0
 800922a:	d043      	beq.n	80092b4 <_free_r+0x90>
 800922c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009230:	1f0c      	subs	r4, r1, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfb8      	it	lt
 8009236:	18e4      	addlt	r4, r4, r3
 8009238:	f003 fc7c 	bl	800cb34 <__malloc_lock>
 800923c:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <_free_r+0x94>)
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	4610      	mov	r0, r2
 8009242:	b933      	cbnz	r3, 8009252 <_free_r+0x2e>
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6014      	str	r4, [r2, #0]
 8009248:	4628      	mov	r0, r5
 800924a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800924e:	f003 bc77 	b.w	800cb40 <__malloc_unlock>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d90a      	bls.n	800926c <_free_r+0x48>
 8009256:	6821      	ldr	r1, [r4, #0]
 8009258:	1862      	adds	r2, r4, r1
 800925a:	4293      	cmp	r3, r2
 800925c:	bf01      	itttt	eq
 800925e:	681a      	ldreq	r2, [r3, #0]
 8009260:	685b      	ldreq	r3, [r3, #4]
 8009262:	1852      	addeq	r2, r2, r1
 8009264:	6022      	streq	r2, [r4, #0]
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	6004      	str	r4, [r0, #0]
 800926a:	e7ed      	b.n	8009248 <_free_r+0x24>
 800926c:	461a      	mov	r2, r3
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	b10b      	cbz	r3, 8009276 <_free_r+0x52>
 8009272:	42a3      	cmp	r3, r4
 8009274:	d9fa      	bls.n	800926c <_free_r+0x48>
 8009276:	6811      	ldr	r1, [r2, #0]
 8009278:	1850      	adds	r0, r2, r1
 800927a:	42a0      	cmp	r0, r4
 800927c:	d10b      	bne.n	8009296 <_free_r+0x72>
 800927e:	6820      	ldr	r0, [r4, #0]
 8009280:	4401      	add	r1, r0
 8009282:	1850      	adds	r0, r2, r1
 8009284:	4283      	cmp	r3, r0
 8009286:	6011      	str	r1, [r2, #0]
 8009288:	d1de      	bne.n	8009248 <_free_r+0x24>
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	4401      	add	r1, r0
 8009290:	6011      	str	r1, [r2, #0]
 8009292:	6053      	str	r3, [r2, #4]
 8009294:	e7d8      	b.n	8009248 <_free_r+0x24>
 8009296:	d902      	bls.n	800929e <_free_r+0x7a>
 8009298:	230c      	movs	r3, #12
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	e7d4      	b.n	8009248 <_free_r+0x24>
 800929e:	6820      	ldr	r0, [r4, #0]
 80092a0:	1821      	adds	r1, r4, r0
 80092a2:	428b      	cmp	r3, r1
 80092a4:	bf01      	itttt	eq
 80092a6:	6819      	ldreq	r1, [r3, #0]
 80092a8:	685b      	ldreq	r3, [r3, #4]
 80092aa:	1809      	addeq	r1, r1, r0
 80092ac:	6021      	streq	r1, [r4, #0]
 80092ae:	6063      	str	r3, [r4, #4]
 80092b0:	6054      	str	r4, [r2, #4]
 80092b2:	e7c9      	b.n	8009248 <_free_r+0x24>
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	20000384 	.word	0x20000384

080092bc <_malloc_r>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	1ccd      	adds	r5, r1, #3
 80092c0:	f025 0503 	bic.w	r5, r5, #3
 80092c4:	3508      	adds	r5, #8
 80092c6:	2d0c      	cmp	r5, #12
 80092c8:	bf38      	it	cc
 80092ca:	250c      	movcc	r5, #12
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	4606      	mov	r6, r0
 80092d0:	db01      	blt.n	80092d6 <_malloc_r+0x1a>
 80092d2:	42a9      	cmp	r1, r5
 80092d4:	d903      	bls.n	80092de <_malloc_r+0x22>
 80092d6:	230c      	movs	r3, #12
 80092d8:	6033      	str	r3, [r6, #0]
 80092da:	2000      	movs	r0, #0
 80092dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092de:	f003 fc29 	bl	800cb34 <__malloc_lock>
 80092e2:	4921      	ldr	r1, [pc, #132]	; (8009368 <_malloc_r+0xac>)
 80092e4:	680a      	ldr	r2, [r1, #0]
 80092e6:	4614      	mov	r4, r2
 80092e8:	b99c      	cbnz	r4, 8009312 <_malloc_r+0x56>
 80092ea:	4f20      	ldr	r7, [pc, #128]	; (800936c <_malloc_r+0xb0>)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	b923      	cbnz	r3, 80092fa <_malloc_r+0x3e>
 80092f0:	4621      	mov	r1, r4
 80092f2:	4630      	mov	r0, r6
 80092f4:	f001 f806 	bl	800a304 <_sbrk_r>
 80092f8:	6038      	str	r0, [r7, #0]
 80092fa:	4629      	mov	r1, r5
 80092fc:	4630      	mov	r0, r6
 80092fe:	f001 f801 	bl	800a304 <_sbrk_r>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d123      	bne.n	800934e <_malloc_r+0x92>
 8009306:	230c      	movs	r3, #12
 8009308:	4630      	mov	r0, r6
 800930a:	6033      	str	r3, [r6, #0]
 800930c:	f003 fc18 	bl	800cb40 <__malloc_unlock>
 8009310:	e7e3      	b.n	80092da <_malloc_r+0x1e>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	1b5b      	subs	r3, r3, r5
 8009316:	d417      	bmi.n	8009348 <_malloc_r+0x8c>
 8009318:	2b0b      	cmp	r3, #11
 800931a:	d903      	bls.n	8009324 <_malloc_r+0x68>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	441c      	add	r4, r3
 8009320:	6025      	str	r5, [r4, #0]
 8009322:	e004      	b.n	800932e <_malloc_r+0x72>
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	42a2      	cmp	r2, r4
 8009328:	bf0c      	ite	eq
 800932a:	600b      	streq	r3, [r1, #0]
 800932c:	6053      	strne	r3, [r2, #4]
 800932e:	4630      	mov	r0, r6
 8009330:	f003 fc06 	bl	800cb40 <__malloc_unlock>
 8009334:	f104 000b 	add.w	r0, r4, #11
 8009338:	1d23      	adds	r3, r4, #4
 800933a:	f020 0007 	bic.w	r0, r0, #7
 800933e:	1ac2      	subs	r2, r0, r3
 8009340:	d0cc      	beq.n	80092dc <_malloc_r+0x20>
 8009342:	1a1b      	subs	r3, r3, r0
 8009344:	50a3      	str	r3, [r4, r2]
 8009346:	e7c9      	b.n	80092dc <_malloc_r+0x20>
 8009348:	4622      	mov	r2, r4
 800934a:	6864      	ldr	r4, [r4, #4]
 800934c:	e7cc      	b.n	80092e8 <_malloc_r+0x2c>
 800934e:	1cc4      	adds	r4, r0, #3
 8009350:	f024 0403 	bic.w	r4, r4, #3
 8009354:	42a0      	cmp	r0, r4
 8009356:	d0e3      	beq.n	8009320 <_malloc_r+0x64>
 8009358:	1a21      	subs	r1, r4, r0
 800935a:	4630      	mov	r0, r6
 800935c:	f000 ffd2 	bl	800a304 <_sbrk_r>
 8009360:	3001      	adds	r0, #1
 8009362:	d1dd      	bne.n	8009320 <_malloc_r+0x64>
 8009364:	e7cf      	b.n	8009306 <_malloc_r+0x4a>
 8009366:	bf00      	nop
 8009368:	20000384 	.word	0x20000384
 800936c:	20000388 	.word	0x20000388

08009370 <__sfputc_r>:
 8009370:	6893      	ldr	r3, [r2, #8]
 8009372:	b410      	push	{r4}
 8009374:	3b01      	subs	r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	6093      	str	r3, [r2, #8]
 800937a:	da07      	bge.n	800938c <__sfputc_r+0x1c>
 800937c:	6994      	ldr	r4, [r2, #24]
 800937e:	42a3      	cmp	r3, r4
 8009380:	db01      	blt.n	8009386 <__sfputc_r+0x16>
 8009382:	290a      	cmp	r1, #10
 8009384:	d102      	bne.n	800938c <__sfputc_r+0x1c>
 8009386:	bc10      	pop	{r4}
 8009388:	f001 bece 	b.w	800b128 <__swbuf_r>
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	1c58      	adds	r0, r3, #1
 8009390:	6010      	str	r0, [r2, #0]
 8009392:	7019      	strb	r1, [r3, #0]
 8009394:	4608      	mov	r0, r1
 8009396:	bc10      	pop	{r4}
 8009398:	4770      	bx	lr

0800939a <__sfputs_r>:
 800939a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939c:	4606      	mov	r6, r0
 800939e:	460f      	mov	r7, r1
 80093a0:	4614      	mov	r4, r2
 80093a2:	18d5      	adds	r5, r2, r3
 80093a4:	42ac      	cmp	r4, r5
 80093a6:	d101      	bne.n	80093ac <__sfputs_r+0x12>
 80093a8:	2000      	movs	r0, #0
 80093aa:	e007      	b.n	80093bc <__sfputs_r+0x22>
 80093ac:	463a      	mov	r2, r7
 80093ae:	4630      	mov	r0, r6
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	f7ff ffdc 	bl	8009370 <__sfputc_r>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d1f3      	bne.n	80093a4 <__sfputs_r+0xa>
 80093bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093c0 <_vfiprintf_r>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	460d      	mov	r5, r1
 80093c6:	4614      	mov	r4, r2
 80093c8:	4698      	mov	r8, r3
 80093ca:	4606      	mov	r6, r0
 80093cc:	b09d      	sub	sp, #116	; 0x74
 80093ce:	b118      	cbz	r0, 80093d8 <_vfiprintf_r+0x18>
 80093d0:	6983      	ldr	r3, [r0, #24]
 80093d2:	b90b      	cbnz	r3, 80093d8 <_vfiprintf_r+0x18>
 80093d4:	f002 ff04 	bl	800c1e0 <__sinit>
 80093d8:	4b89      	ldr	r3, [pc, #548]	; (8009600 <_vfiprintf_r+0x240>)
 80093da:	429d      	cmp	r5, r3
 80093dc:	d11b      	bne.n	8009416 <_vfiprintf_r+0x56>
 80093de:	6875      	ldr	r5, [r6, #4]
 80093e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e2:	07d9      	lsls	r1, r3, #31
 80093e4:	d405      	bmi.n	80093f2 <_vfiprintf_r+0x32>
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	059a      	lsls	r2, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_vfiprintf_r+0x32>
 80093ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ee:	f003 fb00 	bl	800c9f2 <__retarget_lock_acquire_recursive>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	071b      	lsls	r3, r3, #28
 80093f6:	d501      	bpl.n	80093fc <_vfiprintf_r+0x3c>
 80093f8:	692b      	ldr	r3, [r5, #16]
 80093fa:	b9eb      	cbnz	r3, 8009438 <_vfiprintf_r+0x78>
 80093fc:	4629      	mov	r1, r5
 80093fe:	4630      	mov	r0, r6
 8009400:	f001 fee4 	bl	800b1cc <__swsetup_r>
 8009404:	b1c0      	cbz	r0, 8009438 <_vfiprintf_r+0x78>
 8009406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009408:	07dc      	lsls	r4, r3, #31
 800940a:	d50e      	bpl.n	800942a <_vfiprintf_r+0x6a>
 800940c:	f04f 30ff 	mov.w	r0, #4294967295
 8009410:	b01d      	add	sp, #116	; 0x74
 8009412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009416:	4b7b      	ldr	r3, [pc, #492]	; (8009604 <_vfiprintf_r+0x244>)
 8009418:	429d      	cmp	r5, r3
 800941a:	d101      	bne.n	8009420 <_vfiprintf_r+0x60>
 800941c:	68b5      	ldr	r5, [r6, #8]
 800941e:	e7df      	b.n	80093e0 <_vfiprintf_r+0x20>
 8009420:	4b79      	ldr	r3, [pc, #484]	; (8009608 <_vfiprintf_r+0x248>)
 8009422:	429d      	cmp	r5, r3
 8009424:	bf08      	it	eq
 8009426:	68f5      	ldreq	r5, [r6, #12]
 8009428:	e7da      	b.n	80093e0 <_vfiprintf_r+0x20>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	0598      	lsls	r0, r3, #22
 800942e:	d4ed      	bmi.n	800940c <_vfiprintf_r+0x4c>
 8009430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009432:	f003 fadf 	bl	800c9f4 <__retarget_lock_release_recursive>
 8009436:	e7e9      	b.n	800940c <_vfiprintf_r+0x4c>
 8009438:	2300      	movs	r3, #0
 800943a:	9309      	str	r3, [sp, #36]	; 0x24
 800943c:	2320      	movs	r3, #32
 800943e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009442:	2330      	movs	r3, #48	; 0x30
 8009444:	f04f 0901 	mov.w	r9, #1
 8009448:	f8cd 800c 	str.w	r8, [sp, #12]
 800944c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800960c <_vfiprintf_r+0x24c>
 8009450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009454:	4623      	mov	r3, r4
 8009456:	469a      	mov	sl, r3
 8009458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800945c:	b10a      	cbz	r2, 8009462 <_vfiprintf_r+0xa2>
 800945e:	2a25      	cmp	r2, #37	; 0x25
 8009460:	d1f9      	bne.n	8009456 <_vfiprintf_r+0x96>
 8009462:	ebba 0b04 	subs.w	fp, sl, r4
 8009466:	d00b      	beq.n	8009480 <_vfiprintf_r+0xc0>
 8009468:	465b      	mov	r3, fp
 800946a:	4622      	mov	r2, r4
 800946c:	4629      	mov	r1, r5
 800946e:	4630      	mov	r0, r6
 8009470:	f7ff ff93 	bl	800939a <__sfputs_r>
 8009474:	3001      	adds	r0, #1
 8009476:	f000 80aa 	beq.w	80095ce <_vfiprintf_r+0x20e>
 800947a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800947c:	445a      	add	r2, fp
 800947e:	9209      	str	r2, [sp, #36]	; 0x24
 8009480:	f89a 3000 	ldrb.w	r3, [sl]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 80a2 	beq.w	80095ce <_vfiprintf_r+0x20e>
 800948a:	2300      	movs	r3, #0
 800948c:	f04f 32ff 	mov.w	r2, #4294967295
 8009490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009494:	f10a 0a01 	add.w	sl, sl, #1
 8009498:	9304      	str	r3, [sp, #16]
 800949a:	9307      	str	r3, [sp, #28]
 800949c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094a0:	931a      	str	r3, [sp, #104]	; 0x68
 80094a2:	4654      	mov	r4, sl
 80094a4:	2205      	movs	r2, #5
 80094a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094aa:	4858      	ldr	r0, [pc, #352]	; (800960c <_vfiprintf_r+0x24c>)
 80094ac:	f003 fb1a 	bl	800cae4 <memchr>
 80094b0:	9a04      	ldr	r2, [sp, #16]
 80094b2:	b9d8      	cbnz	r0, 80094ec <_vfiprintf_r+0x12c>
 80094b4:	06d1      	lsls	r1, r2, #27
 80094b6:	bf44      	itt	mi
 80094b8:	2320      	movmi	r3, #32
 80094ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094be:	0713      	lsls	r3, r2, #28
 80094c0:	bf44      	itt	mi
 80094c2:	232b      	movmi	r3, #43	; 0x2b
 80094c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c8:	f89a 3000 	ldrb.w	r3, [sl]
 80094cc:	2b2a      	cmp	r3, #42	; 0x2a
 80094ce:	d015      	beq.n	80094fc <_vfiprintf_r+0x13c>
 80094d0:	4654      	mov	r4, sl
 80094d2:	2000      	movs	r0, #0
 80094d4:	f04f 0c0a 	mov.w	ip, #10
 80094d8:	9a07      	ldr	r2, [sp, #28]
 80094da:	4621      	mov	r1, r4
 80094dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094e0:	3b30      	subs	r3, #48	; 0x30
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	d94e      	bls.n	8009584 <_vfiprintf_r+0x1c4>
 80094e6:	b1b0      	cbz	r0, 8009516 <_vfiprintf_r+0x156>
 80094e8:	9207      	str	r2, [sp, #28]
 80094ea:	e014      	b.n	8009516 <_vfiprintf_r+0x156>
 80094ec:	eba0 0308 	sub.w	r3, r0, r8
 80094f0:	fa09 f303 	lsl.w	r3, r9, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	46a2      	mov	sl, r4
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	e7d2      	b.n	80094a2 <_vfiprintf_r+0xe2>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	1d19      	adds	r1, r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	9103      	str	r1, [sp, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfbb      	ittet	lt
 8009508:	425b      	neglt	r3, r3
 800950a:	f042 0202 	orrlt.w	r2, r2, #2
 800950e:	9307      	strge	r3, [sp, #28]
 8009510:	9307      	strlt	r3, [sp, #28]
 8009512:	bfb8      	it	lt
 8009514:	9204      	strlt	r2, [sp, #16]
 8009516:	7823      	ldrb	r3, [r4, #0]
 8009518:	2b2e      	cmp	r3, #46	; 0x2e
 800951a:	d10c      	bne.n	8009536 <_vfiprintf_r+0x176>
 800951c:	7863      	ldrb	r3, [r4, #1]
 800951e:	2b2a      	cmp	r3, #42	; 0x2a
 8009520:	d135      	bne.n	800958e <_vfiprintf_r+0x1ce>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	3402      	adds	r4, #2
 8009526:	1d1a      	adds	r2, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	9203      	str	r2, [sp, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfb8      	it	lt
 8009530:	f04f 33ff 	movlt.w	r3, #4294967295
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800961c <_vfiprintf_r+0x25c>
 800953a:	2203      	movs	r2, #3
 800953c:	4650      	mov	r0, sl
 800953e:	7821      	ldrb	r1, [r4, #0]
 8009540:	f003 fad0 	bl	800cae4 <memchr>
 8009544:	b140      	cbz	r0, 8009558 <_vfiprintf_r+0x198>
 8009546:	2340      	movs	r3, #64	; 0x40
 8009548:	eba0 000a 	sub.w	r0, r0, sl
 800954c:	fa03 f000 	lsl.w	r0, r3, r0
 8009550:	9b04      	ldr	r3, [sp, #16]
 8009552:	3401      	adds	r4, #1
 8009554:	4303      	orrs	r3, r0
 8009556:	9304      	str	r3, [sp, #16]
 8009558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955c:	2206      	movs	r2, #6
 800955e:	482c      	ldr	r0, [pc, #176]	; (8009610 <_vfiprintf_r+0x250>)
 8009560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009564:	f003 fabe 	bl	800cae4 <memchr>
 8009568:	2800      	cmp	r0, #0
 800956a:	d03f      	beq.n	80095ec <_vfiprintf_r+0x22c>
 800956c:	4b29      	ldr	r3, [pc, #164]	; (8009614 <_vfiprintf_r+0x254>)
 800956e:	bb1b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x1f8>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	3307      	adds	r3, #7
 8009574:	f023 0307 	bic.w	r3, r3, #7
 8009578:	3308      	adds	r3, #8
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957e:	443b      	add	r3, r7
 8009580:	9309      	str	r3, [sp, #36]	; 0x24
 8009582:	e767      	b.n	8009454 <_vfiprintf_r+0x94>
 8009584:	460c      	mov	r4, r1
 8009586:	2001      	movs	r0, #1
 8009588:	fb0c 3202 	mla	r2, ip, r2, r3
 800958c:	e7a5      	b.n	80094da <_vfiprintf_r+0x11a>
 800958e:	2300      	movs	r3, #0
 8009590:	f04f 0c0a 	mov.w	ip, #10
 8009594:	4619      	mov	r1, r3
 8009596:	3401      	adds	r4, #1
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	4620      	mov	r0, r4
 800959c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a0:	3a30      	subs	r2, #48	; 0x30
 80095a2:	2a09      	cmp	r2, #9
 80095a4:	d903      	bls.n	80095ae <_vfiprintf_r+0x1ee>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0c5      	beq.n	8009536 <_vfiprintf_r+0x176>
 80095aa:	9105      	str	r1, [sp, #20]
 80095ac:	e7c3      	b.n	8009536 <_vfiprintf_r+0x176>
 80095ae:	4604      	mov	r4, r0
 80095b0:	2301      	movs	r3, #1
 80095b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095b6:	e7f0      	b.n	800959a <_vfiprintf_r+0x1da>
 80095b8:	ab03      	add	r3, sp, #12
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	462a      	mov	r2, r5
 80095be:	4630      	mov	r0, r6
 80095c0:	4b15      	ldr	r3, [pc, #84]	; (8009618 <_vfiprintf_r+0x258>)
 80095c2:	a904      	add	r1, sp, #16
 80095c4:	f000 f8ca 	bl	800975c <_printf_float>
 80095c8:	4607      	mov	r7, r0
 80095ca:	1c78      	adds	r0, r7, #1
 80095cc:	d1d6      	bne.n	800957c <_vfiprintf_r+0x1bc>
 80095ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095d0:	07d9      	lsls	r1, r3, #31
 80095d2:	d405      	bmi.n	80095e0 <_vfiprintf_r+0x220>
 80095d4:	89ab      	ldrh	r3, [r5, #12]
 80095d6:	059a      	lsls	r2, r3, #22
 80095d8:	d402      	bmi.n	80095e0 <_vfiprintf_r+0x220>
 80095da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095dc:	f003 fa0a 	bl	800c9f4 <__retarget_lock_release_recursive>
 80095e0:	89ab      	ldrh	r3, [r5, #12]
 80095e2:	065b      	lsls	r3, r3, #25
 80095e4:	f53f af12 	bmi.w	800940c <_vfiprintf_r+0x4c>
 80095e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095ea:	e711      	b.n	8009410 <_vfiprintf_r+0x50>
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4630      	mov	r0, r6
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <_vfiprintf_r+0x258>)
 80095f6:	a904      	add	r1, sp, #16
 80095f8:	f000 fb4c 	bl	8009c94 <_printf_i>
 80095fc:	e7e4      	b.n	80095c8 <_vfiprintf_r+0x208>
 80095fe:	bf00      	nop
 8009600:	08010fc8 	.word	0x08010fc8
 8009604:	08010fe8 	.word	0x08010fe8
 8009608:	08010fa8 	.word	0x08010fa8
 800960c:	08010d74 	.word	0x08010d74
 8009610:	08010d7e 	.word	0x08010d7e
 8009614:	0800975d 	.word	0x0800975d
 8009618:	0800939b 	.word	0x0800939b
 800961c:	08010d7a 	.word	0x08010d7a

08009620 <__cvt>:
 8009620:	2b00      	cmp	r3, #0
 8009622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009626:	461f      	mov	r7, r3
 8009628:	bfbb      	ittet	lt
 800962a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800962e:	461f      	movlt	r7, r3
 8009630:	2300      	movge	r3, #0
 8009632:	232d      	movlt	r3, #45	; 0x2d
 8009634:	b088      	sub	sp, #32
 8009636:	4614      	mov	r4, r2
 8009638:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800963a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800963c:	7013      	strb	r3, [r2, #0]
 800963e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009640:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009644:	f023 0820 	bic.w	r8, r3, #32
 8009648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800964c:	d005      	beq.n	800965a <__cvt+0x3a>
 800964e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009652:	d100      	bne.n	8009656 <__cvt+0x36>
 8009654:	3501      	adds	r5, #1
 8009656:	2302      	movs	r3, #2
 8009658:	e000      	b.n	800965c <__cvt+0x3c>
 800965a:	2303      	movs	r3, #3
 800965c:	aa07      	add	r2, sp, #28
 800965e:	9204      	str	r2, [sp, #16]
 8009660:	aa06      	add	r2, sp, #24
 8009662:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009666:	e9cd 3500 	strd	r3, r5, [sp]
 800966a:	4622      	mov	r2, r4
 800966c:	463b      	mov	r3, r7
 800966e:	f001 feaf 	bl	800b3d0 <_dtoa_r>
 8009672:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009676:	4606      	mov	r6, r0
 8009678:	d102      	bne.n	8009680 <__cvt+0x60>
 800967a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800967c:	07db      	lsls	r3, r3, #31
 800967e:	d522      	bpl.n	80096c6 <__cvt+0xa6>
 8009680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009684:	eb06 0905 	add.w	r9, r6, r5
 8009688:	d110      	bne.n	80096ac <__cvt+0x8c>
 800968a:	7833      	ldrb	r3, [r6, #0]
 800968c:	2b30      	cmp	r3, #48	; 0x30
 800968e:	d10a      	bne.n	80096a6 <__cvt+0x86>
 8009690:	2200      	movs	r2, #0
 8009692:	2300      	movs	r3, #0
 8009694:	4620      	mov	r0, r4
 8009696:	4639      	mov	r1, r7
 8009698:	f7f7 f986 	bl	80009a8 <__aeabi_dcmpeq>
 800969c:	b918      	cbnz	r0, 80096a6 <__cvt+0x86>
 800969e:	f1c5 0501 	rsb	r5, r5, #1
 80096a2:	f8ca 5000 	str.w	r5, [sl]
 80096a6:	f8da 3000 	ldr.w	r3, [sl]
 80096aa:	4499      	add	r9, r3
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4620      	mov	r0, r4
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f7 f978 	bl	80009a8 <__aeabi_dcmpeq>
 80096b8:	b108      	cbz	r0, 80096be <__cvt+0x9e>
 80096ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80096be:	2230      	movs	r2, #48	; 0x30
 80096c0:	9b07      	ldr	r3, [sp, #28]
 80096c2:	454b      	cmp	r3, r9
 80096c4:	d307      	bcc.n	80096d6 <__cvt+0xb6>
 80096c6:	4630      	mov	r0, r6
 80096c8:	9b07      	ldr	r3, [sp, #28]
 80096ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096cc:	1b9b      	subs	r3, r3, r6
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	b008      	add	sp, #32
 80096d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d6:	1c59      	adds	r1, r3, #1
 80096d8:	9107      	str	r1, [sp, #28]
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	e7f0      	b.n	80096c0 <__cvt+0xa0>

080096de <__exponent>:
 80096de:	4603      	mov	r3, r0
 80096e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096e2:	2900      	cmp	r1, #0
 80096e4:	f803 2b02 	strb.w	r2, [r3], #2
 80096e8:	bfb6      	itet	lt
 80096ea:	222d      	movlt	r2, #45	; 0x2d
 80096ec:	222b      	movge	r2, #43	; 0x2b
 80096ee:	4249      	neglt	r1, r1
 80096f0:	2909      	cmp	r1, #9
 80096f2:	7042      	strb	r2, [r0, #1]
 80096f4:	dd2b      	ble.n	800974e <__exponent+0x70>
 80096f6:	f10d 0407 	add.w	r4, sp, #7
 80096fa:	46a4      	mov	ip, r4
 80096fc:	270a      	movs	r7, #10
 80096fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8009702:	460a      	mov	r2, r1
 8009704:	46a6      	mov	lr, r4
 8009706:	fb07 1516 	mls	r5, r7, r6, r1
 800970a:	2a63      	cmp	r2, #99	; 0x63
 800970c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009710:	4631      	mov	r1, r6
 8009712:	f104 34ff 	add.w	r4, r4, #4294967295
 8009716:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800971a:	dcf0      	bgt.n	80096fe <__exponent+0x20>
 800971c:	3130      	adds	r1, #48	; 0x30
 800971e:	f1ae 0502 	sub.w	r5, lr, #2
 8009722:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009726:	4629      	mov	r1, r5
 8009728:	1c44      	adds	r4, r0, #1
 800972a:	4561      	cmp	r1, ip
 800972c:	d30a      	bcc.n	8009744 <__exponent+0x66>
 800972e:	f10d 0209 	add.w	r2, sp, #9
 8009732:	eba2 020e 	sub.w	r2, r2, lr
 8009736:	4565      	cmp	r5, ip
 8009738:	bf88      	it	hi
 800973a:	2200      	movhi	r2, #0
 800973c:	4413      	add	r3, r2
 800973e:	1a18      	subs	r0, r3, r0
 8009740:	b003      	add	sp, #12
 8009742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009748:	f804 2f01 	strb.w	r2, [r4, #1]!
 800974c:	e7ed      	b.n	800972a <__exponent+0x4c>
 800974e:	2330      	movs	r3, #48	; 0x30
 8009750:	3130      	adds	r1, #48	; 0x30
 8009752:	7083      	strb	r3, [r0, #2]
 8009754:	70c1      	strb	r1, [r0, #3]
 8009756:	1d03      	adds	r3, r0, #4
 8009758:	e7f1      	b.n	800973e <__exponent+0x60>
	...

0800975c <_printf_float>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	b091      	sub	sp, #68	; 0x44
 8009762:	460c      	mov	r4, r1
 8009764:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009768:	4616      	mov	r6, r2
 800976a:	461f      	mov	r7, r3
 800976c:	4605      	mov	r5, r0
 800976e:	f003 f93b 	bl	800c9e8 <_localeconv_r>
 8009772:	6803      	ldr	r3, [r0, #0]
 8009774:	4618      	mov	r0, r3
 8009776:	9309      	str	r3, [sp, #36]	; 0x24
 8009778:	f7f6 fcea 	bl	8000150 <strlen>
 800977c:	2300      	movs	r3, #0
 800977e:	930e      	str	r3, [sp, #56]	; 0x38
 8009780:	f8d8 3000 	ldr.w	r3, [r8]
 8009784:	900a      	str	r0, [sp, #40]	; 0x28
 8009786:	3307      	adds	r3, #7
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	f103 0208 	add.w	r2, r3, #8
 8009790:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009794:	f8d4 b000 	ldr.w	fp, [r4]
 8009798:	f8c8 2000 	str.w	r2, [r8]
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097a4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80097a8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80097ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ae:	f04f 32ff 	mov.w	r2, #4294967295
 80097b2:	4640      	mov	r0, r8
 80097b4:	4b9c      	ldr	r3, [pc, #624]	; (8009a28 <_printf_float+0x2cc>)
 80097b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b8:	f7f7 f928 	bl	8000a0c <__aeabi_dcmpun>
 80097bc:	bb70      	cbnz	r0, 800981c <_printf_float+0xc0>
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	4640      	mov	r0, r8
 80097c4:	4b98      	ldr	r3, [pc, #608]	; (8009a28 <_printf_float+0x2cc>)
 80097c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c8:	f7f7 f902 	bl	80009d0 <__aeabi_dcmple>
 80097cc:	bb30      	cbnz	r0, 800981c <_printf_float+0xc0>
 80097ce:	2200      	movs	r2, #0
 80097d0:	2300      	movs	r3, #0
 80097d2:	4640      	mov	r0, r8
 80097d4:	4651      	mov	r1, sl
 80097d6:	f7f7 f8f1 	bl	80009bc <__aeabi_dcmplt>
 80097da:	b110      	cbz	r0, 80097e2 <_printf_float+0x86>
 80097dc:	232d      	movs	r3, #45	; 0x2d
 80097de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e2:	4b92      	ldr	r3, [pc, #584]	; (8009a2c <_printf_float+0x2d0>)
 80097e4:	4892      	ldr	r0, [pc, #584]	; (8009a30 <_printf_float+0x2d4>)
 80097e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80097ea:	bf94      	ite	ls
 80097ec:	4698      	movls	r8, r3
 80097ee:	4680      	movhi	r8, r0
 80097f0:	2303      	movs	r3, #3
 80097f2:	f04f 0a00 	mov.w	sl, #0
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	f02b 0304 	bic.w	r3, fp, #4
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	4633      	mov	r3, r6
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	9700      	str	r7, [sp, #0]
 8009806:	aa0f      	add	r2, sp, #60	; 0x3c
 8009808:	f000 f9d4 	bl	8009bb4 <_printf_common>
 800980c:	3001      	adds	r0, #1
 800980e:	f040 8090 	bne.w	8009932 <_printf_float+0x1d6>
 8009812:	f04f 30ff 	mov.w	r0, #4294967295
 8009816:	b011      	add	sp, #68	; 0x44
 8009818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	4642      	mov	r2, r8
 800981e:	4653      	mov	r3, sl
 8009820:	4640      	mov	r0, r8
 8009822:	4651      	mov	r1, sl
 8009824:	f7f7 f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8009828:	b148      	cbz	r0, 800983e <_printf_float+0xe2>
 800982a:	f1ba 0f00 	cmp.w	sl, #0
 800982e:	bfb8      	it	lt
 8009830:	232d      	movlt	r3, #45	; 0x2d
 8009832:	4880      	ldr	r0, [pc, #512]	; (8009a34 <_printf_float+0x2d8>)
 8009834:	bfb8      	it	lt
 8009836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800983a:	4b7f      	ldr	r3, [pc, #508]	; (8009a38 <_printf_float+0x2dc>)
 800983c:	e7d3      	b.n	80097e6 <_printf_float+0x8a>
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	d142      	bne.n	80098ce <_printf_float+0x172>
 8009848:	2306      	movs	r3, #6
 800984a:	6063      	str	r3, [r4, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	9206      	str	r2, [sp, #24]
 8009850:	aa0e      	add	r2, sp, #56	; 0x38
 8009852:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009856:	aa0d      	add	r2, sp, #52	; 0x34
 8009858:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800985c:	9203      	str	r2, [sp, #12]
 800985e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009862:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	6863      	ldr	r3, [r4, #4]
 800986a:	4642      	mov	r2, r8
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4628      	mov	r0, r5
 8009870:	4653      	mov	r3, sl
 8009872:	910b      	str	r1, [sp, #44]	; 0x2c
 8009874:	f7ff fed4 	bl	8009620 <__cvt>
 8009878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800987a:	4680      	mov	r8, r0
 800987c:	2947      	cmp	r1, #71	; 0x47
 800987e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009880:	d108      	bne.n	8009894 <_printf_float+0x138>
 8009882:	1cc8      	adds	r0, r1, #3
 8009884:	db02      	blt.n	800988c <_printf_float+0x130>
 8009886:	6863      	ldr	r3, [r4, #4]
 8009888:	4299      	cmp	r1, r3
 800988a:	dd40      	ble.n	800990e <_printf_float+0x1b2>
 800988c:	f1a9 0902 	sub.w	r9, r9, #2
 8009890:	fa5f f989 	uxtb.w	r9, r9
 8009894:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009898:	d81f      	bhi.n	80098da <_printf_float+0x17e>
 800989a:	464a      	mov	r2, r9
 800989c:	3901      	subs	r1, #1
 800989e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098a2:	910d      	str	r1, [sp, #52]	; 0x34
 80098a4:	f7ff ff1b 	bl	80096de <__exponent>
 80098a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098aa:	4682      	mov	sl, r0
 80098ac:	1813      	adds	r3, r2, r0
 80098ae:	2a01      	cmp	r2, #1
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	dc02      	bgt.n	80098ba <_printf_float+0x15e>
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	07d2      	lsls	r2, r2, #31
 80098b8:	d501      	bpl.n	80098be <_printf_float+0x162>
 80098ba:	3301      	adds	r3, #1
 80098bc:	6123      	str	r3, [r4, #16]
 80098be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d09b      	beq.n	80097fe <_printf_float+0xa2>
 80098c6:	232d      	movs	r3, #45	; 0x2d
 80098c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098cc:	e797      	b.n	80097fe <_printf_float+0xa2>
 80098ce:	2947      	cmp	r1, #71	; 0x47
 80098d0:	d1bc      	bne.n	800984c <_printf_float+0xf0>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1ba      	bne.n	800984c <_printf_float+0xf0>
 80098d6:	2301      	movs	r3, #1
 80098d8:	e7b7      	b.n	800984a <_printf_float+0xee>
 80098da:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80098de:	d118      	bne.n	8009912 <_printf_float+0x1b6>
 80098e0:	2900      	cmp	r1, #0
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	dd0b      	ble.n	80098fe <_printf_float+0x1a2>
 80098e6:	6121      	str	r1, [r4, #16]
 80098e8:	b913      	cbnz	r3, 80098f0 <_printf_float+0x194>
 80098ea:	6822      	ldr	r2, [r4, #0]
 80098ec:	07d0      	lsls	r0, r2, #31
 80098ee:	d502      	bpl.n	80098f6 <_printf_float+0x19a>
 80098f0:	3301      	adds	r3, #1
 80098f2:	440b      	add	r3, r1
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	f04f 0a00 	mov.w	sl, #0
 80098fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80098fc:	e7df      	b.n	80098be <_printf_float+0x162>
 80098fe:	b913      	cbnz	r3, 8009906 <_printf_float+0x1aa>
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	07d2      	lsls	r2, r2, #31
 8009904:	d501      	bpl.n	800990a <_printf_float+0x1ae>
 8009906:	3302      	adds	r3, #2
 8009908:	e7f4      	b.n	80098f4 <_printf_float+0x198>
 800990a:	2301      	movs	r3, #1
 800990c:	e7f2      	b.n	80098f4 <_printf_float+0x198>
 800990e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009914:	4299      	cmp	r1, r3
 8009916:	db05      	blt.n	8009924 <_printf_float+0x1c8>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	6121      	str	r1, [r4, #16]
 800991c:	07d8      	lsls	r0, r3, #31
 800991e:	d5ea      	bpl.n	80098f6 <_printf_float+0x19a>
 8009920:	1c4b      	adds	r3, r1, #1
 8009922:	e7e7      	b.n	80098f4 <_printf_float+0x198>
 8009924:	2900      	cmp	r1, #0
 8009926:	bfcc      	ite	gt
 8009928:	2201      	movgt	r2, #1
 800992a:	f1c1 0202 	rsble	r2, r1, #2
 800992e:	4413      	add	r3, r2
 8009930:	e7e0      	b.n	80098f4 <_printf_float+0x198>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	055a      	lsls	r2, r3, #21
 8009936:	d407      	bmi.n	8009948 <_printf_float+0x1ec>
 8009938:	6923      	ldr	r3, [r4, #16]
 800993a:	4642      	mov	r2, r8
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	d12b      	bne.n	800999e <_printf_float+0x242>
 8009946:	e764      	b.n	8009812 <_printf_float+0xb6>
 8009948:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800994c:	f240 80dd 	bls.w	8009b0a <_printf_float+0x3ae>
 8009950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009954:	2200      	movs	r2, #0
 8009956:	2300      	movs	r3, #0
 8009958:	f7f7 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800995c:	2800      	cmp	r0, #0
 800995e:	d033      	beq.n	80099c8 <_printf_float+0x26c>
 8009960:	2301      	movs	r3, #1
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	4a35      	ldr	r2, [pc, #212]	; (8009a3c <_printf_float+0x2e0>)
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	f43f af51 	beq.w	8009812 <_printf_float+0xb6>
 8009970:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009974:	429a      	cmp	r2, r3
 8009976:	db02      	blt.n	800997e <_printf_float+0x222>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	07d8      	lsls	r0, r3, #31
 800997c:	d50f      	bpl.n	800999e <_printf_float+0x242>
 800997e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009982:	4631      	mov	r1, r6
 8009984:	4628      	mov	r0, r5
 8009986:	47b8      	blx	r7
 8009988:	3001      	adds	r0, #1
 800998a:	f43f af42 	beq.w	8009812 <_printf_float+0xb6>
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	f104 091a 	add.w	r9, r4, #26
 8009996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009998:	3b01      	subs	r3, #1
 800999a:	4543      	cmp	r3, r8
 800999c:	dc09      	bgt.n	80099b2 <_printf_float+0x256>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	079b      	lsls	r3, r3, #30
 80099a2:	f100 8102 	bmi.w	8009baa <_printf_float+0x44e>
 80099a6:	68e0      	ldr	r0, [r4, #12]
 80099a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099aa:	4298      	cmp	r0, r3
 80099ac:	bfb8      	it	lt
 80099ae:	4618      	movlt	r0, r3
 80099b0:	e731      	b.n	8009816 <_printf_float+0xba>
 80099b2:	2301      	movs	r3, #1
 80099b4:	464a      	mov	r2, r9
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	f43f af28 	beq.w	8009812 <_printf_float+0xb6>
 80099c2:	f108 0801 	add.w	r8, r8, #1
 80099c6:	e7e6      	b.n	8009996 <_printf_float+0x23a>
 80099c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dc38      	bgt.n	8009a40 <_printf_float+0x2e4>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	4a19      	ldr	r2, [pc, #100]	; (8009a3c <_printf_float+0x2e0>)
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f af1a 	beq.w	8009812 <_printf_float+0xb6>
 80099de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099e2:	4313      	orrs	r3, r2
 80099e4:	d102      	bne.n	80099ec <_printf_float+0x290>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	07d9      	lsls	r1, r3, #31
 80099ea:	d5d8      	bpl.n	800999e <_printf_float+0x242>
 80099ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af0b 	beq.w	8009812 <_printf_float+0xb6>
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	f104 0a1a 	add.w	sl, r4, #26
 8009a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a06:	425b      	negs	r3, r3
 8009a08:	454b      	cmp	r3, r9
 8009a0a:	dc01      	bgt.n	8009a10 <_printf_float+0x2b4>
 8009a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a0e:	e794      	b.n	800993a <_printf_float+0x1de>
 8009a10:	2301      	movs	r3, #1
 8009a12:	4652      	mov	r2, sl
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f aef9 	beq.w	8009812 <_printf_float+0xb6>
 8009a20:	f109 0901 	add.w	r9, r9, #1
 8009a24:	e7ee      	b.n	8009a04 <_printf_float+0x2a8>
 8009a26:	bf00      	nop
 8009a28:	7fefffff 	.word	0x7fefffff
 8009a2c:	08010d85 	.word	0x08010d85
 8009a30:	08010d89 	.word	0x08010d89
 8009a34:	08010d91 	.word	0x08010d91
 8009a38:	08010d8d 	.word	0x08010d8d
 8009a3c:	08010d95 	.word	0x08010d95
 8009a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bfa8      	it	ge
 8009a48:	461a      	movge	r2, r3
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	4691      	mov	r9, r2
 8009a4e:	dc37      	bgt.n	8009ac0 <_printf_float+0x364>
 8009a50:	f04f 0b00 	mov.w	fp, #0
 8009a54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a58:	f104 021a 	add.w	r2, r4, #26
 8009a5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a60:	ebaa 0309 	sub.w	r3, sl, r9
 8009a64:	455b      	cmp	r3, fp
 8009a66:	dc33      	bgt.n	8009ad0 <_printf_float+0x374>
 8009a68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	db3b      	blt.n	8009ae8 <_printf_float+0x38c>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	07da      	lsls	r2, r3, #31
 8009a74:	d438      	bmi.n	8009ae8 <_printf_float+0x38c>
 8009a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a7a:	eba2 030a 	sub.w	r3, r2, sl
 8009a7e:	eba2 0901 	sub.w	r9, r2, r1
 8009a82:	4599      	cmp	r9, r3
 8009a84:	bfa8      	it	ge
 8009a86:	4699      	movge	r9, r3
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	dc34      	bgt.n	8009af8 <_printf_float+0x39c>
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a96:	f104 0a1a 	add.w	sl, r4, #26
 8009a9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	eba3 0309 	sub.w	r3, r3, r9
 8009aa4:	4543      	cmp	r3, r8
 8009aa6:	f77f af7a 	ble.w	800999e <_printf_float+0x242>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4652      	mov	r2, sl
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b8      	blx	r7
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f43f aeac 	beq.w	8009812 <_printf_float+0xb6>
 8009aba:	f108 0801 	add.w	r8, r8, #1
 8009abe:	e7ec      	b.n	8009a9a <_printf_float+0x33e>
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b8      	blx	r7
 8009aca:	3001      	adds	r0, #1
 8009acc:	d1c0      	bne.n	8009a50 <_printf_float+0x2f4>
 8009ace:	e6a0      	b.n	8009812 <_printf_float+0xb6>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f ae99 	beq.w	8009812 <_printf_float+0xb6>
 8009ae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ae2:	f10b 0b01 	add.w	fp, fp, #1
 8009ae6:	e7b9      	b.n	8009a5c <_printf_float+0x300>
 8009ae8:	4631      	mov	r1, r6
 8009aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d1bf      	bne.n	8009a76 <_printf_float+0x31a>
 8009af6:	e68c      	b.n	8009812 <_printf_float+0xb6>
 8009af8:	464b      	mov	r3, r9
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	eb08 020a 	add.w	r2, r8, sl
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	d1c2      	bne.n	8009a8e <_printf_float+0x332>
 8009b08:	e683      	b.n	8009812 <_printf_float+0xb6>
 8009b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b0c:	2a01      	cmp	r2, #1
 8009b0e:	dc01      	bgt.n	8009b14 <_printf_float+0x3b8>
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d537      	bpl.n	8009b84 <_printf_float+0x428>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4642      	mov	r2, r8
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f ae77 	beq.w	8009812 <_printf_float+0xb6>
 8009b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f43f ae6f 	beq.w	8009812 <_printf_float+0xb6>
 8009b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f7f6 ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8009b40:	b9d8      	cbnz	r0, 8009b7a <_printf_float+0x41e>
 8009b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b44:	f108 0201 	add.w	r2, r8, #1
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	d10e      	bne.n	8009b72 <_printf_float+0x416>
 8009b54:	e65d      	b.n	8009812 <_printf_float+0xb6>
 8009b56:	2301      	movs	r3, #1
 8009b58:	464a      	mov	r2, r9
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	f43f ae56 	beq.w	8009812 <_printf_float+0xb6>
 8009b66:	f108 0801 	add.w	r8, r8, #1
 8009b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4543      	cmp	r3, r8
 8009b70:	dcf1      	bgt.n	8009b56 <_printf_float+0x3fa>
 8009b72:	4653      	mov	r3, sl
 8009b74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b78:	e6e0      	b.n	800993c <_printf_float+0x1e0>
 8009b7a:	f04f 0800 	mov.w	r8, #0
 8009b7e:	f104 091a 	add.w	r9, r4, #26
 8009b82:	e7f2      	b.n	8009b6a <_printf_float+0x40e>
 8009b84:	2301      	movs	r3, #1
 8009b86:	4642      	mov	r2, r8
 8009b88:	e7df      	b.n	8009b4a <_printf_float+0x3ee>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	4631      	mov	r1, r6
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b8      	blx	r7
 8009b94:	3001      	adds	r0, #1
 8009b96:	f43f ae3c 	beq.w	8009812 <_printf_float+0xb6>
 8009b9a:	f108 0801 	add.w	r8, r8, #1
 8009b9e:	68e3      	ldr	r3, [r4, #12]
 8009ba0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ba2:	1a5b      	subs	r3, r3, r1
 8009ba4:	4543      	cmp	r3, r8
 8009ba6:	dcf0      	bgt.n	8009b8a <_printf_float+0x42e>
 8009ba8:	e6fd      	b.n	80099a6 <_printf_float+0x24a>
 8009baa:	f04f 0800 	mov.w	r8, #0
 8009bae:	f104 0919 	add.w	r9, r4, #25
 8009bb2:	e7f4      	b.n	8009b9e <_printf_float+0x442>

08009bb4 <_printf_common>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	4616      	mov	r6, r2
 8009bba:	4699      	mov	r9, r3
 8009bbc:	688a      	ldr	r2, [r1, #8]
 8009bbe:	690b      	ldr	r3, [r1, #16]
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	bfb8      	it	lt
 8009bc6:	4613      	movlt	r3, r2
 8009bc8:	6033      	str	r3, [r6, #0]
 8009bca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bce:	460c      	mov	r4, r1
 8009bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bd4:	b10a      	cbz	r2, 8009bda <_printf_common+0x26>
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	0699      	lsls	r1, r3, #26
 8009bde:	bf42      	ittt	mi
 8009be0:	6833      	ldrmi	r3, [r6, #0]
 8009be2:	3302      	addmi	r3, #2
 8009be4:	6033      	strmi	r3, [r6, #0]
 8009be6:	6825      	ldr	r5, [r4, #0]
 8009be8:	f015 0506 	ands.w	r5, r5, #6
 8009bec:	d106      	bne.n	8009bfc <_printf_common+0x48>
 8009bee:	f104 0a19 	add.w	sl, r4, #25
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	6832      	ldr	r2, [r6, #0]
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dc28      	bgt.n	8009c4e <_printf_common+0x9a>
 8009bfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c00:	1e13      	subs	r3, r2, #0
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	bf18      	it	ne
 8009c06:	2301      	movne	r3, #1
 8009c08:	0692      	lsls	r2, r2, #26
 8009c0a:	d42d      	bmi.n	8009c68 <_printf_common+0xb4>
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c14:	47c0      	blx	r8
 8009c16:	3001      	adds	r0, #1
 8009c18:	d020      	beq.n	8009c5c <_printf_common+0xa8>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	68e5      	ldr	r5, [r4, #12]
 8009c1e:	f003 0306 	and.w	r3, r3, #6
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	bf18      	it	ne
 8009c26:	2500      	movne	r5, #0
 8009c28:	6832      	ldr	r2, [r6, #0]
 8009c2a:	f04f 0600 	mov.w	r6, #0
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	bf08      	it	eq
 8009c32:	1aad      	subeq	r5, r5, r2
 8009c34:	6922      	ldr	r2, [r4, #16]
 8009c36:	bf08      	it	eq
 8009c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	bfc4      	itt	gt
 8009c40:	1a9b      	subgt	r3, r3, r2
 8009c42:	18ed      	addgt	r5, r5, r3
 8009c44:	341a      	adds	r4, #26
 8009c46:	42b5      	cmp	r5, r6
 8009c48:	d11a      	bne.n	8009c80 <_printf_common+0xcc>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e008      	b.n	8009c60 <_printf_common+0xac>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4652      	mov	r2, sl
 8009c52:	4649      	mov	r1, r9
 8009c54:	4638      	mov	r0, r7
 8009c56:	47c0      	blx	r8
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d103      	bne.n	8009c64 <_printf_common+0xb0>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c64:	3501      	adds	r5, #1
 8009c66:	e7c4      	b.n	8009bf2 <_printf_common+0x3e>
 8009c68:	2030      	movs	r0, #48	; 0x30
 8009c6a:	18e1      	adds	r1, r4, r3
 8009c6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c76:	4422      	add	r2, r4
 8009c78:	3302      	adds	r3, #2
 8009c7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c7e:	e7c5      	b.n	8009c0c <_printf_common+0x58>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4622      	mov	r2, r4
 8009c84:	4649      	mov	r1, r9
 8009c86:	4638      	mov	r0, r7
 8009c88:	47c0      	blx	r8
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d0e6      	beq.n	8009c5c <_printf_common+0xa8>
 8009c8e:	3601      	adds	r6, #1
 8009c90:	e7d9      	b.n	8009c46 <_printf_common+0x92>
	...

08009c94 <_printf_i>:
 8009c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	460c      	mov	r4, r1
 8009c9a:	7e27      	ldrb	r7, [r4, #24]
 8009c9c:	4691      	mov	r9, r2
 8009c9e:	2f78      	cmp	r7, #120	; 0x78
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	469a      	mov	sl, r3
 8009ca4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009caa:	d807      	bhi.n	8009cbc <_printf_i+0x28>
 8009cac:	2f62      	cmp	r7, #98	; 0x62
 8009cae:	d80a      	bhi.n	8009cc6 <_printf_i+0x32>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	f000 80d9 	beq.w	8009e68 <_printf_i+0x1d4>
 8009cb6:	2f58      	cmp	r7, #88	; 0x58
 8009cb8:	f000 80a4 	beq.w	8009e04 <_printf_i+0x170>
 8009cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cc4:	e03a      	b.n	8009d3c <_printf_i+0xa8>
 8009cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cca:	2b15      	cmp	r3, #21
 8009ccc:	d8f6      	bhi.n	8009cbc <_printf_i+0x28>
 8009cce:	a001      	add	r0, pc, #4	; (adr r0, 8009cd4 <_printf_i+0x40>)
 8009cd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009cd4:	08009d2d 	.word	0x08009d2d
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009cbd 	.word	0x08009cbd
 8009ce0:	08009cbd 	.word	0x08009cbd
 8009ce4:	08009cbd 	.word	0x08009cbd
 8009ce8:	08009cbd 	.word	0x08009cbd
 8009cec:	08009d41 	.word	0x08009d41
 8009cf0:	08009cbd 	.word	0x08009cbd
 8009cf4:	08009cbd 	.word	0x08009cbd
 8009cf8:	08009cbd 	.word	0x08009cbd
 8009cfc:	08009cbd 	.word	0x08009cbd
 8009d00:	08009e4f 	.word	0x08009e4f
 8009d04:	08009d71 	.word	0x08009d71
 8009d08:	08009e31 	.word	0x08009e31
 8009d0c:	08009cbd 	.word	0x08009cbd
 8009d10:	08009cbd 	.word	0x08009cbd
 8009d14:	08009e71 	.word	0x08009e71
 8009d18:	08009cbd 	.word	0x08009cbd
 8009d1c:	08009d71 	.word	0x08009d71
 8009d20:	08009cbd 	.word	0x08009cbd
 8009d24:	08009cbd 	.word	0x08009cbd
 8009d28:	08009e39 	.word	0x08009e39
 8009d2c:	680b      	ldr	r3, [r1, #0]
 8009d2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	600a      	str	r2, [r1, #0]
 8009d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0a4      	b.n	8009e8a <_printf_i+0x1f6>
 8009d40:	6825      	ldr	r5, [r4, #0]
 8009d42:	6808      	ldr	r0, [r1, #0]
 8009d44:	062e      	lsls	r6, r5, #24
 8009d46:	f100 0304 	add.w	r3, r0, #4
 8009d4a:	d50a      	bpl.n	8009d62 <_printf_i+0xce>
 8009d4c:	6805      	ldr	r5, [r0, #0]
 8009d4e:	600b      	str	r3, [r1, #0]
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	da03      	bge.n	8009d5c <_printf_i+0xc8>
 8009d54:	232d      	movs	r3, #45	; 0x2d
 8009d56:	426d      	negs	r5, r5
 8009d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d5c:	230a      	movs	r3, #10
 8009d5e:	485e      	ldr	r0, [pc, #376]	; (8009ed8 <_printf_i+0x244>)
 8009d60:	e019      	b.n	8009d96 <_printf_i+0x102>
 8009d62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d66:	6805      	ldr	r5, [r0, #0]
 8009d68:	600b      	str	r3, [r1, #0]
 8009d6a:	bf18      	it	ne
 8009d6c:	b22d      	sxthne	r5, r5
 8009d6e:	e7ef      	b.n	8009d50 <_printf_i+0xbc>
 8009d70:	680b      	ldr	r3, [r1, #0]
 8009d72:	6825      	ldr	r5, [r4, #0]
 8009d74:	1d18      	adds	r0, r3, #4
 8009d76:	6008      	str	r0, [r1, #0]
 8009d78:	0628      	lsls	r0, r5, #24
 8009d7a:	d501      	bpl.n	8009d80 <_printf_i+0xec>
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	e002      	b.n	8009d86 <_printf_i+0xf2>
 8009d80:	0669      	lsls	r1, r5, #25
 8009d82:	d5fb      	bpl.n	8009d7c <_printf_i+0xe8>
 8009d84:	881d      	ldrh	r5, [r3, #0]
 8009d86:	2f6f      	cmp	r7, #111	; 0x6f
 8009d88:	bf0c      	ite	eq
 8009d8a:	2308      	moveq	r3, #8
 8009d8c:	230a      	movne	r3, #10
 8009d8e:	4852      	ldr	r0, [pc, #328]	; (8009ed8 <_printf_i+0x244>)
 8009d90:	2100      	movs	r1, #0
 8009d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d96:	6866      	ldr	r6, [r4, #4]
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	bfa8      	it	ge
 8009d9c:	6821      	ldrge	r1, [r4, #0]
 8009d9e:	60a6      	str	r6, [r4, #8]
 8009da0:	bfa4      	itt	ge
 8009da2:	f021 0104 	bicge.w	r1, r1, #4
 8009da6:	6021      	strge	r1, [r4, #0]
 8009da8:	b90d      	cbnz	r5, 8009dae <_printf_i+0x11a>
 8009daa:	2e00      	cmp	r6, #0
 8009dac:	d04d      	beq.n	8009e4a <_printf_i+0x1b6>
 8009dae:	4616      	mov	r6, r2
 8009db0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009db4:	fb03 5711 	mls	r7, r3, r1, r5
 8009db8:	5dc7      	ldrb	r7, [r0, r7]
 8009dba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dbe:	462f      	mov	r7, r5
 8009dc0:	42bb      	cmp	r3, r7
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	d9f4      	bls.n	8009db0 <_printf_i+0x11c>
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d10b      	bne.n	8009de2 <_printf_i+0x14e>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07df      	lsls	r7, r3, #31
 8009dce:	d508      	bpl.n	8009de2 <_printf_i+0x14e>
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	6861      	ldr	r1, [r4, #4]
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	bfde      	ittt	le
 8009dd8:	2330      	movle	r3, #48	; 0x30
 8009dda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009de2:	1b92      	subs	r2, r2, r6
 8009de4:	6122      	str	r2, [r4, #16]
 8009de6:	464b      	mov	r3, r9
 8009de8:	4621      	mov	r1, r4
 8009dea:	4640      	mov	r0, r8
 8009dec:	f8cd a000 	str.w	sl, [sp]
 8009df0:	aa03      	add	r2, sp, #12
 8009df2:	f7ff fedf 	bl	8009bb4 <_printf_common>
 8009df6:	3001      	adds	r0, #1
 8009df8:	d14c      	bne.n	8009e94 <_printf_i+0x200>
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	b004      	add	sp, #16
 8009e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e04:	4834      	ldr	r0, [pc, #208]	; (8009ed8 <_printf_i+0x244>)
 8009e06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e0a:	680e      	ldr	r6, [r1, #0]
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e12:	061f      	lsls	r7, r3, #24
 8009e14:	600e      	str	r6, [r1, #0]
 8009e16:	d514      	bpl.n	8009e42 <_printf_i+0x1ae>
 8009e18:	07d9      	lsls	r1, r3, #31
 8009e1a:	bf44      	itt	mi
 8009e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e20:	6023      	strmi	r3, [r4, #0]
 8009e22:	b91d      	cbnz	r5, 8009e2c <_printf_i+0x198>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	f023 0320 	bic.w	r3, r3, #32
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	e7af      	b.n	8009d90 <_printf_i+0xfc>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	f043 0320 	orr.w	r3, r3, #32
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	2378      	movs	r3, #120	; 0x78
 8009e3a:	4828      	ldr	r0, [pc, #160]	; (8009edc <_printf_i+0x248>)
 8009e3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e40:	e7e3      	b.n	8009e0a <_printf_i+0x176>
 8009e42:	065e      	lsls	r6, r3, #25
 8009e44:	bf48      	it	mi
 8009e46:	b2ad      	uxthmi	r5, r5
 8009e48:	e7e6      	b.n	8009e18 <_printf_i+0x184>
 8009e4a:	4616      	mov	r6, r2
 8009e4c:	e7bb      	b.n	8009dc6 <_printf_i+0x132>
 8009e4e:	680b      	ldr	r3, [r1, #0]
 8009e50:	6826      	ldr	r6, [r4, #0]
 8009e52:	1d1d      	adds	r5, r3, #4
 8009e54:	6960      	ldr	r0, [r4, #20]
 8009e56:	600d      	str	r5, [r1, #0]
 8009e58:	0635      	lsls	r5, r6, #24
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	d501      	bpl.n	8009e62 <_printf_i+0x1ce>
 8009e5e:	6018      	str	r0, [r3, #0]
 8009e60:	e002      	b.n	8009e68 <_printf_i+0x1d4>
 8009e62:	0671      	lsls	r1, r6, #25
 8009e64:	d5fb      	bpl.n	8009e5e <_printf_i+0x1ca>
 8009e66:	8018      	strh	r0, [r3, #0]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4616      	mov	r6, r2
 8009e6c:	6123      	str	r3, [r4, #16]
 8009e6e:	e7ba      	b.n	8009de6 <_printf_i+0x152>
 8009e70:	680b      	ldr	r3, [r1, #0]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	600a      	str	r2, [r1, #0]
 8009e76:	681e      	ldr	r6, [r3, #0]
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	6862      	ldr	r2, [r4, #4]
 8009e7e:	f002 fe31 	bl	800cae4 <memchr>
 8009e82:	b108      	cbz	r0, 8009e88 <_printf_i+0x1f4>
 8009e84:	1b80      	subs	r0, r0, r6
 8009e86:	6060      	str	r0, [r4, #4]
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e92:	e7a8      	b.n	8009de6 <_printf_i+0x152>
 8009e94:	4632      	mov	r2, r6
 8009e96:	4649      	mov	r1, r9
 8009e98:	4640      	mov	r0, r8
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	47d0      	blx	sl
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	d0ab      	beq.n	8009dfa <_printf_i+0x166>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	079b      	lsls	r3, r3, #30
 8009ea6:	d413      	bmi.n	8009ed0 <_printf_i+0x23c>
 8009ea8:	68e0      	ldr	r0, [r4, #12]
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	4298      	cmp	r0, r3
 8009eae:	bfb8      	it	lt
 8009eb0:	4618      	movlt	r0, r3
 8009eb2:	e7a4      	b.n	8009dfe <_printf_i+0x16a>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4632      	mov	r2, r6
 8009eb8:	4649      	mov	r1, r9
 8009eba:	4640      	mov	r0, r8
 8009ebc:	47d0      	blx	sl
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d09b      	beq.n	8009dfa <_printf_i+0x166>
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	68e3      	ldr	r3, [r4, #12]
 8009ec6:	9903      	ldr	r1, [sp, #12]
 8009ec8:	1a5b      	subs	r3, r3, r1
 8009eca:	42ab      	cmp	r3, r5
 8009ecc:	dcf2      	bgt.n	8009eb4 <_printf_i+0x220>
 8009ece:	e7eb      	b.n	8009ea8 <_printf_i+0x214>
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	f104 0619 	add.w	r6, r4, #25
 8009ed6:	e7f5      	b.n	8009ec4 <_printf_i+0x230>
 8009ed8:	08010d97 	.word	0x08010d97
 8009edc:	08010da8 	.word	0x08010da8

08009ee0 <_scanf_float>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	b087      	sub	sp, #28
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	688b      	ldr	r3, [r1, #8]
 8009eea:	4617      	mov	r7, r2
 8009eec:	1e5a      	subs	r2, r3, #1
 8009eee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ef2:	bf85      	ittet	hi
 8009ef4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ef8:	195b      	addhi	r3, r3, r5
 8009efa:	2300      	movls	r3, #0
 8009efc:	9302      	strhi	r3, [sp, #8]
 8009efe:	bf88      	it	hi
 8009f00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f04:	468b      	mov	fp, r1
 8009f06:	f04f 0500 	mov.w	r5, #0
 8009f0a:	bf8c      	ite	hi
 8009f0c:	608b      	strhi	r3, [r1, #8]
 8009f0e:	9302      	strls	r3, [sp, #8]
 8009f10:	680b      	ldr	r3, [r1, #0]
 8009f12:	4680      	mov	r8, r0
 8009f14:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f18:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	465e      	mov	r6, fp
 8009f20:	46aa      	mov	sl, r5
 8009f22:	46a9      	mov	r9, r5
 8009f24:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f28:	9501      	str	r5, [sp, #4]
 8009f2a:	68a2      	ldr	r2, [r4, #8]
 8009f2c:	b152      	cbz	r2, 8009f44 <_scanf_float+0x64>
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b4e      	cmp	r3, #78	; 0x4e
 8009f34:	d864      	bhi.n	800a000 <_scanf_float+0x120>
 8009f36:	2b40      	cmp	r3, #64	; 0x40
 8009f38:	d83c      	bhi.n	8009fb4 <_scanf_float+0xd4>
 8009f3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f3e:	b2c8      	uxtb	r0, r1
 8009f40:	280e      	cmp	r0, #14
 8009f42:	d93a      	bls.n	8009fba <_scanf_float+0xda>
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	d003      	beq.n	8009f52 <_scanf_float+0x72>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f56:	f1ba 0f01 	cmp.w	sl, #1
 8009f5a:	f200 8113 	bhi.w	800a184 <_scanf_float+0x2a4>
 8009f5e:	455e      	cmp	r6, fp
 8009f60:	f200 8105 	bhi.w	800a16e <_scanf_float+0x28e>
 8009f64:	2501      	movs	r5, #1
 8009f66:	4628      	mov	r0, r5
 8009f68:	b007      	add	sp, #28
 8009f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009f72:	2a0d      	cmp	r2, #13
 8009f74:	d8e6      	bhi.n	8009f44 <_scanf_float+0x64>
 8009f76:	a101      	add	r1, pc, #4	; (adr r1, 8009f7c <_scanf_float+0x9c>)
 8009f78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f7c:	0800a0bb 	.word	0x0800a0bb
 8009f80:	08009f45 	.word	0x08009f45
 8009f84:	08009f45 	.word	0x08009f45
 8009f88:	08009f45 	.word	0x08009f45
 8009f8c:	0800a11b 	.word	0x0800a11b
 8009f90:	0800a0f3 	.word	0x0800a0f3
 8009f94:	08009f45 	.word	0x08009f45
 8009f98:	08009f45 	.word	0x08009f45
 8009f9c:	0800a0c9 	.word	0x0800a0c9
 8009fa0:	08009f45 	.word	0x08009f45
 8009fa4:	08009f45 	.word	0x08009f45
 8009fa8:	08009f45 	.word	0x08009f45
 8009fac:	08009f45 	.word	0x08009f45
 8009fb0:	0800a081 	.word	0x0800a081
 8009fb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009fb8:	e7db      	b.n	8009f72 <_scanf_float+0x92>
 8009fba:	290e      	cmp	r1, #14
 8009fbc:	d8c2      	bhi.n	8009f44 <_scanf_float+0x64>
 8009fbe:	a001      	add	r0, pc, #4	; (adr r0, 8009fc4 <_scanf_float+0xe4>)
 8009fc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009fc4:	0800a073 	.word	0x0800a073
 8009fc8:	08009f45 	.word	0x08009f45
 8009fcc:	0800a073 	.word	0x0800a073
 8009fd0:	0800a107 	.word	0x0800a107
 8009fd4:	08009f45 	.word	0x08009f45
 8009fd8:	0800a021 	.word	0x0800a021
 8009fdc:	0800a05d 	.word	0x0800a05d
 8009fe0:	0800a05d 	.word	0x0800a05d
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a05d 	.word	0x0800a05d
 8009fec:	0800a05d 	.word	0x0800a05d
 8009ff0:	0800a05d 	.word	0x0800a05d
 8009ff4:	0800a05d 	.word	0x0800a05d
 8009ff8:	0800a05d 	.word	0x0800a05d
 8009ffc:	0800a05d 	.word	0x0800a05d
 800a000:	2b6e      	cmp	r3, #110	; 0x6e
 800a002:	d809      	bhi.n	800a018 <_scanf_float+0x138>
 800a004:	2b60      	cmp	r3, #96	; 0x60
 800a006:	d8b2      	bhi.n	8009f6e <_scanf_float+0x8e>
 800a008:	2b54      	cmp	r3, #84	; 0x54
 800a00a:	d077      	beq.n	800a0fc <_scanf_float+0x21c>
 800a00c:	2b59      	cmp	r3, #89	; 0x59
 800a00e:	d199      	bne.n	8009f44 <_scanf_float+0x64>
 800a010:	2d07      	cmp	r5, #7
 800a012:	d197      	bne.n	8009f44 <_scanf_float+0x64>
 800a014:	2508      	movs	r5, #8
 800a016:	e029      	b.n	800a06c <_scanf_float+0x18c>
 800a018:	2b74      	cmp	r3, #116	; 0x74
 800a01a:	d06f      	beq.n	800a0fc <_scanf_float+0x21c>
 800a01c:	2b79      	cmp	r3, #121	; 0x79
 800a01e:	e7f6      	b.n	800a00e <_scanf_float+0x12e>
 800a020:	6821      	ldr	r1, [r4, #0]
 800a022:	05c8      	lsls	r0, r1, #23
 800a024:	d51a      	bpl.n	800a05c <_scanf_float+0x17c>
 800a026:	9b02      	ldr	r3, [sp, #8]
 800a028:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a02c:	6021      	str	r1, [r4, #0]
 800a02e:	f109 0901 	add.w	r9, r9, #1
 800a032:	b11b      	cbz	r3, 800a03c <_scanf_float+0x15c>
 800a034:	3b01      	subs	r3, #1
 800a036:	3201      	adds	r2, #1
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	60a2      	str	r2, [r4, #8]
 800a03c:	68a3      	ldr	r3, [r4, #8]
 800a03e:	3b01      	subs	r3, #1
 800a040:	60a3      	str	r3, [r4, #8]
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	6123      	str	r3, [r4, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	f340 8084 	ble.w	800a15c <_scanf_float+0x27c>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	603b      	str	r3, [r7, #0]
 800a05a:	e766      	b.n	8009f2a <_scanf_float+0x4a>
 800a05c:	eb1a 0f05 	cmn.w	sl, r5
 800a060:	f47f af70 	bne.w	8009f44 <_scanf_float+0x64>
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	f806 3b01 	strb.w	r3, [r6], #1
 800a070:	e7e4      	b.n	800a03c <_scanf_float+0x15c>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	0610      	lsls	r0, r2, #24
 800a076:	f57f af65 	bpl.w	8009f44 <_scanf_float+0x64>
 800a07a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a07e:	e7f4      	b.n	800a06a <_scanf_float+0x18a>
 800a080:	f1ba 0f00 	cmp.w	sl, #0
 800a084:	d10e      	bne.n	800a0a4 <_scanf_float+0x1c4>
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d10e      	bne.n	800a0aa <_scanf_float+0x1ca>
 800a08c:	6822      	ldr	r2, [r4, #0]
 800a08e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a092:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a096:	d108      	bne.n	800a0aa <_scanf_float+0x1ca>
 800a098:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a09c:	f04f 0a01 	mov.w	sl, #1
 800a0a0:	6022      	str	r2, [r4, #0]
 800a0a2:	e7e3      	b.n	800a06c <_scanf_float+0x18c>
 800a0a4:	f1ba 0f02 	cmp.w	sl, #2
 800a0a8:	d055      	beq.n	800a156 <_scanf_float+0x276>
 800a0aa:	2d01      	cmp	r5, #1
 800a0ac:	d002      	beq.n	800a0b4 <_scanf_float+0x1d4>
 800a0ae:	2d04      	cmp	r5, #4
 800a0b0:	f47f af48 	bne.w	8009f44 <_scanf_float+0x64>
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	b2ed      	uxtb	r5, r5
 800a0b8:	e7d8      	b.n	800a06c <_scanf_float+0x18c>
 800a0ba:	f1ba 0f01 	cmp.w	sl, #1
 800a0be:	f47f af41 	bne.w	8009f44 <_scanf_float+0x64>
 800a0c2:	f04f 0a02 	mov.w	sl, #2
 800a0c6:	e7d1      	b.n	800a06c <_scanf_float+0x18c>
 800a0c8:	b97d      	cbnz	r5, 800a0ea <_scanf_float+0x20a>
 800a0ca:	f1b9 0f00 	cmp.w	r9, #0
 800a0ce:	f47f af3c 	bne.w	8009f4a <_scanf_float+0x6a>
 800a0d2:	6822      	ldr	r2, [r4, #0]
 800a0d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0dc:	f47f af39 	bne.w	8009f52 <_scanf_float+0x72>
 800a0e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0e4:	2501      	movs	r5, #1
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	e7c0      	b.n	800a06c <_scanf_float+0x18c>
 800a0ea:	2d03      	cmp	r5, #3
 800a0ec:	d0e2      	beq.n	800a0b4 <_scanf_float+0x1d4>
 800a0ee:	2d05      	cmp	r5, #5
 800a0f0:	e7de      	b.n	800a0b0 <_scanf_float+0x1d0>
 800a0f2:	2d02      	cmp	r5, #2
 800a0f4:	f47f af26 	bne.w	8009f44 <_scanf_float+0x64>
 800a0f8:	2503      	movs	r5, #3
 800a0fa:	e7b7      	b.n	800a06c <_scanf_float+0x18c>
 800a0fc:	2d06      	cmp	r5, #6
 800a0fe:	f47f af21 	bne.w	8009f44 <_scanf_float+0x64>
 800a102:	2507      	movs	r5, #7
 800a104:	e7b2      	b.n	800a06c <_scanf_float+0x18c>
 800a106:	6822      	ldr	r2, [r4, #0]
 800a108:	0591      	lsls	r1, r2, #22
 800a10a:	f57f af1b 	bpl.w	8009f44 <_scanf_float+0x64>
 800a10e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a112:	6022      	str	r2, [r4, #0]
 800a114:	f8cd 9004 	str.w	r9, [sp, #4]
 800a118:	e7a8      	b.n	800a06c <_scanf_float+0x18c>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a124:	d006      	beq.n	800a134 <_scanf_float+0x254>
 800a126:	0550      	lsls	r0, r2, #21
 800a128:	f57f af0c 	bpl.w	8009f44 <_scanf_float+0x64>
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	f43f af0f 	beq.w	8009f52 <_scanf_float+0x72>
 800a134:	0591      	lsls	r1, r2, #22
 800a136:	bf58      	it	pl
 800a138:	9901      	ldrpl	r1, [sp, #4]
 800a13a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a13e:	bf58      	it	pl
 800a140:	eba9 0101 	subpl.w	r1, r9, r1
 800a144:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a148:	f04f 0900 	mov.w	r9, #0
 800a14c:	bf58      	it	pl
 800a14e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a152:	6022      	str	r2, [r4, #0]
 800a154:	e78a      	b.n	800a06c <_scanf_float+0x18c>
 800a156:	f04f 0a03 	mov.w	sl, #3
 800a15a:	e787      	b.n	800a06c <_scanf_float+0x18c>
 800a15c:	4639      	mov	r1, r7
 800a15e:	4640      	mov	r0, r8
 800a160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a164:	4798      	blx	r3
 800a166:	2800      	cmp	r0, #0
 800a168:	f43f aedf 	beq.w	8009f2a <_scanf_float+0x4a>
 800a16c:	e6ea      	b.n	8009f44 <_scanf_float+0x64>
 800a16e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a172:	463a      	mov	r2, r7
 800a174:	4640      	mov	r0, r8
 800a176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a17a:	4798      	blx	r3
 800a17c:	6923      	ldr	r3, [r4, #16]
 800a17e:	3b01      	subs	r3, #1
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	e6ec      	b.n	8009f5e <_scanf_float+0x7e>
 800a184:	1e6b      	subs	r3, r5, #1
 800a186:	2b06      	cmp	r3, #6
 800a188:	d825      	bhi.n	800a1d6 <_scanf_float+0x2f6>
 800a18a:	2d02      	cmp	r5, #2
 800a18c:	d836      	bhi.n	800a1fc <_scanf_float+0x31c>
 800a18e:	455e      	cmp	r6, fp
 800a190:	f67f aee8 	bls.w	8009f64 <_scanf_float+0x84>
 800a194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a198:	463a      	mov	r2, r7
 800a19a:	4640      	mov	r0, r8
 800a19c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1a0:	4798      	blx	r3
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	e7f1      	b.n	800a18e <_scanf_float+0x2ae>
 800a1aa:	9802      	ldr	r0, [sp, #8]
 800a1ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	9002      	str	r0, [sp, #8]
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4798      	blx	r3
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1c6:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ca:	f1ba 0f02 	cmp.w	sl, #2
 800a1ce:	d1ec      	bne.n	800a1aa <_scanf_float+0x2ca>
 800a1d0:	3d03      	subs	r5, #3
 800a1d2:	b2ed      	uxtb	r5, r5
 800a1d4:	1b76      	subs	r6, r6, r5
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	05da      	lsls	r2, r3, #23
 800a1da:	d52f      	bpl.n	800a23c <_scanf_float+0x35c>
 800a1dc:	055b      	lsls	r3, r3, #21
 800a1de:	d510      	bpl.n	800a202 <_scanf_float+0x322>
 800a1e0:	455e      	cmp	r6, fp
 800a1e2:	f67f aebf 	bls.w	8009f64 <_scanf_float+0x84>
 800a1e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1f2:	4798      	blx	r3
 800a1f4:	6923      	ldr	r3, [r4, #16]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	e7f1      	b.n	800a1e0 <_scanf_float+0x300>
 800a1fc:	46aa      	mov	sl, r5
 800a1fe:	9602      	str	r6, [sp, #8]
 800a200:	e7df      	b.n	800a1c2 <_scanf_float+0x2e2>
 800a202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	2965      	cmp	r1, #101	; 0x65
 800a20a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a20e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	d00c      	beq.n	800a230 <_scanf_float+0x350>
 800a216:	2945      	cmp	r1, #69	; 0x45
 800a218:	d00a      	beq.n	800a230 <_scanf_float+0x350>
 800a21a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a21e:	463a      	mov	r2, r7
 800a220:	4640      	mov	r0, r8
 800a222:	4798      	blx	r3
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	1eb5      	subs	r5, r6, #2
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	463a      	mov	r2, r7
 800a232:	4640      	mov	r0, r8
 800a234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a238:	4798      	blx	r3
 800a23a:	462e      	mov	r6, r5
 800a23c:	6825      	ldr	r5, [r4, #0]
 800a23e:	f015 0510 	ands.w	r5, r5, #16
 800a242:	d159      	bne.n	800a2f8 <_scanf_float+0x418>
 800a244:	7035      	strb	r5, [r6, #0]
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a250:	d11c      	bne.n	800a28c <_scanf_float+0x3ac>
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	454b      	cmp	r3, r9
 800a256:	eba3 0209 	sub.w	r2, r3, r9
 800a25a:	d124      	bne.n	800a2a6 <_scanf_float+0x3c6>
 800a25c:	2200      	movs	r2, #0
 800a25e:	4659      	mov	r1, fp
 800a260:	4640      	mov	r0, r8
 800a262:	f000 fe99 	bl	800af98 <_strtod_r>
 800a266:	f8d4 c000 	ldr.w	ip, [r4]
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	f01c 0f02 	tst.w	ip, #2
 800a270:	4606      	mov	r6, r0
 800a272:	460f      	mov	r7, r1
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	d021      	beq.n	800a2bc <_scanf_float+0x3dc>
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	600a      	str	r2, [r1, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	e9c3 6700 	strd	r6, r7, [r3]
 800a284:	68e3      	ldr	r3, [r4, #12]
 800a286:	3301      	adds	r3, #1
 800a288:	60e3      	str	r3, [r4, #12]
 800a28a:	e66c      	b.n	8009f66 <_scanf_float+0x86>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0e4      	beq.n	800a25c <_scanf_float+0x37c>
 800a292:	9905      	ldr	r1, [sp, #20]
 800a294:	230a      	movs	r3, #10
 800a296:	462a      	mov	r2, r5
 800a298:	4640      	mov	r0, r8
 800a29a:	3101      	adds	r1, #1
 800a29c:	f000 ff08 	bl	800b0b0 <_strtol_r>
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	9e05      	ldr	r6, [sp, #20]
 800a2a4:	1ac2      	subs	r2, r0, r3
 800a2a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	bf28      	it	cs
 800a2ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	4911      	ldr	r1, [pc, #68]	; (800a2fc <_scanf_float+0x41c>)
 800a2b6:	f000 f839 	bl	800a32c <siprintf>
 800a2ba:	e7cf      	b.n	800a25c <_scanf_float+0x37c>
 800a2bc:	f01c 0f04 	tst.w	ip, #4
 800a2c0:	f103 0e04 	add.w	lr, r3, #4
 800a2c4:	d003      	beq.n	800a2ce <_scanf_float+0x3ee>
 800a2c6:	9903      	ldr	r1, [sp, #12]
 800a2c8:	f8c1 e000 	str.w	lr, [r1]
 800a2cc:	e7d7      	b.n	800a27e <_scanf_float+0x39e>
 800a2ce:	9a03      	ldr	r2, [sp, #12]
 800a2d0:	f8c2 e000 	str.w	lr, [r2]
 800a2d4:	f8d3 8000 	ldr.w	r8, [r3]
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	f7f6 fb96 	bl	8000a0c <__aeabi_dcmpun>
 800a2e0:	b128      	cbz	r0, 800a2ee <_scanf_float+0x40e>
 800a2e2:	4807      	ldr	r0, [pc, #28]	; (800a300 <_scanf_float+0x420>)
 800a2e4:	f000 f81e 	bl	800a324 <nanf>
 800a2e8:	f8c8 0000 	str.w	r0, [r8]
 800a2ec:	e7ca      	b.n	800a284 <_scanf_float+0x3a4>
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	f7f6 fbe9 	bl	8000ac8 <__aeabi_d2f>
 800a2f6:	e7f7      	b.n	800a2e8 <_scanf_float+0x408>
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	e634      	b.n	8009f66 <_scanf_float+0x86>
 800a2fc:	08010db9 	.word	0x08010db9
 800a300:	08010d6d 	.word	0x08010d6d

0800a304 <_sbrk_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	2300      	movs	r3, #0
 800a308:	4d05      	ldr	r5, [pc, #20]	; (800a320 <_sbrk_r+0x1c>)
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7fb fafe 	bl	8005910 <_sbrk>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_sbrk_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_sbrk_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	20001120 	.word	0x20001120

0800a324 <nanf>:
 800a324:	4800      	ldr	r0, [pc, #0]	; (800a328 <nanf+0x4>)
 800a326:	4770      	bx	lr
 800a328:	7fc00000 	.word	0x7fc00000

0800a32c <siprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a332:	b500      	push	{lr}
 800a334:	b09c      	sub	sp, #112	; 0x70
 800a336:	ab1d      	add	r3, sp, #116	; 0x74
 800a338:	9002      	str	r0, [sp, #8]
 800a33a:	9006      	str	r0, [sp, #24]
 800a33c:	9107      	str	r1, [sp, #28]
 800a33e:	9104      	str	r1, [sp, #16]
 800a340:	4808      	ldr	r0, [pc, #32]	; (800a364 <siprintf+0x38>)
 800a342:	4909      	ldr	r1, [pc, #36]	; (800a368 <siprintf+0x3c>)
 800a344:	f853 2b04 	ldr.w	r2, [r3], #4
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	a902      	add	r1, sp, #8
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	f003 f944 	bl	800d5dc <_svfiprintf_r>
 800a354:	2200      	movs	r2, #0
 800a356:	9b02      	ldr	r3, [sp, #8]
 800a358:	701a      	strb	r2, [r3, #0]
 800a35a:	b01c      	add	sp, #112	; 0x70
 800a35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a360:	b003      	add	sp, #12
 800a362:	4770      	bx	lr
 800a364:	20000010 	.word	0x20000010
 800a368:	ffff0208 	.word	0xffff0208

0800a36c <sulp>:
 800a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	460f      	mov	r7, r1
 800a372:	4690      	mov	r8, r2
 800a374:	f002 ff5a 	bl	800d22c <__ulp>
 800a378:	4604      	mov	r4, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	f1b8 0f00 	cmp.w	r8, #0
 800a380:	d011      	beq.n	800a3a6 <sulp+0x3a>
 800a382:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a386:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dd0b      	ble.n	800a3a6 <sulp+0x3a>
 800a38e:	2400      	movs	r4, #0
 800a390:	051b      	lsls	r3, r3, #20
 800a392:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a396:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f7f6 f89b 	bl	80004d8 <__aeabi_dmul>
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a3b0 <_strtod_l>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	469b      	mov	fp, r3
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	b0a1      	sub	sp, #132	; 0x84
 800a3ba:	931c      	str	r3, [sp, #112]	; 0x70
 800a3bc:	4ba1      	ldr	r3, [pc, #644]	; (800a644 <_strtod_l+0x294>)
 800a3be:	4682      	mov	sl, r0
 800a3c0:	681f      	ldr	r7, [r3, #0]
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3c8:	f7f5 fec2 	bl	8000150 <strlen>
 800a3cc:	f04f 0800 	mov.w	r8, #0
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	961b      	str	r6, [sp, #108]	; 0x6c
 800a3d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	2a2b      	cmp	r2, #43	; 0x2b
 800a3de:	d04c      	beq.n	800a47a <_strtod_l+0xca>
 800a3e0:	d83a      	bhi.n	800a458 <_strtod_l+0xa8>
 800a3e2:	2a0d      	cmp	r2, #13
 800a3e4:	d833      	bhi.n	800a44e <_strtod_l+0x9e>
 800a3e6:	2a08      	cmp	r2, #8
 800a3e8:	d833      	bhi.n	800a452 <_strtod_l+0xa2>
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	d03d      	beq.n	800a46a <_strtod_l+0xba>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a3f4:	782b      	ldrb	r3, [r5, #0]
 800a3f6:	2b30      	cmp	r3, #48	; 0x30
 800a3f8:	f040 80af 	bne.w	800a55a <_strtod_l+0x1aa>
 800a3fc:	786b      	ldrb	r3, [r5, #1]
 800a3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a402:	2b58      	cmp	r3, #88	; 0x58
 800a404:	d16c      	bne.n	800a4e0 <_strtod_l+0x130>
 800a406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a408:	4650      	mov	r0, sl
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	ab1c      	add	r3, sp, #112	; 0x70
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	4a8d      	ldr	r2, [pc, #564]	; (800a648 <_strtod_l+0x298>)
 800a412:	f8cd b008 	str.w	fp, [sp, #8]
 800a416:	ab1d      	add	r3, sp, #116	; 0x74
 800a418:	a91b      	add	r1, sp, #108	; 0x6c
 800a41a:	f001 ffe7 	bl	800c3ec <__gethex>
 800a41e:	f010 0607 	ands.w	r6, r0, #7
 800a422:	4604      	mov	r4, r0
 800a424:	d005      	beq.n	800a432 <_strtod_l+0x82>
 800a426:	2e06      	cmp	r6, #6
 800a428:	d129      	bne.n	800a47e <_strtod_l+0xce>
 800a42a:	2300      	movs	r3, #0
 800a42c:	3501      	adds	r5, #1
 800a42e:	951b      	str	r5, [sp, #108]	; 0x6c
 800a430:	930c      	str	r3, [sp, #48]	; 0x30
 800a432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a434:	2b00      	cmp	r3, #0
 800a436:	f040 8596 	bne.w	800af66 <_strtod_l+0xbb6>
 800a43a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a43c:	b1d3      	cbz	r3, 800a474 <_strtod_l+0xc4>
 800a43e:	4642      	mov	r2, r8
 800a440:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a444:	4610      	mov	r0, r2
 800a446:	4619      	mov	r1, r3
 800a448:	b021      	add	sp, #132	; 0x84
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	2a20      	cmp	r2, #32
 800a450:	d1cd      	bne.n	800a3ee <_strtod_l+0x3e>
 800a452:	3301      	adds	r3, #1
 800a454:	931b      	str	r3, [sp, #108]	; 0x6c
 800a456:	e7bf      	b.n	800a3d8 <_strtod_l+0x28>
 800a458:	2a2d      	cmp	r2, #45	; 0x2d
 800a45a:	d1c8      	bne.n	800a3ee <_strtod_l+0x3e>
 800a45c:	2201      	movs	r2, #1
 800a45e:	920c      	str	r2, [sp, #48]	; 0x30
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	921b      	str	r2, [sp, #108]	; 0x6c
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1c3      	bne.n	800a3f2 <_strtod_l+0x42>
 800a46a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a46c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 8577 	bne.w	800af62 <_strtod_l+0xbb2>
 800a474:	4642      	mov	r2, r8
 800a476:	464b      	mov	r3, r9
 800a478:	e7e4      	b.n	800a444 <_strtod_l+0x94>
 800a47a:	2200      	movs	r2, #0
 800a47c:	e7ef      	b.n	800a45e <_strtod_l+0xae>
 800a47e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a480:	b13a      	cbz	r2, 800a492 <_strtod_l+0xe2>
 800a482:	2135      	movs	r1, #53	; 0x35
 800a484:	a81e      	add	r0, sp, #120	; 0x78
 800a486:	f002 ffd5 	bl	800d434 <__copybits>
 800a48a:	4650      	mov	r0, sl
 800a48c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a48e:	f002 fb9d 	bl	800cbcc <_Bfree>
 800a492:	3e01      	subs	r6, #1
 800a494:	2e05      	cmp	r6, #5
 800a496:	d807      	bhi.n	800a4a8 <_strtod_l+0xf8>
 800a498:	e8df f006 	tbb	[pc, r6]
 800a49c:	1d180b0e 	.word	0x1d180b0e
 800a4a0:	030e      	.short	0x030e
 800a4a2:	f04f 0900 	mov.w	r9, #0
 800a4a6:	46c8      	mov	r8, r9
 800a4a8:	0721      	lsls	r1, r4, #28
 800a4aa:	d5c2      	bpl.n	800a432 <_strtod_l+0x82>
 800a4ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a4b0:	e7bf      	b.n	800a432 <_strtod_l+0x82>
 800a4b2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a4b6:	e7f7      	b.n	800a4a8 <_strtod_l+0xf8>
 800a4b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4ba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a4be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a4c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a4ca:	e7ed      	b.n	800a4a8 <_strtod_l+0xf8>
 800a4cc:	f04f 0800 	mov.w	r8, #0
 800a4d0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a64c <_strtod_l+0x29c>
 800a4d4:	e7e8      	b.n	800a4a8 <_strtod_l+0xf8>
 800a4d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a4da:	f04f 38ff 	mov.w	r8, #4294967295
 800a4de:	e7e3      	b.n	800a4a8 <_strtod_l+0xf8>
 800a4e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4e6:	785b      	ldrb	r3, [r3, #1]
 800a4e8:	2b30      	cmp	r3, #48	; 0x30
 800a4ea:	d0f9      	beq.n	800a4e0 <_strtod_l+0x130>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0a0      	beq.n	800a432 <_strtod_l+0x82>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4f6:	220a      	movs	r2, #10
 800a4f8:	9308      	str	r3, [sp, #32]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	469b      	mov	fp, r3
 800a4fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a502:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a504:	7805      	ldrb	r5, [r0, #0]
 800a506:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a50a:	b2d9      	uxtb	r1, r3
 800a50c:	2909      	cmp	r1, #9
 800a50e:	d926      	bls.n	800a55e <_strtod_l+0x1ae>
 800a510:	4622      	mov	r2, r4
 800a512:	4639      	mov	r1, r7
 800a514:	f003 f9ef 	bl	800d8f6 <strncmp>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d032      	beq.n	800a582 <_strtod_l+0x1d2>
 800a51c:	2000      	movs	r0, #0
 800a51e:	462b      	mov	r3, r5
 800a520:	465c      	mov	r4, fp
 800a522:	4602      	mov	r2, r0
 800a524:	9004      	str	r0, [sp, #16]
 800a526:	2b65      	cmp	r3, #101	; 0x65
 800a528:	d001      	beq.n	800a52e <_strtod_l+0x17e>
 800a52a:	2b45      	cmp	r3, #69	; 0x45
 800a52c:	d113      	bne.n	800a556 <_strtod_l+0x1a6>
 800a52e:	b91c      	cbnz	r4, 800a538 <_strtod_l+0x188>
 800a530:	9b07      	ldr	r3, [sp, #28]
 800a532:	4303      	orrs	r3, r0
 800a534:	d099      	beq.n	800a46a <_strtod_l+0xba>
 800a536:	2400      	movs	r4, #0
 800a538:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a53a:	1c73      	adds	r3, r6, #1
 800a53c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a53e:	7873      	ldrb	r3, [r6, #1]
 800a540:	2b2b      	cmp	r3, #43	; 0x2b
 800a542:	d078      	beq.n	800a636 <_strtod_l+0x286>
 800a544:	2b2d      	cmp	r3, #45	; 0x2d
 800a546:	d07b      	beq.n	800a640 <_strtod_l+0x290>
 800a548:	2700      	movs	r7, #0
 800a54a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a54e:	2909      	cmp	r1, #9
 800a550:	f240 8082 	bls.w	800a658 <_strtod_l+0x2a8>
 800a554:	961b      	str	r6, [sp, #108]	; 0x6c
 800a556:	2500      	movs	r5, #0
 800a558:	e09e      	b.n	800a698 <_strtod_l+0x2e8>
 800a55a:	2300      	movs	r3, #0
 800a55c:	e7c9      	b.n	800a4f2 <_strtod_l+0x142>
 800a55e:	f1bb 0f08 	cmp.w	fp, #8
 800a562:	bfd5      	itete	le
 800a564:	9906      	ldrle	r1, [sp, #24]
 800a566:	9905      	ldrgt	r1, [sp, #20]
 800a568:	fb02 3301 	mlale	r3, r2, r1, r3
 800a56c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a570:	f100 0001 	add.w	r0, r0, #1
 800a574:	bfd4      	ite	le
 800a576:	9306      	strle	r3, [sp, #24]
 800a578:	9305      	strgt	r3, [sp, #20]
 800a57a:	f10b 0b01 	add.w	fp, fp, #1
 800a57e:	901b      	str	r0, [sp, #108]	; 0x6c
 800a580:	e7bf      	b.n	800a502 <_strtod_l+0x152>
 800a582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a584:	191a      	adds	r2, r3, r4
 800a586:	921b      	str	r2, [sp, #108]	; 0x6c
 800a588:	5d1b      	ldrb	r3, [r3, r4]
 800a58a:	f1bb 0f00 	cmp.w	fp, #0
 800a58e:	d036      	beq.n	800a5fe <_strtod_l+0x24e>
 800a590:	465c      	mov	r4, fp
 800a592:	9004      	str	r0, [sp, #16]
 800a594:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d912      	bls.n	800a5c2 <_strtod_l+0x212>
 800a59c:	2201      	movs	r2, #1
 800a59e:	e7c2      	b.n	800a526 <_strtod_l+0x176>
 800a5a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b30      	cmp	r3, #48	; 0x30
 800a5ac:	d0f8      	beq.n	800a5a0 <_strtod_l+0x1f0>
 800a5ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a5b2:	2a08      	cmp	r2, #8
 800a5b4:	f200 84dc 	bhi.w	800af70 <_strtod_l+0xbc0>
 800a5b8:	9004      	str	r0, [sp, #16]
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	4604      	mov	r4, r0
 800a5be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5c0:	9208      	str	r2, [sp, #32]
 800a5c2:	3b30      	subs	r3, #48	; 0x30
 800a5c4:	f100 0201 	add.w	r2, r0, #1
 800a5c8:	d013      	beq.n	800a5f2 <_strtod_l+0x242>
 800a5ca:	9904      	ldr	r1, [sp, #16]
 800a5cc:	1905      	adds	r5, r0, r4
 800a5ce:	4411      	add	r1, r2
 800a5d0:	9104      	str	r1, [sp, #16]
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	210a      	movs	r1, #10
 800a5d6:	42aa      	cmp	r2, r5
 800a5d8:	d113      	bne.n	800a602 <_strtod_l+0x252>
 800a5da:	1822      	adds	r2, r4, r0
 800a5dc:	2a08      	cmp	r2, #8
 800a5de:	f104 0401 	add.w	r4, r4, #1
 800a5e2:	4404      	add	r4, r0
 800a5e4:	dc1b      	bgt.n	800a61e <_strtod_l+0x26e>
 800a5e6:	220a      	movs	r2, #10
 800a5e8:	9906      	ldr	r1, [sp, #24]
 800a5ea:	fb02 3301 	mla	r3, r2, r1, r3
 800a5ee:	9306      	str	r3, [sp, #24]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	1c59      	adds	r1, r3, #1
 800a5f8:	911b      	str	r1, [sp, #108]	; 0x6c
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	e7ca      	b.n	800a594 <_strtod_l+0x1e4>
 800a5fe:	4658      	mov	r0, fp
 800a600:	e7d3      	b.n	800a5aa <_strtod_l+0x1fa>
 800a602:	2a08      	cmp	r2, #8
 800a604:	dc04      	bgt.n	800a610 <_strtod_l+0x260>
 800a606:	9f06      	ldr	r7, [sp, #24]
 800a608:	434f      	muls	r7, r1
 800a60a:	9706      	str	r7, [sp, #24]
 800a60c:	3201      	adds	r2, #1
 800a60e:	e7e2      	b.n	800a5d6 <_strtod_l+0x226>
 800a610:	1c57      	adds	r7, r2, #1
 800a612:	2f10      	cmp	r7, #16
 800a614:	bfde      	ittt	le
 800a616:	9f05      	ldrle	r7, [sp, #20]
 800a618:	434f      	mulle	r7, r1
 800a61a:	9705      	strle	r7, [sp, #20]
 800a61c:	e7f6      	b.n	800a60c <_strtod_l+0x25c>
 800a61e:	2c10      	cmp	r4, #16
 800a620:	bfdf      	itttt	le
 800a622:	220a      	movle	r2, #10
 800a624:	9905      	ldrle	r1, [sp, #20]
 800a626:	fb02 3301 	mlale	r3, r2, r1, r3
 800a62a:	9305      	strle	r3, [sp, #20]
 800a62c:	e7e0      	b.n	800a5f0 <_strtod_l+0x240>
 800a62e:	2300      	movs	r3, #0
 800a630:	2201      	movs	r2, #1
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	e77c      	b.n	800a530 <_strtod_l+0x180>
 800a636:	2700      	movs	r7, #0
 800a638:	1cb3      	adds	r3, r6, #2
 800a63a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a63c:	78b3      	ldrb	r3, [r6, #2]
 800a63e:	e784      	b.n	800a54a <_strtod_l+0x19a>
 800a640:	2701      	movs	r7, #1
 800a642:	e7f9      	b.n	800a638 <_strtod_l+0x288>
 800a644:	08011074 	.word	0x08011074
 800a648:	08010dc0 	.word	0x08010dc0
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a652:	1c59      	adds	r1, r3, #1
 800a654:	911b      	str	r1, [sp, #108]	; 0x6c
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	2b30      	cmp	r3, #48	; 0x30
 800a65a:	d0f9      	beq.n	800a650 <_strtod_l+0x2a0>
 800a65c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a660:	2908      	cmp	r1, #8
 800a662:	f63f af78 	bhi.w	800a556 <_strtod_l+0x1a6>
 800a666:	f04f 0e0a 	mov.w	lr, #10
 800a66a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a66e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a670:	9309      	str	r3, [sp, #36]	; 0x24
 800a672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	911b      	str	r1, [sp, #108]	; 0x6c
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a67e:	2d09      	cmp	r5, #9
 800a680:	d935      	bls.n	800a6ee <_strtod_l+0x33e>
 800a682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a684:	1b49      	subs	r1, r1, r5
 800a686:	2908      	cmp	r1, #8
 800a688:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a68c:	dc02      	bgt.n	800a694 <_strtod_l+0x2e4>
 800a68e:	4565      	cmp	r5, ip
 800a690:	bfa8      	it	ge
 800a692:	4665      	movge	r5, ip
 800a694:	b107      	cbz	r7, 800a698 <_strtod_l+0x2e8>
 800a696:	426d      	negs	r5, r5
 800a698:	2c00      	cmp	r4, #0
 800a69a:	d14c      	bne.n	800a736 <_strtod_l+0x386>
 800a69c:	9907      	ldr	r1, [sp, #28]
 800a69e:	4301      	orrs	r1, r0
 800a6a0:	f47f aec7 	bne.w	800a432 <_strtod_l+0x82>
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	f47f aee0 	bne.w	800a46a <_strtod_l+0xba>
 800a6aa:	2b69      	cmp	r3, #105	; 0x69
 800a6ac:	d026      	beq.n	800a6fc <_strtod_l+0x34c>
 800a6ae:	dc23      	bgt.n	800a6f8 <_strtod_l+0x348>
 800a6b0:	2b49      	cmp	r3, #73	; 0x49
 800a6b2:	d023      	beq.n	800a6fc <_strtod_l+0x34c>
 800a6b4:	2b4e      	cmp	r3, #78	; 0x4e
 800a6b6:	f47f aed8 	bne.w	800a46a <_strtod_l+0xba>
 800a6ba:	499c      	ldr	r1, [pc, #624]	; (800a92c <_strtod_l+0x57c>)
 800a6bc:	a81b      	add	r0, sp, #108	; 0x6c
 800a6be:	f002 f8e3 	bl	800c888 <__match>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f43f aed1 	beq.w	800a46a <_strtod_l+0xba>
 800a6c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b28      	cmp	r3, #40	; 0x28
 800a6ce:	d12c      	bne.n	800a72a <_strtod_l+0x37a>
 800a6d0:	4997      	ldr	r1, [pc, #604]	; (800a930 <_strtod_l+0x580>)
 800a6d2:	aa1e      	add	r2, sp, #120	; 0x78
 800a6d4:	a81b      	add	r0, sp, #108	; 0x6c
 800a6d6:	f002 f8eb 	bl	800c8b0 <__hexnan>
 800a6da:	2805      	cmp	r0, #5
 800a6dc:	d125      	bne.n	800a72a <_strtod_l+0x37a>
 800a6de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6e0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a6e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a6e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a6ec:	e6a1      	b.n	800a432 <_strtod_l+0x82>
 800a6ee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a6f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a6f6:	e7bc      	b.n	800a672 <_strtod_l+0x2c2>
 800a6f8:	2b6e      	cmp	r3, #110	; 0x6e
 800a6fa:	e7dc      	b.n	800a6b6 <_strtod_l+0x306>
 800a6fc:	498d      	ldr	r1, [pc, #564]	; (800a934 <_strtod_l+0x584>)
 800a6fe:	a81b      	add	r0, sp, #108	; 0x6c
 800a700:	f002 f8c2 	bl	800c888 <__match>
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f aeb0 	beq.w	800a46a <_strtod_l+0xba>
 800a70a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a70c:	498a      	ldr	r1, [pc, #552]	; (800a938 <_strtod_l+0x588>)
 800a70e:	3b01      	subs	r3, #1
 800a710:	a81b      	add	r0, sp, #108	; 0x6c
 800a712:	931b      	str	r3, [sp, #108]	; 0x6c
 800a714:	f002 f8b8 	bl	800c888 <__match>
 800a718:	b910      	cbnz	r0, 800a720 <_strtod_l+0x370>
 800a71a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a71c:	3301      	adds	r3, #1
 800a71e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a720:	f04f 0800 	mov.w	r8, #0
 800a724:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a948 <_strtod_l+0x598>
 800a728:	e683      	b.n	800a432 <_strtod_l+0x82>
 800a72a:	4884      	ldr	r0, [pc, #528]	; (800a93c <_strtod_l+0x58c>)
 800a72c:	f003 f856 	bl	800d7dc <nan>
 800a730:	4680      	mov	r8, r0
 800a732:	4689      	mov	r9, r1
 800a734:	e67d      	b.n	800a432 <_strtod_l+0x82>
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	f1bb 0f00 	cmp.w	fp, #0
 800a73c:	bf08      	it	eq
 800a73e:	46a3      	moveq	fp, r4
 800a740:	1aeb      	subs	r3, r5, r3
 800a742:	2c10      	cmp	r4, #16
 800a744:	9806      	ldr	r0, [sp, #24]
 800a746:	4626      	mov	r6, r4
 800a748:	9307      	str	r3, [sp, #28]
 800a74a:	bfa8      	it	ge
 800a74c:	2610      	movge	r6, #16
 800a74e:	f7f5 fe49 	bl	80003e4 <__aeabi_ui2d>
 800a752:	2c09      	cmp	r4, #9
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	dd13      	ble.n	800a782 <_strtod_l+0x3d2>
 800a75a:	4b79      	ldr	r3, [pc, #484]	; (800a940 <_strtod_l+0x590>)
 800a75c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a760:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a764:	f7f5 feb8 	bl	80004d8 <__aeabi_dmul>
 800a768:	4680      	mov	r8, r0
 800a76a:	9805      	ldr	r0, [sp, #20]
 800a76c:	4689      	mov	r9, r1
 800a76e:	f7f5 fe39 	bl	80003e4 <__aeabi_ui2d>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4640      	mov	r0, r8
 800a778:	4649      	mov	r1, r9
 800a77a:	f7f5 fcf7 	bl	800016c <__adddf3>
 800a77e:	4680      	mov	r8, r0
 800a780:	4689      	mov	r9, r1
 800a782:	2c0f      	cmp	r4, #15
 800a784:	dc36      	bgt.n	800a7f4 <_strtod_l+0x444>
 800a786:	9b07      	ldr	r3, [sp, #28]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f43f ae52 	beq.w	800a432 <_strtod_l+0x82>
 800a78e:	dd22      	ble.n	800a7d6 <_strtod_l+0x426>
 800a790:	2b16      	cmp	r3, #22
 800a792:	dc09      	bgt.n	800a7a8 <_strtod_l+0x3f8>
 800a794:	4c6a      	ldr	r4, [pc, #424]	; (800a940 <_strtod_l+0x590>)
 800a796:	4642      	mov	r2, r8
 800a798:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a79c:	464b      	mov	r3, r9
 800a79e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a7a2:	f7f5 fe99 	bl	80004d8 <__aeabi_dmul>
 800a7a6:	e7c3      	b.n	800a730 <_strtod_l+0x380>
 800a7a8:	9a07      	ldr	r2, [sp, #28]
 800a7aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	db20      	blt.n	800a7f4 <_strtod_l+0x444>
 800a7b2:	4d63      	ldr	r5, [pc, #396]	; (800a940 <_strtod_l+0x590>)
 800a7b4:	f1c4 040f 	rsb	r4, r4, #15
 800a7b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a7bc:	4642      	mov	r2, r8
 800a7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	f7f5 fe88 	bl	80004d8 <__aeabi_dmul>
 800a7c8:	9b07      	ldr	r3, [sp, #28]
 800a7ca:	1b1c      	subs	r4, r3, r4
 800a7cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a7d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7d4:	e7e5      	b.n	800a7a2 <_strtod_l+0x3f2>
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	3316      	adds	r3, #22
 800a7da:	db0b      	blt.n	800a7f4 <_strtod_l+0x444>
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	4a58      	ldr	r2, [pc, #352]	; (800a940 <_strtod_l+0x590>)
 800a7e0:	1b5d      	subs	r5, r3, r5
 800a7e2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	f7f5 ff9d 	bl	800072c <__aeabi_ddiv>
 800a7f2:	e79d      	b.n	800a730 <_strtod_l+0x380>
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	1ba6      	subs	r6, r4, r6
 800a7f8:	441e      	add	r6, r3
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	dd71      	ble.n	800a8e2 <_strtod_l+0x532>
 800a7fe:	f016 030f 	ands.w	r3, r6, #15
 800a802:	d00a      	beq.n	800a81a <_strtod_l+0x46a>
 800a804:	494e      	ldr	r1, [pc, #312]	; (800a940 <_strtod_l+0x590>)
 800a806:	4642      	mov	r2, r8
 800a808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a810:	464b      	mov	r3, r9
 800a812:	f7f5 fe61 	bl	80004d8 <__aeabi_dmul>
 800a816:	4680      	mov	r8, r0
 800a818:	4689      	mov	r9, r1
 800a81a:	f036 060f 	bics.w	r6, r6, #15
 800a81e:	d050      	beq.n	800a8c2 <_strtod_l+0x512>
 800a820:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a824:	dd27      	ble.n	800a876 <_strtod_l+0x4c6>
 800a826:	f04f 0b00 	mov.w	fp, #0
 800a82a:	f8cd b010 	str.w	fp, [sp, #16]
 800a82e:	f8cd b020 	str.w	fp, [sp, #32]
 800a832:	f8cd b018 	str.w	fp, [sp, #24]
 800a836:	2322      	movs	r3, #34	; 0x22
 800a838:	f04f 0800 	mov.w	r8, #0
 800a83c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a948 <_strtod_l+0x598>
 800a840:	f8ca 3000 	str.w	r3, [sl]
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f43f adf3 	beq.w	800a432 <_strtod_l+0x82>
 800a84c:	4650      	mov	r0, sl
 800a84e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a850:	f002 f9bc 	bl	800cbcc <_Bfree>
 800a854:	4650      	mov	r0, sl
 800a856:	9906      	ldr	r1, [sp, #24]
 800a858:	f002 f9b8 	bl	800cbcc <_Bfree>
 800a85c:	4650      	mov	r0, sl
 800a85e:	9904      	ldr	r1, [sp, #16]
 800a860:	f002 f9b4 	bl	800cbcc <_Bfree>
 800a864:	4650      	mov	r0, sl
 800a866:	9908      	ldr	r1, [sp, #32]
 800a868:	f002 f9b0 	bl	800cbcc <_Bfree>
 800a86c:	4659      	mov	r1, fp
 800a86e:	4650      	mov	r0, sl
 800a870:	f002 f9ac 	bl	800cbcc <_Bfree>
 800a874:	e5dd      	b.n	800a432 <_strtod_l+0x82>
 800a876:	2300      	movs	r3, #0
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	461f      	mov	r7, r3
 800a87e:	1136      	asrs	r6, r6, #4
 800a880:	2e01      	cmp	r6, #1
 800a882:	dc21      	bgt.n	800a8c8 <_strtod_l+0x518>
 800a884:	b10b      	cbz	r3, 800a88a <_strtod_l+0x4da>
 800a886:	4680      	mov	r8, r0
 800a888:	4689      	mov	r9, r1
 800a88a:	4b2e      	ldr	r3, [pc, #184]	; (800a944 <_strtod_l+0x594>)
 800a88c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a890:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a894:	4642      	mov	r2, r8
 800a896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a89a:	464b      	mov	r3, r9
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	4b29      	ldr	r3, [pc, #164]	; (800a948 <_strtod_l+0x598>)
 800a8a2:	460a      	mov	r2, r1
 800a8a4:	400b      	ands	r3, r1
 800a8a6:	4929      	ldr	r1, [pc, #164]	; (800a94c <_strtod_l+0x59c>)
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	428b      	cmp	r3, r1
 800a8ac:	d8bb      	bhi.n	800a826 <_strtod_l+0x476>
 800a8ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a8b2:	428b      	cmp	r3, r1
 800a8b4:	bf86      	itte	hi
 800a8b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a8ba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a950 <_strtod_l+0x5a0>
 800a8be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9305      	str	r3, [sp, #20]
 800a8c6:	e07e      	b.n	800a9c6 <_strtod_l+0x616>
 800a8c8:	07f2      	lsls	r2, r6, #31
 800a8ca:	d507      	bpl.n	800a8dc <_strtod_l+0x52c>
 800a8cc:	4b1d      	ldr	r3, [pc, #116]	; (800a944 <_strtod_l+0x594>)
 800a8ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fdff 	bl	80004d8 <__aeabi_dmul>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	3701      	adds	r7, #1
 800a8de:	1076      	asrs	r6, r6, #1
 800a8e0:	e7ce      	b.n	800a880 <_strtod_l+0x4d0>
 800a8e2:	d0ee      	beq.n	800a8c2 <_strtod_l+0x512>
 800a8e4:	4276      	negs	r6, r6
 800a8e6:	f016 020f 	ands.w	r2, r6, #15
 800a8ea:	d00a      	beq.n	800a902 <_strtod_l+0x552>
 800a8ec:	4b14      	ldr	r3, [pc, #80]	; (800a940 <_strtod_l+0x590>)
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 ff17 	bl	800072c <__aeabi_ddiv>
 800a8fe:	4680      	mov	r8, r0
 800a900:	4689      	mov	r9, r1
 800a902:	1136      	asrs	r6, r6, #4
 800a904:	d0dd      	beq.n	800a8c2 <_strtod_l+0x512>
 800a906:	2e1f      	cmp	r6, #31
 800a908:	dd24      	ble.n	800a954 <_strtod_l+0x5a4>
 800a90a:	f04f 0b00 	mov.w	fp, #0
 800a90e:	f8cd b010 	str.w	fp, [sp, #16]
 800a912:	f8cd b020 	str.w	fp, [sp, #32]
 800a916:	f8cd b018 	str.w	fp, [sp, #24]
 800a91a:	2322      	movs	r3, #34	; 0x22
 800a91c:	f04f 0800 	mov.w	r8, #0
 800a920:	f04f 0900 	mov.w	r9, #0
 800a924:	f8ca 3000 	str.w	r3, [sl]
 800a928:	e78c      	b.n	800a844 <_strtod_l+0x494>
 800a92a:	bf00      	nop
 800a92c:	08010d92 	.word	0x08010d92
 800a930:	08010dd4 	.word	0x08010dd4
 800a934:	08010d8a 	.word	0x08010d8a
 800a938:	08010f14 	.word	0x08010f14
 800a93c:	08010d6d 	.word	0x08010d6d
 800a940:	08011110 	.word	0x08011110
 800a944:	080110e8 	.word	0x080110e8
 800a948:	7ff00000 	.word	0x7ff00000
 800a94c:	7ca00000 	.word	0x7ca00000
 800a950:	7fefffff 	.word	0x7fefffff
 800a954:	f016 0310 	ands.w	r3, r6, #16
 800a958:	bf18      	it	ne
 800a95a:	236a      	movne	r3, #106	; 0x6a
 800a95c:	4640      	mov	r0, r8
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	4649      	mov	r1, r9
 800a962:	2300      	movs	r3, #0
 800a964:	4fb2      	ldr	r7, [pc, #712]	; (800ac30 <_strtod_l+0x880>)
 800a966:	07f2      	lsls	r2, r6, #31
 800a968:	d504      	bpl.n	800a974 <_strtod_l+0x5c4>
 800a96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a96e:	f7f5 fdb3 	bl	80004d8 <__aeabi_dmul>
 800a972:	2301      	movs	r3, #1
 800a974:	1076      	asrs	r6, r6, #1
 800a976:	f107 0708 	add.w	r7, r7, #8
 800a97a:	d1f4      	bne.n	800a966 <_strtod_l+0x5b6>
 800a97c:	b10b      	cbz	r3, 800a982 <_strtod_l+0x5d2>
 800a97e:	4680      	mov	r8, r0
 800a980:	4689      	mov	r9, r1
 800a982:	9b05      	ldr	r3, [sp, #20]
 800a984:	b1bb      	cbz	r3, 800a9b6 <_strtod_l+0x606>
 800a986:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a98a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a98e:	2b00      	cmp	r3, #0
 800a990:	4649      	mov	r1, r9
 800a992:	dd10      	ble.n	800a9b6 <_strtod_l+0x606>
 800a994:	2b1f      	cmp	r3, #31
 800a996:	f340 812b 	ble.w	800abf0 <_strtod_l+0x840>
 800a99a:	2b34      	cmp	r3, #52	; 0x34
 800a99c:	bfd8      	it	le
 800a99e:	f04f 32ff 	movle.w	r2, #4294967295
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	bfcf      	iteee	gt
 800a9a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a9ac:	3b20      	suble	r3, #32
 800a9ae:	fa02 f303 	lslle.w	r3, r2, r3
 800a9b2:	ea03 0901 	andle.w	r9, r3, r1
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f5 fff3 	bl	80009a8 <__aeabi_dcmpeq>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1a1      	bne.n	800a90a <_strtod_l+0x55a>
 800a9c6:	9b06      	ldr	r3, [sp, #24]
 800a9c8:	465a      	mov	r2, fp
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	9908      	ldr	r1, [sp, #32]
 800a9d2:	f002 f967 	bl	800cca4 <__s2b>
 800a9d6:	9008      	str	r0, [sp, #32]
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f43f af24 	beq.w	800a826 <_strtod_l+0x476>
 800a9de:	9b04      	ldr	r3, [sp, #16]
 800a9e0:	f04f 0b00 	mov.w	fp, #0
 800a9e4:	1b5d      	subs	r5, r3, r5
 800a9e6:	9b07      	ldr	r3, [sp, #28]
 800a9e8:	f8cd b010 	str.w	fp, [sp, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfb4      	ite	lt
 800a9f0:	462b      	movlt	r3, r5
 800a9f2:	2300      	movge	r3, #0
 800a9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9f6:	9b07      	ldr	r3, [sp, #28]
 800a9f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a9fc:	9316      	str	r3, [sp, #88]	; 0x58
 800a9fe:	9b08      	ldr	r3, [sp, #32]
 800aa00:	4650      	mov	r0, sl
 800aa02:	6859      	ldr	r1, [r3, #4]
 800aa04:	f002 f8a2 	bl	800cb4c <_Balloc>
 800aa08:	9006      	str	r0, [sp, #24]
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f43f af13 	beq.w	800a836 <_strtod_l+0x486>
 800aa10:	9b08      	ldr	r3, [sp, #32]
 800aa12:	300c      	adds	r0, #12
 800aa14:	691a      	ldr	r2, [r3, #16]
 800aa16:	f103 010c 	add.w	r1, r3, #12
 800aa1a:	3202      	adds	r2, #2
 800aa1c:	0092      	lsls	r2, r2, #2
 800aa1e:	f7fe fbeb 	bl	80091f8 <memcpy>
 800aa22:	ab1e      	add	r3, sp, #120	; 0x78
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	ab1d      	add	r3, sp, #116	; 0x74
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	4642      	mov	r2, r8
 800aa2c:	464b      	mov	r3, r9
 800aa2e:	4650      	mov	r0, sl
 800aa30:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800aa34:	f002 fc74 	bl	800d320 <__d2b>
 800aa38:	901c      	str	r0, [sp, #112]	; 0x70
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f aefb 	beq.w	800a836 <_strtod_l+0x486>
 800aa40:	2101      	movs	r1, #1
 800aa42:	4650      	mov	r0, sl
 800aa44:	f002 f9c6 	bl	800cdd4 <__i2b>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	9004      	str	r0, [sp, #16]
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f43f aef2 	beq.w	800a836 <_strtod_l+0x486>
 800aa52:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aa54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	bfab      	itete	ge
 800aa5a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aa5c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aa5e:	18ee      	addge	r6, r5, r3
 800aa60:	1b5c      	sublt	r4, r3, r5
 800aa62:	9b05      	ldr	r3, [sp, #20]
 800aa64:	bfa8      	it	ge
 800aa66:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aa68:	eba5 0503 	sub.w	r5, r5, r3
 800aa6c:	4415      	add	r5, r2
 800aa6e:	4b71      	ldr	r3, [pc, #452]	; (800ac34 <_strtod_l+0x884>)
 800aa70:	f105 35ff 	add.w	r5, r5, #4294967295
 800aa74:	bfb8      	it	lt
 800aa76:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aa78:	429d      	cmp	r5, r3
 800aa7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa7e:	f280 80c9 	bge.w	800ac14 <_strtod_l+0x864>
 800aa82:	1b5b      	subs	r3, r3, r5
 800aa84:	2b1f      	cmp	r3, #31
 800aa86:	f04f 0701 	mov.w	r7, #1
 800aa8a:	eba2 0203 	sub.w	r2, r2, r3
 800aa8e:	f300 80b6 	bgt.w	800abfe <_strtod_l+0x84e>
 800aa92:	2500      	movs	r5, #0
 800aa94:	fa07 f303 	lsl.w	r3, r7, r3
 800aa98:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa9a:	18b7      	adds	r7, r6, r2
 800aa9c:	9b05      	ldr	r3, [sp, #20]
 800aa9e:	42be      	cmp	r6, r7
 800aaa0:	4414      	add	r4, r2
 800aaa2:	441c      	add	r4, r3
 800aaa4:	4633      	mov	r3, r6
 800aaa6:	bfa8      	it	ge
 800aaa8:	463b      	movge	r3, r7
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	bfa8      	it	ge
 800aaae:	4623      	movge	r3, r4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bfc2      	ittt	gt
 800aab4:	1aff      	subgt	r7, r7, r3
 800aab6:	1ae4      	subgt	r4, r4, r3
 800aab8:	1af6      	subgt	r6, r6, r3
 800aaba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd17      	ble.n	800aaf0 <_strtod_l+0x740>
 800aac0:	461a      	mov	r2, r3
 800aac2:	4650      	mov	r0, sl
 800aac4:	9904      	ldr	r1, [sp, #16]
 800aac6:	f002 fa3f 	bl	800cf48 <__pow5mult>
 800aaca:	9004      	str	r0, [sp, #16]
 800aacc:	2800      	cmp	r0, #0
 800aace:	f43f aeb2 	beq.w	800a836 <_strtod_l+0x486>
 800aad2:	4601      	mov	r1, r0
 800aad4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aad6:	4650      	mov	r0, sl
 800aad8:	f002 f992 	bl	800ce00 <__multiply>
 800aadc:	9009      	str	r0, [sp, #36]	; 0x24
 800aade:	2800      	cmp	r0, #0
 800aae0:	f43f aea9 	beq.w	800a836 <_strtod_l+0x486>
 800aae4:	4650      	mov	r0, sl
 800aae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aae8:	f002 f870 	bl	800cbcc <_Bfree>
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	931c      	str	r3, [sp, #112]	; 0x70
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	f300 8093 	bgt.w	800ac1c <_strtod_l+0x86c>
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dd08      	ble.n	800ab0e <_strtod_l+0x75e>
 800aafc:	4650      	mov	r0, sl
 800aafe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab00:	9906      	ldr	r1, [sp, #24]
 800ab02:	f002 fa21 	bl	800cf48 <__pow5mult>
 800ab06:	9006      	str	r0, [sp, #24]
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f ae94 	beq.w	800a836 <_strtod_l+0x486>
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	dd08      	ble.n	800ab24 <_strtod_l+0x774>
 800ab12:	4622      	mov	r2, r4
 800ab14:	4650      	mov	r0, sl
 800ab16:	9906      	ldr	r1, [sp, #24]
 800ab18:	f002 fa70 	bl	800cffc <__lshift>
 800ab1c:	9006      	str	r0, [sp, #24]
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f43f ae89 	beq.w	800a836 <_strtod_l+0x486>
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	dd08      	ble.n	800ab3a <_strtod_l+0x78a>
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	9904      	ldr	r1, [sp, #16]
 800ab2e:	f002 fa65 	bl	800cffc <__lshift>
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f43f ae7e 	beq.w	800a836 <_strtod_l+0x486>
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	9a06      	ldr	r2, [sp, #24]
 800ab3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab40:	f002 fae4 	bl	800d10c <__mdiff>
 800ab44:	4683      	mov	fp, r0
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f43f ae75 	beq.w	800a836 <_strtod_l+0x486>
 800ab4c:	2400      	movs	r4, #0
 800ab4e:	68c3      	ldr	r3, [r0, #12]
 800ab50:	9904      	ldr	r1, [sp, #16]
 800ab52:	60c4      	str	r4, [r0, #12]
 800ab54:	930d      	str	r3, [sp, #52]	; 0x34
 800ab56:	f002 fabd 	bl	800d0d4 <__mcmp>
 800ab5a:	42a0      	cmp	r0, r4
 800ab5c:	da70      	bge.n	800ac40 <_strtod_l+0x890>
 800ab5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab60:	ea53 0308 	orrs.w	r3, r3, r8
 800ab64:	f040 8096 	bne.w	800ac94 <_strtod_l+0x8e4>
 800ab68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8091 	bne.w	800ac94 <_strtod_l+0x8e4>
 800ab72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab76:	0d1b      	lsrs	r3, r3, #20
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab7e:	f240 8089 	bls.w	800ac94 <_strtod_l+0x8e4>
 800ab82:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ab86:	b923      	cbnz	r3, 800ab92 <_strtod_l+0x7e2>
 800ab88:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	f340 8081 	ble.w	800ac94 <_strtod_l+0x8e4>
 800ab92:	4659      	mov	r1, fp
 800ab94:	2201      	movs	r2, #1
 800ab96:	4650      	mov	r0, sl
 800ab98:	f002 fa30 	bl	800cffc <__lshift>
 800ab9c:	9904      	ldr	r1, [sp, #16]
 800ab9e:	4683      	mov	fp, r0
 800aba0:	f002 fa98 	bl	800d0d4 <__mcmp>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	dd75      	ble.n	800ac94 <_strtod_l+0x8e4>
 800aba8:	9905      	ldr	r1, [sp, #20]
 800abaa:	464b      	mov	r3, r9
 800abac:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <_strtod_l+0x888>)
 800abae:	2900      	cmp	r1, #0
 800abb0:	f000 8091 	beq.w	800acd6 <_strtod_l+0x926>
 800abb4:	ea02 0109 	and.w	r1, r2, r9
 800abb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abbc:	f300 808b 	bgt.w	800acd6 <_strtod_l+0x926>
 800abc0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abc4:	f77f aea9 	ble.w	800a91a <_strtod_l+0x56a>
 800abc8:	2300      	movs	r3, #0
 800abca:	4a1c      	ldr	r2, [pc, #112]	; (800ac3c <_strtod_l+0x88c>)
 800abcc:	4640      	mov	r0, r8
 800abce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800abd2:	4649      	mov	r1, r9
 800abd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800abd8:	f7f5 fc7e 	bl	80004d8 <__aeabi_dmul>
 800abdc:	460b      	mov	r3, r1
 800abde:	4303      	orrs	r3, r0
 800abe0:	bf08      	it	eq
 800abe2:	2322      	moveq	r3, #34	; 0x22
 800abe4:	4680      	mov	r8, r0
 800abe6:	4689      	mov	r9, r1
 800abe8:	bf08      	it	eq
 800abea:	f8ca 3000 	streq.w	r3, [sl]
 800abee:	e62d      	b.n	800a84c <_strtod_l+0x49c>
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	fa02 f303 	lsl.w	r3, r2, r3
 800abf8:	ea03 0808 	and.w	r8, r3, r8
 800abfc:	e6db      	b.n	800a9b6 <_strtod_l+0x606>
 800abfe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ac02:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ac06:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ac0a:	35e2      	adds	r5, #226	; 0xe2
 800ac0c:	fa07 f505 	lsl.w	r5, r7, r5
 800ac10:	970f      	str	r7, [sp, #60]	; 0x3c
 800ac12:	e742      	b.n	800aa9a <_strtod_l+0x6ea>
 800ac14:	2301      	movs	r3, #1
 800ac16:	2500      	movs	r5, #0
 800ac18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac1a:	e73e      	b.n	800aa9a <_strtod_l+0x6ea>
 800ac1c:	463a      	mov	r2, r7
 800ac1e:	4650      	mov	r0, sl
 800ac20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac22:	f002 f9eb 	bl	800cffc <__lshift>
 800ac26:	901c      	str	r0, [sp, #112]	; 0x70
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	f47f af64 	bne.w	800aaf6 <_strtod_l+0x746>
 800ac2e:	e602      	b.n	800a836 <_strtod_l+0x486>
 800ac30:	08010de8 	.word	0x08010de8
 800ac34:	fffffc02 	.word	0xfffffc02
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	39500000 	.word	0x39500000
 800ac40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac44:	d166      	bne.n	800ad14 <_strtod_l+0x964>
 800ac46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac4c:	b35a      	cbz	r2, 800aca6 <_strtod_l+0x8f6>
 800ac4e:	4a9c      	ldr	r2, [pc, #624]	; (800aec0 <_strtod_l+0xb10>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d12c      	bne.n	800acae <_strtod_l+0x8fe>
 800ac54:	9b05      	ldr	r3, [sp, #20]
 800ac56:	4640      	mov	r0, r8
 800ac58:	b303      	cbz	r3, 800ac9c <_strtod_l+0x8ec>
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	4a99      	ldr	r2, [pc, #612]	; (800aec4 <_strtod_l+0xb14>)
 800ac5e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac62:	401a      	ands	r2, r3
 800ac64:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ac68:	d81b      	bhi.n	800aca2 <_strtod_l+0x8f2>
 800ac6a:	0d12      	lsrs	r2, r2, #20
 800ac6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac70:	fa01 f303 	lsl.w	r3, r1, r3
 800ac74:	4298      	cmp	r0, r3
 800ac76:	d11a      	bne.n	800acae <_strtod_l+0x8fe>
 800ac78:	4b93      	ldr	r3, [pc, #588]	; (800aec8 <_strtod_l+0xb18>)
 800ac7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d102      	bne.n	800ac86 <_strtod_l+0x8d6>
 800ac80:	3001      	adds	r0, #1
 800ac82:	f43f add8 	beq.w	800a836 <_strtod_l+0x486>
 800ac86:	f04f 0800 	mov.w	r8, #0
 800ac8a:	4b8e      	ldr	r3, [pc, #568]	; (800aec4 <_strtod_l+0xb14>)
 800ac8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac8e:	401a      	ands	r2, r3
 800ac90:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ac94:	9b05      	ldr	r3, [sp, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d196      	bne.n	800abc8 <_strtod_l+0x818>
 800ac9a:	e5d7      	b.n	800a84c <_strtod_l+0x49c>
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	e7e8      	b.n	800ac74 <_strtod_l+0x8c4>
 800aca2:	460b      	mov	r3, r1
 800aca4:	e7e6      	b.n	800ac74 <_strtod_l+0x8c4>
 800aca6:	ea53 0308 	orrs.w	r3, r3, r8
 800acaa:	f43f af7d 	beq.w	800aba8 <_strtod_l+0x7f8>
 800acae:	b1e5      	cbz	r5, 800acea <_strtod_l+0x93a>
 800acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb2:	421d      	tst	r5, r3
 800acb4:	d0ee      	beq.n	800ac94 <_strtod_l+0x8e4>
 800acb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb8:	4640      	mov	r0, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	9a05      	ldr	r2, [sp, #20]
 800acbe:	b1c3      	cbz	r3, 800acf2 <_strtod_l+0x942>
 800acc0:	f7ff fb54 	bl	800a36c <sulp>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800accc:	f7f5 fa4e 	bl	800016c <__adddf3>
 800acd0:	4680      	mov	r8, r0
 800acd2:	4689      	mov	r9, r1
 800acd4:	e7de      	b.n	800ac94 <_strtod_l+0x8e4>
 800acd6:	4013      	ands	r3, r2
 800acd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800acdc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ace0:	f04f 38ff 	mov.w	r8, #4294967295
 800ace4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ace8:	e7d4      	b.n	800ac94 <_strtod_l+0x8e4>
 800acea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acec:	ea13 0f08 	tst.w	r3, r8
 800acf0:	e7e0      	b.n	800acb4 <_strtod_l+0x904>
 800acf2:	f7ff fb3b 	bl	800a36c <sulp>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acfe:	f7f5 fa33 	bl	8000168 <__aeabi_dsub>
 800ad02:	2200      	movs	r2, #0
 800ad04:	2300      	movs	r3, #0
 800ad06:	4680      	mov	r8, r0
 800ad08:	4689      	mov	r9, r1
 800ad0a:	f7f5 fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d0c0      	beq.n	800ac94 <_strtod_l+0x8e4>
 800ad12:	e602      	b.n	800a91a <_strtod_l+0x56a>
 800ad14:	4658      	mov	r0, fp
 800ad16:	9904      	ldr	r1, [sp, #16]
 800ad18:	f002 fb5e 	bl	800d3d8 <__ratio>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad22:	4606      	mov	r6, r0
 800ad24:	460f      	mov	r7, r1
 800ad26:	f7f5 fe53 	bl	80009d0 <__aeabi_dcmple>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d075      	beq.n	800ae1a <_strtod_l+0xa6a>
 800ad2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d047      	beq.n	800adc4 <_strtod_l+0xa14>
 800ad34:	2600      	movs	r6, #0
 800ad36:	4f65      	ldr	r7, [pc, #404]	; (800aecc <_strtod_l+0xb1c>)
 800ad38:	4d64      	ldr	r5, [pc, #400]	; (800aecc <_strtod_l+0xb1c>)
 800ad3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad40:	0d1b      	lsrs	r3, r3, #20
 800ad42:	051b      	lsls	r3, r3, #20
 800ad44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad48:	4b61      	ldr	r3, [pc, #388]	; (800aed0 <_strtod_l+0xb20>)
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	f040 80c8 	bne.w	800aee0 <_strtod_l+0xb30>
 800ad50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad54:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ad58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ad60:	4649      	mov	r1, r9
 800ad62:	f002 fa63 	bl	800d22c <__ulp>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 fbb3 	bl	80004d8 <__aeabi_dmul>
 800ad72:	4642      	mov	r2, r8
 800ad74:	464b      	mov	r3, r9
 800ad76:	f7f5 f9f9 	bl	800016c <__adddf3>
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4951      	ldr	r1, [pc, #324]	; (800aec4 <_strtod_l+0xb14>)
 800ad7e:	4a55      	ldr	r2, [pc, #340]	; (800aed4 <_strtod_l+0xb24>)
 800ad80:	4019      	ands	r1, r3
 800ad82:	4291      	cmp	r1, r2
 800ad84:	4680      	mov	r8, r0
 800ad86:	d95e      	bls.n	800ae46 <_strtod_l+0xa96>
 800ad88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d103      	bne.n	800ad9a <_strtod_l+0x9ea>
 800ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad94:	3301      	adds	r3, #1
 800ad96:	f43f ad4e 	beq.w	800a836 <_strtod_l+0x486>
 800ad9a:	f04f 38ff 	mov.w	r8, #4294967295
 800ad9e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800aec8 <_strtod_l+0xb18>
 800ada2:	4650      	mov	r0, sl
 800ada4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ada6:	f001 ff11 	bl	800cbcc <_Bfree>
 800adaa:	4650      	mov	r0, sl
 800adac:	9906      	ldr	r1, [sp, #24]
 800adae:	f001 ff0d 	bl	800cbcc <_Bfree>
 800adb2:	4650      	mov	r0, sl
 800adb4:	9904      	ldr	r1, [sp, #16]
 800adb6:	f001 ff09 	bl	800cbcc <_Bfree>
 800adba:	4659      	mov	r1, fp
 800adbc:	4650      	mov	r0, sl
 800adbe:	f001 ff05 	bl	800cbcc <_Bfree>
 800adc2:	e61c      	b.n	800a9fe <_strtod_l+0x64e>
 800adc4:	f1b8 0f00 	cmp.w	r8, #0
 800adc8:	d119      	bne.n	800adfe <_strtod_l+0xa4e>
 800adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add0:	b9e3      	cbnz	r3, 800ae0c <_strtod_l+0xa5c>
 800add2:	2200      	movs	r2, #0
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	4b3c      	ldr	r3, [pc, #240]	; (800aecc <_strtod_l+0xb1c>)
 800adda:	f7f5 fdef 	bl	80009bc <__aeabi_dcmplt>
 800adde:	b9c8      	cbnz	r0, 800ae14 <_strtod_l+0xa64>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	4639      	mov	r1, r7
 800ade6:	4b3c      	ldr	r3, [pc, #240]	; (800aed8 <_strtod_l+0xb28>)
 800ade8:	f7f5 fb76 	bl	80004d8 <__aeabi_dmul>
 800adec:	4604      	mov	r4, r0
 800adee:	460d      	mov	r5, r1
 800adf0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800adf4:	9418      	str	r4, [sp, #96]	; 0x60
 800adf6:	9319      	str	r3, [sp, #100]	; 0x64
 800adf8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800adfc:	e79d      	b.n	800ad3a <_strtod_l+0x98a>
 800adfe:	f1b8 0f01 	cmp.w	r8, #1
 800ae02:	d103      	bne.n	800ae0c <_strtod_l+0xa5c>
 800ae04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f43f ad87 	beq.w	800a91a <_strtod_l+0x56a>
 800ae0c:	2600      	movs	r6, #0
 800ae0e:	2400      	movs	r4, #0
 800ae10:	4f32      	ldr	r7, [pc, #200]	; (800aedc <_strtod_l+0xb2c>)
 800ae12:	e791      	b.n	800ad38 <_strtod_l+0x988>
 800ae14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ae16:	4d30      	ldr	r5, [pc, #192]	; (800aed8 <_strtod_l+0xb28>)
 800ae18:	e7ea      	b.n	800adf0 <_strtod_l+0xa40>
 800ae1a:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <_strtod_l+0xb28>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	f7f5 fb59 	bl	80004d8 <__aeabi_dmul>
 800ae26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae28:	4604      	mov	r4, r0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	b933      	cbnz	r3, 800ae3c <_strtod_l+0xa8c>
 800ae2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae32:	9010      	str	r0, [sp, #64]	; 0x40
 800ae34:	9311      	str	r3, [sp, #68]	; 0x44
 800ae36:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae3a:	e77e      	b.n	800ad3a <_strtod_l+0x98a>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ae44:	e7f7      	b.n	800ae36 <_strtod_l+0xa86>
 800ae46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ae4a:	9b05      	ldr	r3, [sp, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1a8      	bne.n	800ada2 <_strtod_l+0x9f2>
 800ae50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae56:	0d1b      	lsrs	r3, r3, #20
 800ae58:	051b      	lsls	r3, r3, #20
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d1a1      	bne.n	800ada2 <_strtod_l+0x9f2>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f6 f9b1 	bl	80011c8 <__aeabi_d2lz>
 800ae66:	f7f5 fb09 	bl	800047c <__aeabi_l2d>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 f979 	bl	8000168 <__aeabi_dsub>
 800ae76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae7c:	ea43 0308 	orr.w	r3, r3, r8
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4604      	mov	r4, r0
 800ae84:	460d      	mov	r5, r1
 800ae86:	d066      	beq.n	800af56 <_strtod_l+0xba6>
 800ae88:	a309      	add	r3, pc, #36	; (adr r3, 800aeb0 <_strtod_l+0xb00>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fd95 	bl	80009bc <__aeabi_dcmplt>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f47f acda 	bne.w	800a84c <_strtod_l+0x49c>
 800ae98:	a307      	add	r3, pc, #28	; (adr r3, 800aeb8 <_strtod_l+0xb08>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 fda9 	bl	80009f8 <__aeabi_dcmpgt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f43f af7b 	beq.w	800ada2 <_strtod_l+0x9f2>
 800aeac:	e4ce      	b.n	800a84c <_strtod_l+0x49c>
 800aeae:	bf00      	nop
 800aeb0:	94a03595 	.word	0x94a03595
 800aeb4:	3fdfffff 	.word	0x3fdfffff
 800aeb8:	35afe535 	.word	0x35afe535
 800aebc:	3fe00000 	.word	0x3fe00000
 800aec0:	000fffff 	.word	0x000fffff
 800aec4:	7ff00000 	.word	0x7ff00000
 800aec8:	7fefffff 	.word	0x7fefffff
 800aecc:	3ff00000 	.word	0x3ff00000
 800aed0:	7fe00000 	.word	0x7fe00000
 800aed4:	7c9fffff 	.word	0x7c9fffff
 800aed8:	3fe00000 	.word	0x3fe00000
 800aedc:	bff00000 	.word	0xbff00000
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	b313      	cbz	r3, 800af2a <_strtod_l+0xb7a>
 800aee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aeea:	d81e      	bhi.n	800af2a <_strtod_l+0xb7a>
 800aeec:	a326      	add	r3, pc, #152	; (adr r3, 800af88 <_strtod_l+0xbd8>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7f5 fd6b 	bl	80009d0 <__aeabi_dcmple>
 800aefa:	b190      	cbz	r0, 800af22 <_strtod_l+0xb72>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4620      	mov	r0, r4
 800af00:	f7f5 fdc2 	bl	8000a88 <__aeabi_d2uiz>
 800af04:	2801      	cmp	r0, #1
 800af06:	bf38      	it	cc
 800af08:	2001      	movcc	r0, #1
 800af0a:	f7f5 fa6b 	bl	80003e4 <__aeabi_ui2d>
 800af0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af10:	4604      	mov	r4, r0
 800af12:	460d      	mov	r5, r1
 800af14:	b9d3      	cbnz	r3, 800af4c <_strtod_l+0xb9c>
 800af16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af1a:	9012      	str	r0, [sp, #72]	; 0x48
 800af1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800af1e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800af22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af24:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800af28:	1a9f      	subs	r7, r3, r2
 800af2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af2e:	f002 f97d 	bl	800d22c <__ulp>
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	4630      	mov	r0, r6
 800af38:	4639      	mov	r1, r7
 800af3a:	f7f5 facd 	bl	80004d8 <__aeabi_dmul>
 800af3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af42:	f7f5 f913 	bl	800016c <__adddf3>
 800af46:	4680      	mov	r8, r0
 800af48:	4689      	mov	r9, r1
 800af4a:	e77e      	b.n	800ae4a <_strtod_l+0xa9a>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800af54:	e7e3      	b.n	800af1e <_strtod_l+0xb6e>
 800af56:	a30e      	add	r3, pc, #56	; (adr r3, 800af90 <_strtod_l+0xbe0>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 fd2e 	bl	80009bc <__aeabi_dcmplt>
 800af60:	e7a1      	b.n	800aea6 <_strtod_l+0xaf6>
 800af62:	2300      	movs	r3, #0
 800af64:	930c      	str	r3, [sp, #48]	; 0x30
 800af66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af6a:	6013      	str	r3, [r2, #0]
 800af6c:	f7ff ba65 	b.w	800a43a <_strtod_l+0x8a>
 800af70:	2b65      	cmp	r3, #101	; 0x65
 800af72:	f43f ab5c 	beq.w	800a62e <_strtod_l+0x27e>
 800af76:	2b45      	cmp	r3, #69	; 0x45
 800af78:	f43f ab59 	beq.w	800a62e <_strtod_l+0x27e>
 800af7c:	2201      	movs	r2, #1
 800af7e:	f7ff bb8d 	b.w	800a69c <_strtod_l+0x2ec>
 800af82:	bf00      	nop
 800af84:	f3af 8000 	nop.w
 800af88:	ffc00000 	.word	0xffc00000
 800af8c:	41dfffff 	.word	0x41dfffff
 800af90:	94a03595 	.word	0x94a03595
 800af94:	3fcfffff 	.word	0x3fcfffff

0800af98 <_strtod_r>:
 800af98:	4b01      	ldr	r3, [pc, #4]	; (800afa0 <_strtod_r+0x8>)
 800af9a:	f7ff ba09 	b.w	800a3b0 <_strtod_l>
 800af9e:	bf00      	nop
 800afa0:	20000078 	.word	0x20000078

0800afa4 <_strtol_l.isra.0>:
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afaa:	4686      	mov	lr, r0
 800afac:	d001      	beq.n	800afb2 <_strtol_l.isra.0+0xe>
 800afae:	2b24      	cmp	r3, #36	; 0x24
 800afb0:	d906      	bls.n	800afc0 <_strtol_l.isra.0+0x1c>
 800afb2:	f7fe f8dd 	bl	8009170 <__errno>
 800afb6:	2316      	movs	r3, #22
 800afb8:	6003      	str	r3, [r0, #0]
 800afba:	2000      	movs	r0, #0
 800afbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc0:	468c      	mov	ip, r1
 800afc2:	4e3a      	ldr	r6, [pc, #232]	; (800b0ac <_strtol_l.isra.0+0x108>)
 800afc4:	4660      	mov	r0, ip
 800afc6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800afca:	5da5      	ldrb	r5, [r4, r6]
 800afcc:	f015 0508 	ands.w	r5, r5, #8
 800afd0:	d1f8      	bne.n	800afc4 <_strtol_l.isra.0+0x20>
 800afd2:	2c2d      	cmp	r4, #45	; 0x2d
 800afd4:	d133      	bne.n	800b03e <_strtol_l.isra.0+0x9a>
 800afd6:	f04f 0801 	mov.w	r8, #1
 800afda:	f89c 4000 	ldrb.w	r4, [ip]
 800afde:	f100 0c02 	add.w	ip, r0, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d05d      	beq.n	800b0a2 <_strtol_l.isra.0+0xfe>
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d10c      	bne.n	800b004 <_strtol_l.isra.0+0x60>
 800afea:	2c30      	cmp	r4, #48	; 0x30
 800afec:	d10a      	bne.n	800b004 <_strtol_l.isra.0+0x60>
 800afee:	f89c 0000 	ldrb.w	r0, [ip]
 800aff2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aff6:	2858      	cmp	r0, #88	; 0x58
 800aff8:	d14e      	bne.n	800b098 <_strtol_l.isra.0+0xf4>
 800affa:	2310      	movs	r3, #16
 800affc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b000:	f10c 0c02 	add.w	ip, ip, #2
 800b004:	2500      	movs	r5, #0
 800b006:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800b00a:	3f01      	subs	r7, #1
 800b00c:	fbb7 f9f3 	udiv	r9, r7, r3
 800b010:	4628      	mov	r0, r5
 800b012:	fb03 7a19 	mls	sl, r3, r9, r7
 800b016:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b01a:	2e09      	cmp	r6, #9
 800b01c:	d818      	bhi.n	800b050 <_strtol_l.isra.0+0xac>
 800b01e:	4634      	mov	r4, r6
 800b020:	42a3      	cmp	r3, r4
 800b022:	dd24      	ble.n	800b06e <_strtol_l.isra.0+0xca>
 800b024:	2d00      	cmp	r5, #0
 800b026:	db1f      	blt.n	800b068 <_strtol_l.isra.0+0xc4>
 800b028:	4581      	cmp	r9, r0
 800b02a:	d31d      	bcc.n	800b068 <_strtol_l.isra.0+0xc4>
 800b02c:	d101      	bne.n	800b032 <_strtol_l.isra.0+0x8e>
 800b02e:	45a2      	cmp	sl, r4
 800b030:	db1a      	blt.n	800b068 <_strtol_l.isra.0+0xc4>
 800b032:	2501      	movs	r5, #1
 800b034:	fb00 4003 	mla	r0, r0, r3, r4
 800b038:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b03c:	e7eb      	b.n	800b016 <_strtol_l.isra.0+0x72>
 800b03e:	2c2b      	cmp	r4, #43	; 0x2b
 800b040:	bf08      	it	eq
 800b042:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b046:	46a8      	mov	r8, r5
 800b048:	bf08      	it	eq
 800b04a:	f100 0c02 	addeq.w	ip, r0, #2
 800b04e:	e7c8      	b.n	800afe2 <_strtol_l.isra.0+0x3e>
 800b050:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b054:	2e19      	cmp	r6, #25
 800b056:	d801      	bhi.n	800b05c <_strtol_l.isra.0+0xb8>
 800b058:	3c37      	subs	r4, #55	; 0x37
 800b05a:	e7e1      	b.n	800b020 <_strtol_l.isra.0+0x7c>
 800b05c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b060:	2e19      	cmp	r6, #25
 800b062:	d804      	bhi.n	800b06e <_strtol_l.isra.0+0xca>
 800b064:	3c57      	subs	r4, #87	; 0x57
 800b066:	e7db      	b.n	800b020 <_strtol_l.isra.0+0x7c>
 800b068:	f04f 35ff 	mov.w	r5, #4294967295
 800b06c:	e7e4      	b.n	800b038 <_strtol_l.isra.0+0x94>
 800b06e:	2d00      	cmp	r5, #0
 800b070:	da08      	bge.n	800b084 <_strtol_l.isra.0+0xe0>
 800b072:	2322      	movs	r3, #34	; 0x22
 800b074:	4638      	mov	r0, r7
 800b076:	f8ce 3000 	str.w	r3, [lr]
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	d09e      	beq.n	800afbc <_strtol_l.isra.0+0x18>
 800b07e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b082:	e007      	b.n	800b094 <_strtol_l.isra.0+0xf0>
 800b084:	f1b8 0f00 	cmp.w	r8, #0
 800b088:	d000      	beq.n	800b08c <_strtol_l.isra.0+0xe8>
 800b08a:	4240      	negs	r0, r0
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d095      	beq.n	800afbc <_strtol_l.isra.0+0x18>
 800b090:	2d00      	cmp	r5, #0
 800b092:	d1f4      	bne.n	800b07e <_strtol_l.isra.0+0xda>
 800b094:	6011      	str	r1, [r2, #0]
 800b096:	e791      	b.n	800afbc <_strtol_l.isra.0+0x18>
 800b098:	2430      	movs	r4, #48	; 0x30
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1b2      	bne.n	800b004 <_strtol_l.isra.0+0x60>
 800b09e:	2308      	movs	r3, #8
 800b0a0:	e7b0      	b.n	800b004 <_strtol_l.isra.0+0x60>
 800b0a2:	2c30      	cmp	r4, #48	; 0x30
 800b0a4:	d0a3      	beq.n	800afee <_strtol_l.isra.0+0x4a>
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	e7ac      	b.n	800b004 <_strtol_l.isra.0+0x60>
 800b0aa:	bf00      	nop
 800b0ac:	08010e11 	.word	0x08010e11

0800b0b0 <_strtol_r>:
 800b0b0:	f7ff bf78 	b.w	800afa4 <_strtol_l.isra.0>

0800b0b4 <_vsniprintf_r>:
 800b0b4:	b530      	push	{r4, r5, lr}
 800b0b6:	1e14      	subs	r4, r2, #0
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	b09b      	sub	sp, #108	; 0x6c
 800b0bc:	4618      	mov	r0, r3
 800b0be:	da05      	bge.n	800b0cc <_vsniprintf_r+0x18>
 800b0c0:	238b      	movs	r3, #139	; 0x8b
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	b01b      	add	sp, #108	; 0x6c
 800b0ca:	bd30      	pop	{r4, r5, pc}
 800b0cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b0d4:	bf0c      	ite	eq
 800b0d6:	4623      	moveq	r3, r4
 800b0d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	9305      	str	r3, [sp, #20]
 800b0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	9100      	str	r1, [sp, #0]
 800b0e8:	9104      	str	r1, [sp, #16]
 800b0ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0ee:	4669      	mov	r1, sp
 800b0f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f002 fa72 	bl	800d5dc <_svfiprintf_r>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	bfbc      	itt	lt
 800b0fc:	238b      	movlt	r3, #139	; 0x8b
 800b0fe:	602b      	strlt	r3, [r5, #0]
 800b100:	2c00      	cmp	r4, #0
 800b102:	d0e1      	beq.n	800b0c8 <_vsniprintf_r+0x14>
 800b104:	2200      	movs	r2, #0
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	e7dd      	b.n	800b0c8 <_vsniprintf_r+0x14>

0800b10c <vsniprintf>:
 800b10c:	b507      	push	{r0, r1, r2, lr}
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4613      	mov	r3, r2
 800b112:	460a      	mov	r2, r1
 800b114:	4601      	mov	r1, r0
 800b116:	4803      	ldr	r0, [pc, #12]	; (800b124 <vsniprintf+0x18>)
 800b118:	6800      	ldr	r0, [r0, #0]
 800b11a:	f7ff ffcb 	bl	800b0b4 <_vsniprintf_r>
 800b11e:	b003      	add	sp, #12
 800b120:	f85d fb04 	ldr.w	pc, [sp], #4
 800b124:	20000010 	.word	0x20000010

0800b128 <__swbuf_r>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	460e      	mov	r6, r1
 800b12c:	4614      	mov	r4, r2
 800b12e:	4605      	mov	r5, r0
 800b130:	b118      	cbz	r0, 800b13a <__swbuf_r+0x12>
 800b132:	6983      	ldr	r3, [r0, #24]
 800b134:	b90b      	cbnz	r3, 800b13a <__swbuf_r+0x12>
 800b136:	f001 f853 	bl	800c1e0 <__sinit>
 800b13a:	4b21      	ldr	r3, [pc, #132]	; (800b1c0 <__swbuf_r+0x98>)
 800b13c:	429c      	cmp	r4, r3
 800b13e:	d12b      	bne.n	800b198 <__swbuf_r+0x70>
 800b140:	686c      	ldr	r4, [r5, #4]
 800b142:	69a3      	ldr	r3, [r4, #24]
 800b144:	60a3      	str	r3, [r4, #8]
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	071a      	lsls	r2, r3, #28
 800b14a:	d52f      	bpl.n	800b1ac <__swbuf_r+0x84>
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	b36b      	cbz	r3, 800b1ac <__swbuf_r+0x84>
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	6820      	ldr	r0, [r4, #0]
 800b154:	b2f6      	uxtb	r6, r6
 800b156:	1ac0      	subs	r0, r0, r3
 800b158:	6963      	ldr	r3, [r4, #20]
 800b15a:	4637      	mov	r7, r6
 800b15c:	4283      	cmp	r3, r0
 800b15e:	dc04      	bgt.n	800b16a <__swbuf_r+0x42>
 800b160:	4621      	mov	r1, r4
 800b162:	4628      	mov	r0, r5
 800b164:	f000 ffa8 	bl	800c0b8 <_fflush_r>
 800b168:	bb30      	cbnz	r0, 800b1b8 <__swbuf_r+0x90>
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	3001      	adds	r0, #1
 800b16e:	3b01      	subs	r3, #1
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	701e      	strb	r6, [r3, #0]
 800b17a:	6963      	ldr	r3, [r4, #20]
 800b17c:	4283      	cmp	r3, r0
 800b17e:	d004      	beq.n	800b18a <__swbuf_r+0x62>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	07db      	lsls	r3, r3, #31
 800b184:	d506      	bpl.n	800b194 <__swbuf_r+0x6c>
 800b186:	2e0a      	cmp	r6, #10
 800b188:	d104      	bne.n	800b194 <__swbuf_r+0x6c>
 800b18a:	4621      	mov	r1, r4
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 ff93 	bl	800c0b8 <_fflush_r>
 800b192:	b988      	cbnz	r0, 800b1b8 <__swbuf_r+0x90>
 800b194:	4638      	mov	r0, r7
 800b196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b198:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <__swbuf_r+0x9c>)
 800b19a:	429c      	cmp	r4, r3
 800b19c:	d101      	bne.n	800b1a2 <__swbuf_r+0x7a>
 800b19e:	68ac      	ldr	r4, [r5, #8]
 800b1a0:	e7cf      	b.n	800b142 <__swbuf_r+0x1a>
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <__swbuf_r+0xa0>)
 800b1a4:	429c      	cmp	r4, r3
 800b1a6:	bf08      	it	eq
 800b1a8:	68ec      	ldreq	r4, [r5, #12]
 800b1aa:	e7ca      	b.n	800b142 <__swbuf_r+0x1a>
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f000 f80c 	bl	800b1cc <__swsetup_r>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d0cb      	beq.n	800b150 <__swbuf_r+0x28>
 800b1b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1bc:	e7ea      	b.n	800b194 <__swbuf_r+0x6c>
 800b1be:	bf00      	nop
 800b1c0:	08010fc8 	.word	0x08010fc8
 800b1c4:	08010fe8 	.word	0x08010fe8
 800b1c8:	08010fa8 	.word	0x08010fa8

0800b1cc <__swsetup_r>:
 800b1cc:	4b32      	ldr	r3, [pc, #200]	; (800b298 <__swsetup_r+0xcc>)
 800b1ce:	b570      	push	{r4, r5, r6, lr}
 800b1d0:	681d      	ldr	r5, [r3, #0]
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	b125      	cbz	r5, 800b1e2 <__swsetup_r+0x16>
 800b1d8:	69ab      	ldr	r3, [r5, #24]
 800b1da:	b913      	cbnz	r3, 800b1e2 <__swsetup_r+0x16>
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 ffff 	bl	800c1e0 <__sinit>
 800b1e2:	4b2e      	ldr	r3, [pc, #184]	; (800b29c <__swsetup_r+0xd0>)
 800b1e4:	429c      	cmp	r4, r3
 800b1e6:	d10f      	bne.n	800b208 <__swsetup_r+0x3c>
 800b1e8:	686c      	ldr	r4, [r5, #4]
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1f0:	0719      	lsls	r1, r3, #28
 800b1f2:	d42c      	bmi.n	800b24e <__swsetup_r+0x82>
 800b1f4:	06dd      	lsls	r5, r3, #27
 800b1f6:	d411      	bmi.n	800b21c <__swsetup_r+0x50>
 800b1f8:	2309      	movs	r3, #9
 800b1fa:	6033      	str	r3, [r6, #0]
 800b1fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	e03e      	b.n	800b286 <__swsetup_r+0xba>
 800b208:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <__swsetup_r+0xd4>)
 800b20a:	429c      	cmp	r4, r3
 800b20c:	d101      	bne.n	800b212 <__swsetup_r+0x46>
 800b20e:	68ac      	ldr	r4, [r5, #8]
 800b210:	e7eb      	b.n	800b1ea <__swsetup_r+0x1e>
 800b212:	4b24      	ldr	r3, [pc, #144]	; (800b2a4 <__swsetup_r+0xd8>)
 800b214:	429c      	cmp	r4, r3
 800b216:	bf08      	it	eq
 800b218:	68ec      	ldreq	r4, [r5, #12]
 800b21a:	e7e6      	b.n	800b1ea <__swsetup_r+0x1e>
 800b21c:	0758      	lsls	r0, r3, #29
 800b21e:	d512      	bpl.n	800b246 <__swsetup_r+0x7a>
 800b220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b222:	b141      	cbz	r1, 800b236 <__swsetup_r+0x6a>
 800b224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b228:	4299      	cmp	r1, r3
 800b22a:	d002      	beq.n	800b232 <__swsetup_r+0x66>
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7fd fff9 	bl	8009224 <_free_r>
 800b232:	2300      	movs	r3, #0
 800b234:	6363      	str	r3, [r4, #52]	; 0x34
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	2300      	movs	r3, #0
 800b240:	6063      	str	r3, [r4, #4]
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f043 0308 	orr.w	r3, r3, #8
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	b94b      	cbnz	r3, 800b266 <__swsetup_r+0x9a>
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b25c:	d003      	beq.n	800b266 <__swsetup_r+0x9a>
 800b25e:	4621      	mov	r1, r4
 800b260:	4630      	mov	r0, r6
 800b262:	f001 fbed 	bl	800ca40 <__smakebuf_r>
 800b266:	89a0      	ldrh	r0, [r4, #12]
 800b268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b26c:	f010 0301 	ands.w	r3, r0, #1
 800b270:	d00a      	beq.n	800b288 <__swsetup_r+0xbc>
 800b272:	2300      	movs	r3, #0
 800b274:	60a3      	str	r3, [r4, #8]
 800b276:	6963      	ldr	r3, [r4, #20]
 800b278:	425b      	negs	r3, r3
 800b27a:	61a3      	str	r3, [r4, #24]
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	b943      	cbnz	r3, 800b292 <__swsetup_r+0xc6>
 800b280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b284:	d1ba      	bne.n	800b1fc <__swsetup_r+0x30>
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	0781      	lsls	r1, r0, #30
 800b28a:	bf58      	it	pl
 800b28c:	6963      	ldrpl	r3, [r4, #20]
 800b28e:	60a3      	str	r3, [r4, #8]
 800b290:	e7f4      	b.n	800b27c <__swsetup_r+0xb0>
 800b292:	2000      	movs	r0, #0
 800b294:	e7f7      	b.n	800b286 <__swsetup_r+0xba>
 800b296:	bf00      	nop
 800b298:	20000010 	.word	0x20000010
 800b29c:	08010fc8 	.word	0x08010fc8
 800b2a0:	08010fe8 	.word	0x08010fe8
 800b2a4:	08010fa8 	.word	0x08010fa8

0800b2a8 <abort>:
 800b2a8:	2006      	movs	r0, #6
 800b2aa:	b508      	push	{r3, lr}
 800b2ac:	f002 fac4 	bl	800d838 <raise>
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	f7fa faba 	bl	800582a <_exit>

0800b2b6 <quorem>:
 800b2b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	6903      	ldr	r3, [r0, #16]
 800b2bc:	690c      	ldr	r4, [r1, #16]
 800b2be:	4607      	mov	r7, r0
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	f2c0 8083 	blt.w	800b3cc <quorem+0x116>
 800b2c6:	3c01      	subs	r4, #1
 800b2c8:	f100 0514 	add.w	r5, r0, #20
 800b2cc:	f101 0814 	add.w	r8, r1, #20
 800b2d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2ee:	d332      	bcc.n	800b356 <quorem+0xa0>
 800b2f0:	f04f 0e00 	mov.w	lr, #0
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	46ac      	mov	ip, r5
 800b2f8:	46f2      	mov	sl, lr
 800b2fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2fe:	b293      	uxth	r3, r2
 800b300:	fb06 e303 	mla	r3, r6, r3, lr
 800b304:	0c12      	lsrs	r2, r2, #16
 800b306:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b30a:	fb06 e202 	mla	r2, r6, r2, lr
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ebaa 0303 	sub.w	r3, sl, r3
 800b314:	f8dc a000 	ldr.w	sl, [ip]
 800b318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b31c:	fa1f fa8a 	uxth.w	sl, sl
 800b320:	4453      	add	r3, sl
 800b322:	fa1f fa82 	uxth.w	sl, r2
 800b326:	f8dc 2000 	ldr.w	r2, [ip]
 800b32a:	4581      	cmp	r9, r0
 800b32c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b334:	b29b      	uxth	r3, r3
 800b336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b33a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b33e:	f84c 3b04 	str.w	r3, [ip], #4
 800b342:	d2da      	bcs.n	800b2fa <quorem+0x44>
 800b344:	f855 300b 	ldr.w	r3, [r5, fp]
 800b348:	b92b      	cbnz	r3, 800b356 <quorem+0xa0>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	3b04      	subs	r3, #4
 800b34e:	429d      	cmp	r5, r3
 800b350:	461a      	mov	r2, r3
 800b352:	d32f      	bcc.n	800b3b4 <quorem+0xfe>
 800b354:	613c      	str	r4, [r7, #16]
 800b356:	4638      	mov	r0, r7
 800b358:	f001 febc 	bl	800d0d4 <__mcmp>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	db25      	blt.n	800b3ac <quorem+0xf6>
 800b360:	4628      	mov	r0, r5
 800b362:	f04f 0c00 	mov.w	ip, #0
 800b366:	3601      	adds	r6, #1
 800b368:	f858 1b04 	ldr.w	r1, [r8], #4
 800b36c:	f8d0 e000 	ldr.w	lr, [r0]
 800b370:	b28b      	uxth	r3, r1
 800b372:	ebac 0303 	sub.w	r3, ip, r3
 800b376:	fa1f f28e 	uxth.w	r2, lr
 800b37a:	4413      	add	r3, r2
 800b37c:	0c0a      	lsrs	r2, r1, #16
 800b37e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b382:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b386:	b29b      	uxth	r3, r3
 800b388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b38c:	45c1      	cmp	r9, r8
 800b38e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b392:	f840 3b04 	str.w	r3, [r0], #4
 800b396:	d2e7      	bcs.n	800b368 <quorem+0xb2>
 800b398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b39c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a0:	b922      	cbnz	r2, 800b3ac <quorem+0xf6>
 800b3a2:	3b04      	subs	r3, #4
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	d30a      	bcc.n	800b3c0 <quorem+0x10a>
 800b3aa:	613c      	str	r4, [r7, #16]
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	b003      	add	sp, #12
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	6812      	ldr	r2, [r2, #0]
 800b3b6:	3b04      	subs	r3, #4
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d1cb      	bne.n	800b354 <quorem+0x9e>
 800b3bc:	3c01      	subs	r4, #1
 800b3be:	e7c6      	b.n	800b34e <quorem+0x98>
 800b3c0:	6812      	ldr	r2, [r2, #0]
 800b3c2:	3b04      	subs	r3, #4
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	d1f0      	bne.n	800b3aa <quorem+0xf4>
 800b3c8:	3c01      	subs	r4, #1
 800b3ca:	e7eb      	b.n	800b3a4 <quorem+0xee>
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	e7ee      	b.n	800b3ae <quorem+0xf8>

0800b3d0 <_dtoa_r>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	461f      	mov	r7, r3
 800b3d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b3da:	b099      	sub	sp, #100	; 0x64
 800b3dc:	4605      	mov	r5, r0
 800b3de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b3e6:	b974      	cbnz	r4, 800b406 <_dtoa_r+0x36>
 800b3e8:	2010      	movs	r0, #16
 800b3ea:	f7fd fefd 	bl	80091e8 <malloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	6268      	str	r0, [r5, #36]	; 0x24
 800b3f2:	b920      	cbnz	r0, 800b3fe <_dtoa_r+0x2e>
 800b3f4:	21ea      	movs	r1, #234	; 0xea
 800b3f6:	4bae      	ldr	r3, [pc, #696]	; (800b6b0 <_dtoa_r+0x2e0>)
 800b3f8:	48ae      	ldr	r0, [pc, #696]	; (800b6b4 <_dtoa_r+0x2e4>)
 800b3fa:	f7fd fe9b 	bl	8009134 <__assert_func>
 800b3fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b402:	6004      	str	r4, [r0, #0]
 800b404:	60c4      	str	r4, [r0, #12]
 800b406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b408:	6819      	ldr	r1, [r3, #0]
 800b40a:	b151      	cbz	r1, 800b422 <_dtoa_r+0x52>
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	2301      	movs	r3, #1
 800b410:	4093      	lsls	r3, r2
 800b412:	604a      	str	r2, [r1, #4]
 800b414:	608b      	str	r3, [r1, #8]
 800b416:	4628      	mov	r0, r5
 800b418:	f001 fbd8 	bl	800cbcc <_Bfree>
 800b41c:	2200      	movs	r2, #0
 800b41e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	1e3b      	subs	r3, r7, #0
 800b424:	bfaf      	iteee	ge
 800b426:	2300      	movge	r3, #0
 800b428:	2201      	movlt	r2, #1
 800b42a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b42e:	9305      	strlt	r3, [sp, #20]
 800b430:	bfa8      	it	ge
 800b432:	f8c8 3000 	strge.w	r3, [r8]
 800b436:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b43a:	4b9f      	ldr	r3, [pc, #636]	; (800b6b8 <_dtoa_r+0x2e8>)
 800b43c:	bfb8      	it	lt
 800b43e:	f8c8 2000 	strlt.w	r2, [r8]
 800b442:	ea33 0309 	bics.w	r3, r3, r9
 800b446:	d119      	bne.n	800b47c <_dtoa_r+0xac>
 800b448:	f242 730f 	movw	r3, #9999	; 0x270f
 800b44c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b454:	4333      	orrs	r3, r6
 800b456:	f000 8580 	beq.w	800bf5a <_dtoa_r+0xb8a>
 800b45a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b45c:	b953      	cbnz	r3, 800b474 <_dtoa_r+0xa4>
 800b45e:	4b97      	ldr	r3, [pc, #604]	; (800b6bc <_dtoa_r+0x2ec>)
 800b460:	e022      	b.n	800b4a8 <_dtoa_r+0xd8>
 800b462:	4b97      	ldr	r3, [pc, #604]	; (800b6c0 <_dtoa_r+0x2f0>)
 800b464:	9308      	str	r3, [sp, #32]
 800b466:	3308      	adds	r3, #8
 800b468:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	9808      	ldr	r0, [sp, #32]
 800b46e:	b019      	add	sp, #100	; 0x64
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	4b91      	ldr	r3, [pc, #580]	; (800b6bc <_dtoa_r+0x2ec>)
 800b476:	9308      	str	r3, [sp, #32]
 800b478:	3303      	adds	r3, #3
 800b47a:	e7f5      	b.n	800b468 <_dtoa_r+0x98>
 800b47c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b480:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b488:	2200      	movs	r2, #0
 800b48a:	2300      	movs	r3, #0
 800b48c:	f7f5 fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 800b490:	4680      	mov	r8, r0
 800b492:	b158      	cbz	r0, 800b4ac <_dtoa_r+0xdc>
 800b494:	2301      	movs	r3, #1
 800b496:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8559 	beq.w	800bf54 <_dtoa_r+0xb84>
 800b4a2:	4888      	ldr	r0, [pc, #544]	; (800b6c4 <_dtoa_r+0x2f4>)
 800b4a4:	6018      	str	r0, [r3, #0]
 800b4a6:	1e43      	subs	r3, r0, #1
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	e7df      	b.n	800b46c <_dtoa_r+0x9c>
 800b4ac:	ab16      	add	r3, sp, #88	; 0x58
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	ab17      	add	r3, sp, #92	; 0x5c
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b4ba:	f001 ff31 	bl	800d320 <__d2b>
 800b4be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4c2:	4682      	mov	sl, r0
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d07e      	beq.n	800b5c6 <_dtoa_r+0x1f6>
 800b4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b4d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b4da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b4de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4b78      	ldr	r3, [pc, #480]	; (800b6c8 <_dtoa_r+0x2f8>)
 800b4e6:	f7f4 fe3f 	bl	8000168 <__aeabi_dsub>
 800b4ea:	a36b      	add	r3, pc, #428	; (adr r3, 800b698 <_dtoa_r+0x2c8>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f4 fff2 	bl	80004d8 <__aeabi_dmul>
 800b4f4:	a36a      	add	r3, pc, #424	; (adr r3, 800b6a0 <_dtoa_r+0x2d0>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fe37 	bl	800016c <__adddf3>
 800b4fe:	4606      	mov	r6, r0
 800b500:	4620      	mov	r0, r4
 800b502:	460f      	mov	r7, r1
 800b504:	f7f4 ff7e 	bl	8000404 <__aeabi_i2d>
 800b508:	a367      	add	r3, pc, #412	; (adr r3, 800b6a8 <_dtoa_r+0x2d8>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 ffe3 	bl	80004d8 <__aeabi_dmul>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f4 fe27 	bl	800016c <__adddf3>
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	f7f5 fa89 	bl	8000a38 <__aeabi_d2iz>
 800b526:	2200      	movs	r2, #0
 800b528:	4681      	mov	r9, r0
 800b52a:	2300      	movs	r3, #0
 800b52c:	4630      	mov	r0, r6
 800b52e:	4639      	mov	r1, r7
 800b530:	f7f5 fa44 	bl	80009bc <__aeabi_dcmplt>
 800b534:	b148      	cbz	r0, 800b54a <_dtoa_r+0x17a>
 800b536:	4648      	mov	r0, r9
 800b538:	f7f4 ff64 	bl	8000404 <__aeabi_i2d>
 800b53c:	4632      	mov	r2, r6
 800b53e:	463b      	mov	r3, r7
 800b540:	f7f5 fa32 	bl	80009a8 <__aeabi_dcmpeq>
 800b544:	b908      	cbnz	r0, 800b54a <_dtoa_r+0x17a>
 800b546:	f109 39ff 	add.w	r9, r9, #4294967295
 800b54a:	f1b9 0f16 	cmp.w	r9, #22
 800b54e:	d857      	bhi.n	800b600 <_dtoa_r+0x230>
 800b550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b554:	4b5d      	ldr	r3, [pc, #372]	; (800b6cc <_dtoa_r+0x2fc>)
 800b556:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f7f5 fa2d 	bl	80009bc <__aeabi_dcmplt>
 800b562:	2800      	cmp	r0, #0
 800b564:	d04e      	beq.n	800b604 <_dtoa_r+0x234>
 800b566:	2300      	movs	r3, #0
 800b568:	f109 39ff 	add.w	r9, r9, #4294967295
 800b56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b56e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b570:	1b1c      	subs	r4, r3, r4
 800b572:	1e63      	subs	r3, r4, #1
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	bf49      	itett	mi
 800b578:	f1c4 0301 	rsbmi	r3, r4, #1
 800b57c:	2300      	movpl	r3, #0
 800b57e:	9306      	strmi	r3, [sp, #24]
 800b580:	2300      	movmi	r3, #0
 800b582:	bf54      	ite	pl
 800b584:	9306      	strpl	r3, [sp, #24]
 800b586:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b588:	f1b9 0f00 	cmp.w	r9, #0
 800b58c:	db3c      	blt.n	800b608 <_dtoa_r+0x238>
 800b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b590:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b594:	444b      	add	r3, r9
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	2300      	movs	r3, #0
 800b59a:	930a      	str	r3, [sp, #40]	; 0x28
 800b59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b59e:	2b09      	cmp	r3, #9
 800b5a0:	d86c      	bhi.n	800b67c <_dtoa_r+0x2ac>
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	bfc4      	itt	gt
 800b5a6:	3b04      	subgt	r3, #4
 800b5a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b5aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ac:	bfc8      	it	gt
 800b5ae:	2400      	movgt	r4, #0
 800b5b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b5b4:	bfd8      	it	le
 800b5b6:	2401      	movle	r4, #1
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	f200 808b 	bhi.w	800b6d4 <_dtoa_r+0x304>
 800b5be:	e8df f003 	tbb	[pc, r3]
 800b5c2:	4f2d      	.short	0x4f2d
 800b5c4:	5b4d      	.short	0x5b4d
 800b5c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b5ca:	441c      	add	r4, r3
 800b5cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	bfc3      	ittte	gt
 800b5d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b5dc:	fa09 f303 	lslgt.w	r3, r9, r3
 800b5e0:	f1c3 0320 	rsble	r3, r3, #32
 800b5e4:	bfc6      	itte	gt
 800b5e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b5ea:	4318      	orrgt	r0, r3
 800b5ec:	fa06 f003 	lslle.w	r0, r6, r3
 800b5f0:	f7f4 fef8 	bl	80003e4 <__aeabi_ui2d>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b5fa:	3c01      	subs	r4, #1
 800b5fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5fe:	e770      	b.n	800b4e2 <_dtoa_r+0x112>
 800b600:	2301      	movs	r3, #1
 800b602:	e7b3      	b.n	800b56c <_dtoa_r+0x19c>
 800b604:	900f      	str	r0, [sp, #60]	; 0x3c
 800b606:	e7b2      	b.n	800b56e <_dtoa_r+0x19e>
 800b608:	9b06      	ldr	r3, [sp, #24]
 800b60a:	eba3 0309 	sub.w	r3, r3, r9
 800b60e:	9306      	str	r3, [sp, #24]
 800b610:	f1c9 0300 	rsb	r3, r9, #0
 800b614:	930a      	str	r3, [sp, #40]	; 0x28
 800b616:	2300      	movs	r3, #0
 800b618:	930e      	str	r3, [sp, #56]	; 0x38
 800b61a:	e7bf      	b.n	800b59c <_dtoa_r+0x1cc>
 800b61c:	2300      	movs	r3, #0
 800b61e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b622:	2b00      	cmp	r3, #0
 800b624:	dc59      	bgt.n	800b6da <_dtoa_r+0x30a>
 800b626:	f04f 0b01 	mov.w	fp, #1
 800b62a:	465b      	mov	r3, fp
 800b62c:	f8cd b008 	str.w	fp, [sp, #8]
 800b630:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b634:	2200      	movs	r2, #0
 800b636:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b638:	6042      	str	r2, [r0, #4]
 800b63a:	2204      	movs	r2, #4
 800b63c:	f102 0614 	add.w	r6, r2, #20
 800b640:	429e      	cmp	r6, r3
 800b642:	6841      	ldr	r1, [r0, #4]
 800b644:	d94f      	bls.n	800b6e6 <_dtoa_r+0x316>
 800b646:	4628      	mov	r0, r5
 800b648:	f001 fa80 	bl	800cb4c <_Balloc>
 800b64c:	9008      	str	r0, [sp, #32]
 800b64e:	2800      	cmp	r0, #0
 800b650:	d14d      	bne.n	800b6ee <_dtoa_r+0x31e>
 800b652:	4602      	mov	r2, r0
 800b654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b658:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <_dtoa_r+0x300>)
 800b65a:	e6cd      	b.n	800b3f8 <_dtoa_r+0x28>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e7de      	b.n	800b61e <_dtoa_r+0x24e>
 800b660:	2300      	movs	r3, #0
 800b662:	930b      	str	r3, [sp, #44]	; 0x2c
 800b664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b666:	eb09 0b03 	add.w	fp, r9, r3
 800b66a:	f10b 0301 	add.w	r3, fp, #1
 800b66e:	2b01      	cmp	r3, #1
 800b670:	9302      	str	r3, [sp, #8]
 800b672:	bfb8      	it	lt
 800b674:	2301      	movlt	r3, #1
 800b676:	e7dd      	b.n	800b634 <_dtoa_r+0x264>
 800b678:	2301      	movs	r3, #1
 800b67a:	e7f2      	b.n	800b662 <_dtoa_r+0x292>
 800b67c:	2401      	movs	r4, #1
 800b67e:	2300      	movs	r3, #0
 800b680:	940b      	str	r4, [sp, #44]	; 0x2c
 800b682:	9322      	str	r3, [sp, #136]	; 0x88
 800b684:	f04f 3bff 	mov.w	fp, #4294967295
 800b688:	2200      	movs	r2, #0
 800b68a:	2312      	movs	r3, #18
 800b68c:	f8cd b008 	str.w	fp, [sp, #8]
 800b690:	9223      	str	r2, [sp, #140]	; 0x8c
 800b692:	e7cf      	b.n	800b634 <_dtoa_r+0x264>
 800b694:	f3af 8000 	nop.w
 800b698:	636f4361 	.word	0x636f4361
 800b69c:	3fd287a7 	.word	0x3fd287a7
 800b6a0:	8b60c8b3 	.word	0x8b60c8b3
 800b6a4:	3fc68a28 	.word	0x3fc68a28
 800b6a8:	509f79fb 	.word	0x509f79fb
 800b6ac:	3fd34413 	.word	0x3fd34413
 800b6b0:	08010f1e 	.word	0x08010f1e
 800b6b4:	08010f35 	.word	0x08010f35
 800b6b8:	7ff00000 	.word	0x7ff00000
 800b6bc:	08010f1a 	.word	0x08010f1a
 800b6c0:	08010f11 	.word	0x08010f11
 800b6c4:	08010d96 	.word	0x08010d96
 800b6c8:	3ff80000 	.word	0x3ff80000
 800b6cc:	08011110 	.word	0x08011110
 800b6d0:	08010f94 	.word	0x08010f94
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d8:	e7d4      	b.n	800b684 <_dtoa_r+0x2b4>
 800b6da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b6de:	465b      	mov	r3, fp
 800b6e0:	f8cd b008 	str.w	fp, [sp, #8]
 800b6e4:	e7a6      	b.n	800b634 <_dtoa_r+0x264>
 800b6e6:	3101      	adds	r1, #1
 800b6e8:	6041      	str	r1, [r0, #4]
 800b6ea:	0052      	lsls	r2, r2, #1
 800b6ec:	e7a6      	b.n	800b63c <_dtoa_r+0x26c>
 800b6ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6f0:	9a08      	ldr	r2, [sp, #32]
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	9b02      	ldr	r3, [sp, #8]
 800b6f6:	2b0e      	cmp	r3, #14
 800b6f8:	f200 80a8 	bhi.w	800b84c <_dtoa_r+0x47c>
 800b6fc:	2c00      	cmp	r4, #0
 800b6fe:	f000 80a5 	beq.w	800b84c <_dtoa_r+0x47c>
 800b702:	f1b9 0f00 	cmp.w	r9, #0
 800b706:	dd34      	ble.n	800b772 <_dtoa_r+0x3a2>
 800b708:	4a9a      	ldr	r2, [pc, #616]	; (800b974 <_dtoa_r+0x5a4>)
 800b70a:	f009 030f 	and.w	r3, r9, #15
 800b70e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b712:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b71a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b71e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b722:	d016      	beq.n	800b752 <_dtoa_r+0x382>
 800b724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b728:	4b93      	ldr	r3, [pc, #588]	; (800b978 <_dtoa_r+0x5a8>)
 800b72a:	2703      	movs	r7, #3
 800b72c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b730:	f7f4 fffc 	bl	800072c <__aeabi_ddiv>
 800b734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b738:	f004 040f 	and.w	r4, r4, #15
 800b73c:	4e8e      	ldr	r6, [pc, #568]	; (800b978 <_dtoa_r+0x5a8>)
 800b73e:	b954      	cbnz	r4, 800b756 <_dtoa_r+0x386>
 800b740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b748:	f7f4 fff0 	bl	800072c <__aeabi_ddiv>
 800b74c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b750:	e029      	b.n	800b7a6 <_dtoa_r+0x3d6>
 800b752:	2702      	movs	r7, #2
 800b754:	e7f2      	b.n	800b73c <_dtoa_r+0x36c>
 800b756:	07e1      	lsls	r1, r4, #31
 800b758:	d508      	bpl.n	800b76c <_dtoa_r+0x39c>
 800b75a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b75e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b762:	f7f4 feb9 	bl	80004d8 <__aeabi_dmul>
 800b766:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b76a:	3701      	adds	r7, #1
 800b76c:	1064      	asrs	r4, r4, #1
 800b76e:	3608      	adds	r6, #8
 800b770:	e7e5      	b.n	800b73e <_dtoa_r+0x36e>
 800b772:	f000 80a5 	beq.w	800b8c0 <_dtoa_r+0x4f0>
 800b776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b77a:	f1c9 0400 	rsb	r4, r9, #0
 800b77e:	4b7d      	ldr	r3, [pc, #500]	; (800b974 <_dtoa_r+0x5a4>)
 800b780:	f004 020f 	and.w	r2, r4, #15
 800b784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7f4 fea4 	bl	80004d8 <__aeabi_dmul>
 800b790:	2702      	movs	r7, #2
 800b792:	2300      	movs	r3, #0
 800b794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b798:	4e77      	ldr	r6, [pc, #476]	; (800b978 <_dtoa_r+0x5a8>)
 800b79a:	1124      	asrs	r4, r4, #4
 800b79c:	2c00      	cmp	r4, #0
 800b79e:	f040 8084 	bne.w	800b8aa <_dtoa_r+0x4da>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1d2      	bne.n	800b74c <_dtoa_r+0x37c>
 800b7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 808b 	beq.w	800b8c4 <_dtoa_r+0x4f4>
 800b7ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b7b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b7b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4b6f      	ldr	r3, [pc, #444]	; (800b97c <_dtoa_r+0x5ac>)
 800b7be:	f7f5 f8fd 	bl	80009bc <__aeabi_dcmplt>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d07e      	beq.n	800b8c4 <_dtoa_r+0x4f4>
 800b7c6:	9b02      	ldr	r3, [sp, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d07b      	beq.n	800b8c4 <_dtoa_r+0x4f4>
 800b7cc:	f1bb 0f00 	cmp.w	fp, #0
 800b7d0:	dd38      	ble.n	800b844 <_dtoa_r+0x474>
 800b7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	4b69      	ldr	r3, [pc, #420]	; (800b980 <_dtoa_r+0x5b0>)
 800b7da:	f7f4 fe7d 	bl	80004d8 <__aeabi_dmul>
 800b7de:	465c      	mov	r4, fp
 800b7e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7e4:	f109 38ff 	add.w	r8, r9, #4294967295
 800b7e8:	3701      	adds	r7, #1
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f7f4 fe0a 	bl	8000404 <__aeabi_i2d>
 800b7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7f4:	f7f4 fe70 	bl	80004d8 <__aeabi_dmul>
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4b62      	ldr	r3, [pc, #392]	; (800b984 <_dtoa_r+0x5b4>)
 800b7fc:	f7f4 fcb6 	bl	800016c <__adddf3>
 800b800:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b804:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b808:	9611      	str	r6, [sp, #68]	; 0x44
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	d15d      	bne.n	800b8ca <_dtoa_r+0x4fa>
 800b80e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b812:	2200      	movs	r2, #0
 800b814:	4b5c      	ldr	r3, [pc, #368]	; (800b988 <_dtoa_r+0x5b8>)
 800b816:	f7f4 fca7 	bl	8000168 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b822:	4633      	mov	r3, r6
 800b824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b826:	f7f5 f8e7 	bl	80009f8 <__aeabi_dcmpgt>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	f040 829e 	bne.w	800bd6c <_dtoa_r+0x99c>
 800b830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b836:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b83a:	f7f5 f8bf 	bl	80009bc <__aeabi_dcmplt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f040 8292 	bne.w	800bd68 <_dtoa_r+0x998>
 800b844:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b84c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f2c0 8153 	blt.w	800bafa <_dtoa_r+0x72a>
 800b854:	f1b9 0f0e 	cmp.w	r9, #14
 800b858:	f300 814f 	bgt.w	800bafa <_dtoa_r+0x72a>
 800b85c:	4b45      	ldr	r3, [pc, #276]	; (800b974 <_dtoa_r+0x5a4>)
 800b85e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b862:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b866:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b86a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f280 80db 	bge.w	800ba28 <_dtoa_r+0x658>
 800b872:	9b02      	ldr	r3, [sp, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	f300 80d7 	bgt.w	800ba28 <_dtoa_r+0x658>
 800b87a:	f040 8274 	bne.w	800bd66 <_dtoa_r+0x996>
 800b87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b882:	2200      	movs	r2, #0
 800b884:	4b40      	ldr	r3, [pc, #256]	; (800b988 <_dtoa_r+0x5b8>)
 800b886:	f7f4 fe27 	bl	80004d8 <__aeabi_dmul>
 800b88a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88e:	f7f5 f8a9 	bl	80009e4 <__aeabi_dcmpge>
 800b892:	9c02      	ldr	r4, [sp, #8]
 800b894:	4626      	mov	r6, r4
 800b896:	2800      	cmp	r0, #0
 800b898:	f040 824a 	bne.w	800bd30 <_dtoa_r+0x960>
 800b89c:	2331      	movs	r3, #49	; 0x31
 800b89e:	9f08      	ldr	r7, [sp, #32]
 800b8a0:	f109 0901 	add.w	r9, r9, #1
 800b8a4:	f807 3b01 	strb.w	r3, [r7], #1
 800b8a8:	e246      	b.n	800bd38 <_dtoa_r+0x968>
 800b8aa:	07e2      	lsls	r2, r4, #31
 800b8ac:	d505      	bpl.n	800b8ba <_dtoa_r+0x4ea>
 800b8ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8b2:	f7f4 fe11 	bl	80004d8 <__aeabi_dmul>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	3701      	adds	r7, #1
 800b8ba:	1064      	asrs	r4, r4, #1
 800b8bc:	3608      	adds	r6, #8
 800b8be:	e76d      	b.n	800b79c <_dtoa_r+0x3cc>
 800b8c0:	2702      	movs	r7, #2
 800b8c2:	e770      	b.n	800b7a6 <_dtoa_r+0x3d6>
 800b8c4:	46c8      	mov	r8, r9
 800b8c6:	9c02      	ldr	r4, [sp, #8]
 800b8c8:	e78f      	b.n	800b7ea <_dtoa_r+0x41a>
 800b8ca:	9908      	ldr	r1, [sp, #32]
 800b8cc:	4b29      	ldr	r3, [pc, #164]	; (800b974 <_dtoa_r+0x5a4>)
 800b8ce:	4421      	add	r1, r4
 800b8d0:	9112      	str	r1, [sp, #72]	; 0x48
 800b8d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b8dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	d055      	beq.n	800b990 <_dtoa_r+0x5c0>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	4929      	ldr	r1, [pc, #164]	; (800b98c <_dtoa_r+0x5bc>)
 800b8e8:	f7f4 ff20 	bl	800072c <__aeabi_ddiv>
 800b8ec:	463b      	mov	r3, r7
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	f7f4 fc3a 	bl	8000168 <__aeabi_dsub>
 800b8f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8f8:	9f08      	ldr	r7, [sp, #32]
 800b8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fe:	f7f5 f89b 	bl	8000a38 <__aeabi_d2iz>
 800b902:	4604      	mov	r4, r0
 800b904:	f7f4 fd7e 	bl	8000404 <__aeabi_i2d>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b910:	f7f4 fc2a 	bl	8000168 <__aeabi_dsub>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	3430      	adds	r4, #48	; 0x30
 800b91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b91e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b922:	f807 4b01 	strb.w	r4, [r7], #1
 800b926:	f7f5 f849 	bl	80009bc <__aeabi_dcmplt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d174      	bne.n	800ba18 <_dtoa_r+0x648>
 800b92e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b932:	2000      	movs	r0, #0
 800b934:	4911      	ldr	r1, [pc, #68]	; (800b97c <_dtoa_r+0x5ac>)
 800b936:	f7f4 fc17 	bl	8000168 <__aeabi_dsub>
 800b93a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b93e:	f7f5 f83d 	bl	80009bc <__aeabi_dcmplt>
 800b942:	2800      	cmp	r0, #0
 800b944:	f040 80b6 	bne.w	800bab4 <_dtoa_r+0x6e4>
 800b948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b94a:	429f      	cmp	r7, r3
 800b94c:	f43f af7a 	beq.w	800b844 <_dtoa_r+0x474>
 800b950:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b954:	2200      	movs	r2, #0
 800b956:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <_dtoa_r+0x5b0>)
 800b958:	f7f4 fdbe 	bl	80004d8 <__aeabi_dmul>
 800b95c:	2200      	movs	r2, #0
 800b95e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b966:	4b06      	ldr	r3, [pc, #24]	; (800b980 <_dtoa_r+0x5b0>)
 800b968:	f7f4 fdb6 	bl	80004d8 <__aeabi_dmul>
 800b96c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b970:	e7c3      	b.n	800b8fa <_dtoa_r+0x52a>
 800b972:	bf00      	nop
 800b974:	08011110 	.word	0x08011110
 800b978:	080110e8 	.word	0x080110e8
 800b97c:	3ff00000 	.word	0x3ff00000
 800b980:	40240000 	.word	0x40240000
 800b984:	401c0000 	.word	0x401c0000
 800b988:	40140000 	.word	0x40140000
 800b98c:	3fe00000 	.word	0x3fe00000
 800b990:	4630      	mov	r0, r6
 800b992:	4639      	mov	r1, r7
 800b994:	f7f4 fda0 	bl	80004d8 <__aeabi_dmul>
 800b998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b99a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b99e:	9c08      	ldr	r4, [sp, #32]
 800b9a0:	9314      	str	r3, [sp, #80]	; 0x50
 800b9a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a6:	f7f5 f847 	bl	8000a38 <__aeabi_d2iz>
 800b9aa:	9015      	str	r0, [sp, #84]	; 0x54
 800b9ac:	f7f4 fd2a 	bl	8000404 <__aeabi_i2d>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	f7f4 fbd6 	bl	8000168 <__aeabi_dsub>
 800b9bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9be:	4606      	mov	r6, r0
 800b9c0:	3330      	adds	r3, #48	; 0x30
 800b9c2:	f804 3b01 	strb.w	r3, [r4], #1
 800b9c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	429c      	cmp	r4, r3
 800b9cc:	f04f 0200 	mov.w	r2, #0
 800b9d0:	d124      	bne.n	800ba1c <_dtoa_r+0x64c>
 800b9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9d6:	4bb3      	ldr	r3, [pc, #716]	; (800bca4 <_dtoa_r+0x8d4>)
 800b9d8:	f7f4 fbc8 	bl	800016c <__adddf3>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	f7f5 f808 	bl	80009f8 <__aeabi_dcmpgt>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d162      	bne.n	800bab2 <_dtoa_r+0x6e2>
 800b9ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	49ac      	ldr	r1, [pc, #688]	; (800bca4 <_dtoa_r+0x8d4>)
 800b9f4:	f7f4 fbb8 	bl	8000168 <__aeabi_dsub>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 ffdc 	bl	80009bc <__aeabi_dcmplt>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f43f af1d 	beq.w	800b844 <_dtoa_r+0x474>
 800ba0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ba0c:	1e7b      	subs	r3, r7, #1
 800ba0e:	9314      	str	r3, [sp, #80]	; 0x50
 800ba10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ba14:	2b30      	cmp	r3, #48	; 0x30
 800ba16:	d0f8      	beq.n	800ba0a <_dtoa_r+0x63a>
 800ba18:	46c1      	mov	r9, r8
 800ba1a:	e03a      	b.n	800ba92 <_dtoa_r+0x6c2>
 800ba1c:	4ba2      	ldr	r3, [pc, #648]	; (800bca8 <_dtoa_r+0x8d8>)
 800ba1e:	f7f4 fd5b 	bl	80004d8 <__aeabi_dmul>
 800ba22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba26:	e7bc      	b.n	800b9a2 <_dtoa_r+0x5d2>
 800ba28:	9f08      	ldr	r7, [sp, #32]
 800ba2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba32:	f7f4 fe7b 	bl	800072c <__aeabi_ddiv>
 800ba36:	f7f4 ffff 	bl	8000a38 <__aeabi_d2iz>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f7f4 fce2 	bl	8000404 <__aeabi_i2d>
 800ba40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba44:	f7f4 fd48 	bl	80004d8 <__aeabi_dmul>
 800ba48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4602      	mov	r2, r0
 800ba50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba54:	f7f4 fb88 	bl	8000168 <__aeabi_dsub>
 800ba58:	f807 6b01 	strb.w	r6, [r7], #1
 800ba5c:	9e08      	ldr	r6, [sp, #32]
 800ba5e:	9b02      	ldr	r3, [sp, #8]
 800ba60:	1bbe      	subs	r6, r7, r6
 800ba62:	42b3      	cmp	r3, r6
 800ba64:	d13a      	bne.n	800badc <_dtoa_r+0x70c>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	f7f4 fb7f 	bl	800016c <__adddf3>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba7a:	f7f4 ffbd 	bl	80009f8 <__aeabi_dcmpgt>
 800ba7e:	bb58      	cbnz	r0, 800bad8 <_dtoa_r+0x708>
 800ba80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba88:	f7f4 ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 800ba8c:	b108      	cbz	r0, 800ba92 <_dtoa_r+0x6c2>
 800ba8e:	07e1      	lsls	r1, r4, #31
 800ba90:	d422      	bmi.n	800bad8 <_dtoa_r+0x708>
 800ba92:	4628      	mov	r0, r5
 800ba94:	4651      	mov	r1, sl
 800ba96:	f001 f899 	bl	800cbcc <_Bfree>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	703b      	strb	r3, [r7, #0]
 800ba9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800baa0:	f109 0001 	add.w	r0, r9, #1
 800baa4:	6018      	str	r0, [r3, #0]
 800baa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f43f acdf 	beq.w	800b46c <_dtoa_r+0x9c>
 800baae:	601f      	str	r7, [r3, #0]
 800bab0:	e4dc      	b.n	800b46c <_dtoa_r+0x9c>
 800bab2:	4627      	mov	r7, r4
 800bab4:	463b      	mov	r3, r7
 800bab6:	461f      	mov	r7, r3
 800bab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800babc:	2a39      	cmp	r2, #57	; 0x39
 800babe:	d107      	bne.n	800bad0 <_dtoa_r+0x700>
 800bac0:	9a08      	ldr	r2, [sp, #32]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d1f7      	bne.n	800bab6 <_dtoa_r+0x6e6>
 800bac6:	2230      	movs	r2, #48	; 0x30
 800bac8:	9908      	ldr	r1, [sp, #32]
 800baca:	f108 0801 	add.w	r8, r8, #1
 800bace:	700a      	strb	r2, [r1, #0]
 800bad0:	781a      	ldrb	r2, [r3, #0]
 800bad2:	3201      	adds	r2, #1
 800bad4:	701a      	strb	r2, [r3, #0]
 800bad6:	e79f      	b.n	800ba18 <_dtoa_r+0x648>
 800bad8:	46c8      	mov	r8, r9
 800bada:	e7eb      	b.n	800bab4 <_dtoa_r+0x6e4>
 800badc:	2200      	movs	r2, #0
 800bade:	4b72      	ldr	r3, [pc, #456]	; (800bca8 <_dtoa_r+0x8d8>)
 800bae0:	f7f4 fcfa 	bl	80004d8 <__aeabi_dmul>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	f7f4 ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d098      	beq.n	800ba2a <_dtoa_r+0x65a>
 800baf8:	e7cb      	b.n	800ba92 <_dtoa_r+0x6c2>
 800bafa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	f000 80cd 	beq.w	800bc9c <_dtoa_r+0x8cc>
 800bb02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bb04:	2a01      	cmp	r2, #1
 800bb06:	f300 80af 	bgt.w	800bc68 <_dtoa_r+0x898>
 800bb0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	f000 80a7 	beq.w	800bc60 <_dtoa_r+0x890>
 800bb12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bb18:	9f06      	ldr	r7, [sp, #24]
 800bb1a:	9a06      	ldr	r2, [sp, #24]
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	441a      	add	r2, r3
 800bb20:	9206      	str	r2, [sp, #24]
 800bb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb24:	4628      	mov	r0, r5
 800bb26:	441a      	add	r2, r3
 800bb28:	9209      	str	r2, [sp, #36]	; 0x24
 800bb2a:	f001 f953 	bl	800cdd4 <__i2b>
 800bb2e:	4606      	mov	r6, r0
 800bb30:	2f00      	cmp	r7, #0
 800bb32:	dd0c      	ble.n	800bb4e <_dtoa_r+0x77e>
 800bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd09      	ble.n	800bb4e <_dtoa_r+0x77e>
 800bb3a:	42bb      	cmp	r3, r7
 800bb3c:	bfa8      	it	ge
 800bb3e:	463b      	movge	r3, r7
 800bb40:	9a06      	ldr	r2, [sp, #24]
 800bb42:	1aff      	subs	r7, r7, r3
 800bb44:	1ad2      	subs	r2, r2, r3
 800bb46:	9206      	str	r2, [sp, #24]
 800bb48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb50:	b1f3      	cbz	r3, 800bb90 <_dtoa_r+0x7c0>
 800bb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 80a9 	beq.w	800bcac <_dtoa_r+0x8dc>
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	dd10      	ble.n	800bb80 <_dtoa_r+0x7b0>
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4622      	mov	r2, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	f001 f9f0 	bl	800cf48 <__pow5mult>
 800bb68:	4652      	mov	r2, sl
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f001 f946 	bl	800ce00 <__multiply>
 800bb74:	4680      	mov	r8, r0
 800bb76:	4651      	mov	r1, sl
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f001 f827 	bl	800cbcc <_Bfree>
 800bb7e:	46c2      	mov	sl, r8
 800bb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb82:	1b1a      	subs	r2, r3, r4
 800bb84:	d004      	beq.n	800bb90 <_dtoa_r+0x7c0>
 800bb86:	4651      	mov	r1, sl
 800bb88:	4628      	mov	r0, r5
 800bb8a:	f001 f9dd 	bl	800cf48 <__pow5mult>
 800bb8e:	4682      	mov	sl, r0
 800bb90:	2101      	movs	r1, #1
 800bb92:	4628      	mov	r0, r5
 800bb94:	f001 f91e 	bl	800cdd4 <__i2b>
 800bb98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f340 8087 	ble.w	800bcb0 <_dtoa_r+0x8e0>
 800bba2:	461a      	mov	r2, r3
 800bba4:	4601      	mov	r1, r0
 800bba6:	4628      	mov	r0, r5
 800bba8:	f001 f9ce 	bl	800cf48 <__pow5mult>
 800bbac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbae:	4604      	mov	r4, r0
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	f340 8080 	ble.w	800bcb6 <_dtoa_r+0x8e6>
 800bbb6:	f04f 0800 	mov.w	r8, #0
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbc0:	6918      	ldr	r0, [r3, #16]
 800bbc2:	f001 f8b9 	bl	800cd38 <__hi0bits>
 800bbc6:	f1c0 0020 	rsb	r0, r0, #32
 800bbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbcc:	4418      	add	r0, r3
 800bbce:	f010 001f 	ands.w	r0, r0, #31
 800bbd2:	f000 8092 	beq.w	800bcfa <_dtoa_r+0x92a>
 800bbd6:	f1c0 0320 	rsb	r3, r0, #32
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	f340 808a 	ble.w	800bcf4 <_dtoa_r+0x924>
 800bbe0:	f1c0 001c 	rsb	r0, r0, #28
 800bbe4:	9b06      	ldr	r3, [sp, #24]
 800bbe6:	4407      	add	r7, r0
 800bbe8:	4403      	add	r3, r0
 800bbea:	9306      	str	r3, [sp, #24]
 800bbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbee:	4403      	add	r3, r0
 800bbf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf2:	9b06      	ldr	r3, [sp, #24]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dd05      	ble.n	800bc04 <_dtoa_r+0x834>
 800bbf8:	4651      	mov	r1, sl
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f001 f9fd 	bl	800cffc <__lshift>
 800bc02:	4682      	mov	sl, r0
 800bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd05      	ble.n	800bc16 <_dtoa_r+0x846>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f001 f9f4 	bl	800cffc <__lshift>
 800bc14:	4604      	mov	r4, r0
 800bc16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d070      	beq.n	800bcfe <_dtoa_r+0x92e>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4650      	mov	r0, sl
 800bc20:	f001 fa58 	bl	800d0d4 <__mcmp>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	da6a      	bge.n	800bcfe <_dtoa_r+0x92e>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4651      	mov	r1, sl
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 ffee 	bl	800cc10 <__multadd>
 800bc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc36:	4682      	mov	sl, r0
 800bc38:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8193 	beq.w	800bf68 <_dtoa_r+0xb98>
 800bc42:	4631      	mov	r1, r6
 800bc44:	2300      	movs	r3, #0
 800bc46:	220a      	movs	r2, #10
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f000 ffe1 	bl	800cc10 <__multadd>
 800bc4e:	f1bb 0f00 	cmp.w	fp, #0
 800bc52:	4606      	mov	r6, r0
 800bc54:	f300 8093 	bgt.w	800bd7e <_dtoa_r+0x9ae>
 800bc58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	dc57      	bgt.n	800bd0e <_dtoa_r+0x93e>
 800bc5e:	e08e      	b.n	800bd7e <_dtoa_r+0x9ae>
 800bc60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bc62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc66:	e756      	b.n	800bb16 <_dtoa_r+0x746>
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	1e5c      	subs	r4, r3, #1
 800bc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6e:	42a3      	cmp	r3, r4
 800bc70:	bfb7      	itett	lt
 800bc72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bc74:	1b1c      	subge	r4, r3, r4
 800bc76:	1ae2      	sublt	r2, r4, r3
 800bc78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bc7a:	bfbe      	ittt	lt
 800bc7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bc7e:	189b      	addlt	r3, r3, r2
 800bc80:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bc82:	9b02      	ldr	r3, [sp, #8]
 800bc84:	bfb8      	it	lt
 800bc86:	2400      	movlt	r4, #0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfbb      	ittet	lt
 800bc8c:	9b06      	ldrlt	r3, [sp, #24]
 800bc8e:	9a02      	ldrlt	r2, [sp, #8]
 800bc90:	9f06      	ldrge	r7, [sp, #24]
 800bc92:	1a9f      	sublt	r7, r3, r2
 800bc94:	bfac      	ite	ge
 800bc96:	9b02      	ldrge	r3, [sp, #8]
 800bc98:	2300      	movlt	r3, #0
 800bc9a:	e73e      	b.n	800bb1a <_dtoa_r+0x74a>
 800bc9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc9e:	9f06      	ldr	r7, [sp, #24]
 800bca0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bca2:	e745      	b.n	800bb30 <_dtoa_r+0x760>
 800bca4:	3fe00000 	.word	0x3fe00000
 800bca8:	40240000 	.word	0x40240000
 800bcac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcae:	e76a      	b.n	800bb86 <_dtoa_r+0x7b6>
 800bcb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	dc19      	bgt.n	800bcea <_dtoa_r+0x91a>
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	b9bb      	cbnz	r3, 800bcea <_dtoa_r+0x91a>
 800bcba:	9b05      	ldr	r3, [sp, #20]
 800bcbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcc0:	b99b      	cbnz	r3, 800bcea <_dtoa_r+0x91a>
 800bcc2:	9b05      	ldr	r3, [sp, #20]
 800bcc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcc8:	0d1b      	lsrs	r3, r3, #20
 800bcca:	051b      	lsls	r3, r3, #20
 800bccc:	b183      	cbz	r3, 800bcf0 <_dtoa_r+0x920>
 800bcce:	f04f 0801 	mov.w	r8, #1
 800bcd2:	9b06      	ldr	r3, [sp, #24]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	9306      	str	r3, [sp, #24]
 800bcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcda:	3301      	adds	r3, #1
 800bcdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f47f af6a 	bne.w	800bbba <_dtoa_r+0x7ea>
 800bce6:	2001      	movs	r0, #1
 800bce8:	e76f      	b.n	800bbca <_dtoa_r+0x7fa>
 800bcea:	f04f 0800 	mov.w	r8, #0
 800bcee:	e7f6      	b.n	800bcde <_dtoa_r+0x90e>
 800bcf0:	4698      	mov	r8, r3
 800bcf2:	e7f4      	b.n	800bcde <_dtoa_r+0x90e>
 800bcf4:	f43f af7d 	beq.w	800bbf2 <_dtoa_r+0x822>
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	301c      	adds	r0, #28
 800bcfc:	e772      	b.n	800bbe4 <_dtoa_r+0x814>
 800bcfe:	9b02      	ldr	r3, [sp, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dc36      	bgt.n	800bd72 <_dtoa_r+0x9a2>
 800bd04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	dd33      	ble.n	800bd72 <_dtoa_r+0x9a2>
 800bd0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bd0e:	f1bb 0f00 	cmp.w	fp, #0
 800bd12:	d10d      	bne.n	800bd30 <_dtoa_r+0x960>
 800bd14:	4621      	mov	r1, r4
 800bd16:	465b      	mov	r3, fp
 800bd18:	2205      	movs	r2, #5
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 ff78 	bl	800cc10 <__multadd>
 800bd20:	4601      	mov	r1, r0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4650      	mov	r0, sl
 800bd26:	f001 f9d5 	bl	800d0d4 <__mcmp>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f73f adb6 	bgt.w	800b89c <_dtoa_r+0x4cc>
 800bd30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd32:	9f08      	ldr	r7, [sp, #32]
 800bd34:	ea6f 0903 	mvn.w	r9, r3
 800bd38:	f04f 0800 	mov.w	r8, #0
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 ff44 	bl	800cbcc <_Bfree>
 800bd44:	2e00      	cmp	r6, #0
 800bd46:	f43f aea4 	beq.w	800ba92 <_dtoa_r+0x6c2>
 800bd4a:	f1b8 0f00 	cmp.w	r8, #0
 800bd4e:	d005      	beq.n	800bd5c <_dtoa_r+0x98c>
 800bd50:	45b0      	cmp	r8, r6
 800bd52:	d003      	beq.n	800bd5c <_dtoa_r+0x98c>
 800bd54:	4641      	mov	r1, r8
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 ff38 	bl	800cbcc <_Bfree>
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f000 ff34 	bl	800cbcc <_Bfree>
 800bd64:	e695      	b.n	800ba92 <_dtoa_r+0x6c2>
 800bd66:	2400      	movs	r4, #0
 800bd68:	4626      	mov	r6, r4
 800bd6a:	e7e1      	b.n	800bd30 <_dtoa_r+0x960>
 800bd6c:	46c1      	mov	r9, r8
 800bd6e:	4626      	mov	r6, r4
 800bd70:	e594      	b.n	800b89c <_dtoa_r+0x4cc>
 800bd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd74:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80fc 	beq.w	800bf76 <_dtoa_r+0xba6>
 800bd7e:	2f00      	cmp	r7, #0
 800bd80:	dd05      	ble.n	800bd8e <_dtoa_r+0x9be>
 800bd82:	4631      	mov	r1, r6
 800bd84:	463a      	mov	r2, r7
 800bd86:	4628      	mov	r0, r5
 800bd88:	f001 f938 	bl	800cffc <__lshift>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	f1b8 0f00 	cmp.w	r8, #0
 800bd92:	d05c      	beq.n	800be4e <_dtoa_r+0xa7e>
 800bd94:	4628      	mov	r0, r5
 800bd96:	6871      	ldr	r1, [r6, #4]
 800bd98:	f000 fed8 	bl	800cb4c <_Balloc>
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	b928      	cbnz	r0, 800bdac <_dtoa_r+0x9dc>
 800bda0:	4602      	mov	r2, r0
 800bda2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bda6:	4b7e      	ldr	r3, [pc, #504]	; (800bfa0 <_dtoa_r+0xbd0>)
 800bda8:	f7ff bb26 	b.w	800b3f8 <_dtoa_r+0x28>
 800bdac:	6932      	ldr	r2, [r6, #16]
 800bdae:	f106 010c 	add.w	r1, r6, #12
 800bdb2:	3202      	adds	r2, #2
 800bdb4:	0092      	lsls	r2, r2, #2
 800bdb6:	300c      	adds	r0, #12
 800bdb8:	f7fd fa1e 	bl	80091f8 <memcpy>
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f001 f91b 	bl	800cffc <__lshift>
 800bdc6:	46b0      	mov	r8, r6
 800bdc8:	4606      	mov	r6, r0
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	9b08      	ldr	r3, [sp, #32]
 800bdd2:	445b      	add	r3, fp
 800bdd4:	930a      	str	r3, [sp, #40]	; 0x28
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdde:	9b02      	ldr	r3, [sp, #8]
 800bde0:	4621      	mov	r1, r4
 800bde2:	4650      	mov	r0, sl
 800bde4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bde8:	f7ff fa65 	bl	800b2b6 <quorem>
 800bdec:	4603      	mov	r3, r0
 800bdee:	4641      	mov	r1, r8
 800bdf0:	3330      	adds	r3, #48	; 0x30
 800bdf2:	9004      	str	r0, [sp, #16]
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdf8:	f001 f96c 	bl	800d0d4 <__mcmp>
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	9006      	str	r0, [sp, #24]
 800be00:	4621      	mov	r1, r4
 800be02:	4628      	mov	r0, r5
 800be04:	f001 f982 	bl	800d10c <__mdiff>
 800be08:	68c2      	ldr	r2, [r0, #12]
 800be0a:	4607      	mov	r7, r0
 800be0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0e:	bb02      	cbnz	r2, 800be52 <_dtoa_r+0xa82>
 800be10:	4601      	mov	r1, r0
 800be12:	4650      	mov	r0, sl
 800be14:	f001 f95e 	bl	800d0d4 <__mcmp>
 800be18:	4602      	mov	r2, r0
 800be1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1c:	4639      	mov	r1, r7
 800be1e:	4628      	mov	r0, r5
 800be20:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800be24:	f000 fed2 	bl	800cbcc <_Bfree>
 800be28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be2c:	9f02      	ldr	r7, [sp, #8]
 800be2e:	ea43 0102 	orr.w	r1, r3, r2
 800be32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be34:	430b      	orrs	r3, r1
 800be36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be38:	d10d      	bne.n	800be56 <_dtoa_r+0xa86>
 800be3a:	2b39      	cmp	r3, #57	; 0x39
 800be3c:	d027      	beq.n	800be8e <_dtoa_r+0xabe>
 800be3e:	9a06      	ldr	r2, [sp, #24]
 800be40:	2a00      	cmp	r2, #0
 800be42:	dd01      	ble.n	800be48 <_dtoa_r+0xa78>
 800be44:	9b04      	ldr	r3, [sp, #16]
 800be46:	3331      	adds	r3, #49	; 0x31
 800be48:	f88b 3000 	strb.w	r3, [fp]
 800be4c:	e776      	b.n	800bd3c <_dtoa_r+0x96c>
 800be4e:	4630      	mov	r0, r6
 800be50:	e7b9      	b.n	800bdc6 <_dtoa_r+0x9f6>
 800be52:	2201      	movs	r2, #1
 800be54:	e7e2      	b.n	800be1c <_dtoa_r+0xa4c>
 800be56:	9906      	ldr	r1, [sp, #24]
 800be58:	2900      	cmp	r1, #0
 800be5a:	db04      	blt.n	800be66 <_dtoa_r+0xa96>
 800be5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800be5e:	4301      	orrs	r1, r0
 800be60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be62:	4301      	orrs	r1, r0
 800be64:	d120      	bne.n	800bea8 <_dtoa_r+0xad8>
 800be66:	2a00      	cmp	r2, #0
 800be68:	ddee      	ble.n	800be48 <_dtoa_r+0xa78>
 800be6a:	4651      	mov	r1, sl
 800be6c:	2201      	movs	r2, #1
 800be6e:	4628      	mov	r0, r5
 800be70:	9302      	str	r3, [sp, #8]
 800be72:	f001 f8c3 	bl	800cffc <__lshift>
 800be76:	4621      	mov	r1, r4
 800be78:	4682      	mov	sl, r0
 800be7a:	f001 f92b 	bl	800d0d4 <__mcmp>
 800be7e:	2800      	cmp	r0, #0
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	dc02      	bgt.n	800be8a <_dtoa_r+0xaba>
 800be84:	d1e0      	bne.n	800be48 <_dtoa_r+0xa78>
 800be86:	07da      	lsls	r2, r3, #31
 800be88:	d5de      	bpl.n	800be48 <_dtoa_r+0xa78>
 800be8a:	2b39      	cmp	r3, #57	; 0x39
 800be8c:	d1da      	bne.n	800be44 <_dtoa_r+0xa74>
 800be8e:	2339      	movs	r3, #57	; 0x39
 800be90:	f88b 3000 	strb.w	r3, [fp]
 800be94:	463b      	mov	r3, r7
 800be96:	461f      	mov	r7, r3
 800be98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	2a39      	cmp	r2, #57	; 0x39
 800bea0:	d050      	beq.n	800bf44 <_dtoa_r+0xb74>
 800bea2:	3201      	adds	r2, #1
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e749      	b.n	800bd3c <_dtoa_r+0x96c>
 800bea8:	2a00      	cmp	r2, #0
 800beaa:	dd03      	ble.n	800beb4 <_dtoa_r+0xae4>
 800beac:	2b39      	cmp	r3, #57	; 0x39
 800beae:	d0ee      	beq.n	800be8e <_dtoa_r+0xabe>
 800beb0:	3301      	adds	r3, #1
 800beb2:	e7c9      	b.n	800be48 <_dtoa_r+0xa78>
 800beb4:	9a02      	ldr	r2, [sp, #8]
 800beb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800beb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bebc:	428a      	cmp	r2, r1
 800bebe:	d02a      	beq.n	800bf16 <_dtoa_r+0xb46>
 800bec0:	4651      	mov	r1, sl
 800bec2:	2300      	movs	r3, #0
 800bec4:	220a      	movs	r2, #10
 800bec6:	4628      	mov	r0, r5
 800bec8:	f000 fea2 	bl	800cc10 <__multadd>
 800becc:	45b0      	cmp	r8, r6
 800bece:	4682      	mov	sl, r0
 800bed0:	f04f 0300 	mov.w	r3, #0
 800bed4:	f04f 020a 	mov.w	r2, #10
 800bed8:	4641      	mov	r1, r8
 800beda:	4628      	mov	r0, r5
 800bedc:	d107      	bne.n	800beee <_dtoa_r+0xb1e>
 800bede:	f000 fe97 	bl	800cc10 <__multadd>
 800bee2:	4680      	mov	r8, r0
 800bee4:	4606      	mov	r6, r0
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	3301      	adds	r3, #1
 800beea:	9302      	str	r3, [sp, #8]
 800beec:	e777      	b.n	800bdde <_dtoa_r+0xa0e>
 800beee:	f000 fe8f 	bl	800cc10 <__multadd>
 800bef2:	4631      	mov	r1, r6
 800bef4:	4680      	mov	r8, r0
 800bef6:	2300      	movs	r3, #0
 800bef8:	220a      	movs	r2, #10
 800befa:	4628      	mov	r0, r5
 800befc:	f000 fe88 	bl	800cc10 <__multadd>
 800bf00:	4606      	mov	r6, r0
 800bf02:	e7f0      	b.n	800bee6 <_dtoa_r+0xb16>
 800bf04:	f1bb 0f00 	cmp.w	fp, #0
 800bf08:	bfcc      	ite	gt
 800bf0a:	465f      	movgt	r7, fp
 800bf0c:	2701      	movle	r7, #1
 800bf0e:	f04f 0800 	mov.w	r8, #0
 800bf12:	9a08      	ldr	r2, [sp, #32]
 800bf14:	4417      	add	r7, r2
 800bf16:	4651      	mov	r1, sl
 800bf18:	2201      	movs	r2, #1
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	9302      	str	r3, [sp, #8]
 800bf1e:	f001 f86d 	bl	800cffc <__lshift>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4682      	mov	sl, r0
 800bf26:	f001 f8d5 	bl	800d0d4 <__mcmp>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	dcb2      	bgt.n	800be94 <_dtoa_r+0xac4>
 800bf2e:	d102      	bne.n	800bf36 <_dtoa_r+0xb66>
 800bf30:	9b02      	ldr	r3, [sp, #8]
 800bf32:	07db      	lsls	r3, r3, #31
 800bf34:	d4ae      	bmi.n	800be94 <_dtoa_r+0xac4>
 800bf36:	463b      	mov	r3, r7
 800bf38:	461f      	mov	r7, r3
 800bf3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf3e:	2a30      	cmp	r2, #48	; 0x30
 800bf40:	d0fa      	beq.n	800bf38 <_dtoa_r+0xb68>
 800bf42:	e6fb      	b.n	800bd3c <_dtoa_r+0x96c>
 800bf44:	9a08      	ldr	r2, [sp, #32]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d1a5      	bne.n	800be96 <_dtoa_r+0xac6>
 800bf4a:	2331      	movs	r3, #49	; 0x31
 800bf4c:	f109 0901 	add.w	r9, r9, #1
 800bf50:	7013      	strb	r3, [r2, #0]
 800bf52:	e6f3      	b.n	800bd3c <_dtoa_r+0x96c>
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <_dtoa_r+0xbd4>)
 800bf56:	f7ff baa7 	b.w	800b4a8 <_dtoa_r+0xd8>
 800bf5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f47f aa80 	bne.w	800b462 <_dtoa_r+0x92>
 800bf62:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <_dtoa_r+0xbd8>)
 800bf64:	f7ff baa0 	b.w	800b4a8 <_dtoa_r+0xd8>
 800bf68:	f1bb 0f00 	cmp.w	fp, #0
 800bf6c:	dc03      	bgt.n	800bf76 <_dtoa_r+0xba6>
 800bf6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	f73f aecc 	bgt.w	800bd0e <_dtoa_r+0x93e>
 800bf76:	9f08      	ldr	r7, [sp, #32]
 800bf78:	4621      	mov	r1, r4
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	f7ff f99b 	bl	800b2b6 <quorem>
 800bf80:	9a08      	ldr	r2, [sp, #32]
 800bf82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bf86:	f807 3b01 	strb.w	r3, [r7], #1
 800bf8a:	1aba      	subs	r2, r7, r2
 800bf8c:	4593      	cmp	fp, r2
 800bf8e:	ddb9      	ble.n	800bf04 <_dtoa_r+0xb34>
 800bf90:	4651      	mov	r1, sl
 800bf92:	2300      	movs	r3, #0
 800bf94:	220a      	movs	r2, #10
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 fe3a 	bl	800cc10 <__multadd>
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	e7eb      	b.n	800bf78 <_dtoa_r+0xba8>
 800bfa0:	08010f94 	.word	0x08010f94
 800bfa4:	08010d95 	.word	0x08010d95
 800bfa8:	08010f11 	.word	0x08010f11

0800bfac <__sflush_r>:
 800bfac:	898a      	ldrh	r2, [r1, #12]
 800bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	0710      	lsls	r0, r2, #28
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	d458      	bmi.n	800c06c <__sflush_r+0xc0>
 800bfba:	684b      	ldr	r3, [r1, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dc05      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc02      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d0f9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd8:	682f      	ldr	r7, [r5, #0]
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	d032      	beq.n	800c044 <__sflush_r+0x98>
 800bfde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	075a      	lsls	r2, r3, #29
 800bfe4:	d505      	bpl.n	800bff2 <__sflush_r+0x46>
 800bfe6:	6863      	ldr	r3, [r4, #4]
 800bfe8:	1ac0      	subs	r0, r0, r3
 800bfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfec:	b10b      	cbz	r3, 800bff2 <__sflush_r+0x46>
 800bfee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bff0:	1ac0      	subs	r0, r0, r3
 800bff2:	2300      	movs	r3, #0
 800bff4:	4602      	mov	r2, r0
 800bff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff8:	4628      	mov	r0, r5
 800bffa:	6a21      	ldr	r1, [r4, #32]
 800bffc:	47b0      	blx	r6
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	d106      	bne.n	800c012 <__sflush_r+0x66>
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	291d      	cmp	r1, #29
 800c008:	d82c      	bhi.n	800c064 <__sflush_r+0xb8>
 800c00a:	4a2a      	ldr	r2, [pc, #168]	; (800c0b4 <__sflush_r+0x108>)
 800c00c:	40ca      	lsrs	r2, r1
 800c00e:	07d6      	lsls	r6, r2, #31
 800c010:	d528      	bpl.n	800c064 <__sflush_r+0xb8>
 800c012:	2200      	movs	r2, #0
 800c014:	6062      	str	r2, [r4, #4]
 800c016:	6922      	ldr	r2, [r4, #16]
 800c018:	04d9      	lsls	r1, r3, #19
 800c01a:	6022      	str	r2, [r4, #0]
 800c01c:	d504      	bpl.n	800c028 <__sflush_r+0x7c>
 800c01e:	1c42      	adds	r2, r0, #1
 800c020:	d101      	bne.n	800c026 <__sflush_r+0x7a>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b903      	cbnz	r3, 800c028 <__sflush_r+0x7c>
 800c026:	6560      	str	r0, [r4, #84]	; 0x54
 800c028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02a:	602f      	str	r7, [r5, #0]
 800c02c:	2900      	cmp	r1, #0
 800c02e:	d0ca      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c034:	4299      	cmp	r1, r3
 800c036:	d002      	beq.n	800c03e <__sflush_r+0x92>
 800c038:	4628      	mov	r0, r5
 800c03a:	f7fd f8f3 	bl	8009224 <_free_r>
 800c03e:	2000      	movs	r0, #0
 800c040:	6360      	str	r0, [r4, #52]	; 0x34
 800c042:	e7c1      	b.n	800bfc8 <__sflush_r+0x1c>
 800c044:	6a21      	ldr	r1, [r4, #32]
 800c046:	2301      	movs	r3, #1
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	1c41      	adds	r1, r0, #1
 800c04e:	d1c7      	bne.n	800bfe0 <__sflush_r+0x34>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0c4      	beq.n	800bfe0 <__sflush_r+0x34>
 800c056:	2b1d      	cmp	r3, #29
 800c058:	d001      	beq.n	800c05e <__sflush_r+0xb2>
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	d101      	bne.n	800c062 <__sflush_r+0xb6>
 800c05e:	602f      	str	r7, [r5, #0]
 800c060:	e7b1      	b.n	800bfc6 <__sflush_r+0x1a>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	e7ad      	b.n	800bfc8 <__sflush_r+0x1c>
 800c06c:	690f      	ldr	r7, [r1, #16]
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d0a9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c072:	0793      	lsls	r3, r2, #30
 800c074:	bf18      	it	ne
 800c076:	2300      	movne	r3, #0
 800c078:	680e      	ldr	r6, [r1, #0]
 800c07a:	bf08      	it	eq
 800c07c:	694b      	ldreq	r3, [r1, #20]
 800c07e:	eba6 0807 	sub.w	r8, r6, r7
 800c082:	600f      	str	r7, [r1, #0]
 800c084:	608b      	str	r3, [r1, #8]
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	dd9c      	ble.n	800bfc6 <__sflush_r+0x1a>
 800c08c:	4643      	mov	r3, r8
 800c08e:	463a      	mov	r2, r7
 800c090:	4628      	mov	r0, r5
 800c092:	6a21      	ldr	r1, [r4, #32]
 800c094:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c096:	47b0      	blx	r6
 800c098:	2800      	cmp	r0, #0
 800c09a:	dc06      	bgt.n	800c0aa <__sflush_r+0xfe>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a6:	81a3      	strh	r3, [r4, #12]
 800c0a8:	e78e      	b.n	800bfc8 <__sflush_r+0x1c>
 800c0aa:	4407      	add	r7, r0
 800c0ac:	eba8 0800 	sub.w	r8, r8, r0
 800c0b0:	e7e9      	b.n	800c086 <__sflush_r+0xda>
 800c0b2:	bf00      	nop
 800c0b4:	20400001 	.word	0x20400001

0800c0b8 <_fflush_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	690b      	ldr	r3, [r1, #16]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b913      	cbnz	r3, 800c0c8 <_fflush_r+0x10>
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	b118      	cbz	r0, 800c0d2 <_fflush_r+0x1a>
 800c0ca:	6983      	ldr	r3, [r0, #24]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <_fflush_r+0x1a>
 800c0ce:	f000 f887 	bl	800c1e0 <__sinit>
 800c0d2:	4b14      	ldr	r3, [pc, #80]	; (800c124 <_fflush_r+0x6c>)
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	d11b      	bne.n	800c110 <_fflush_r+0x58>
 800c0d8:	686c      	ldr	r4, [r5, #4]
 800c0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0ef      	beq.n	800c0c2 <_fflush_r+0xa>
 800c0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0e4:	07d0      	lsls	r0, r2, #31
 800c0e6:	d404      	bmi.n	800c0f2 <_fflush_r+0x3a>
 800c0e8:	0599      	lsls	r1, r3, #22
 800c0ea:	d402      	bmi.n	800c0f2 <_fflush_r+0x3a>
 800c0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ee:	f000 fc80 	bl	800c9f2 <__retarget_lock_acquire_recursive>
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	f7ff ff59 	bl	800bfac <__sflush_r>
 800c0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	07da      	lsls	r2, r3, #31
 800c100:	d4e0      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	059b      	lsls	r3, r3, #22
 800c106:	d4dd      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c10a:	f000 fc73 	bl	800c9f4 <__retarget_lock_release_recursive>
 800c10e:	e7d9      	b.n	800c0c4 <_fflush_r+0xc>
 800c110:	4b05      	ldr	r3, [pc, #20]	; (800c128 <_fflush_r+0x70>)
 800c112:	429c      	cmp	r4, r3
 800c114:	d101      	bne.n	800c11a <_fflush_r+0x62>
 800c116:	68ac      	ldr	r4, [r5, #8]
 800c118:	e7df      	b.n	800c0da <_fflush_r+0x22>
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <_fflush_r+0x74>)
 800c11c:	429c      	cmp	r4, r3
 800c11e:	bf08      	it	eq
 800c120:	68ec      	ldreq	r4, [r5, #12]
 800c122:	e7da      	b.n	800c0da <_fflush_r+0x22>
 800c124:	08010fc8 	.word	0x08010fc8
 800c128:	08010fe8 	.word	0x08010fe8
 800c12c:	08010fa8 	.word	0x08010fa8

0800c130 <std>:
 800c130:	2300      	movs	r3, #0
 800c132:	b510      	push	{r4, lr}
 800c134:	4604      	mov	r4, r0
 800c136:	e9c0 3300 	strd	r3, r3, [r0]
 800c13a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13e:	6083      	str	r3, [r0, #8]
 800c140:	8181      	strh	r1, [r0, #12]
 800c142:	6643      	str	r3, [r0, #100]	; 0x64
 800c144:	81c2      	strh	r2, [r0, #14]
 800c146:	6183      	str	r3, [r0, #24]
 800c148:	4619      	mov	r1, r3
 800c14a:	2208      	movs	r2, #8
 800c14c:	305c      	adds	r0, #92	; 0x5c
 800c14e:	f7fd f861 	bl	8009214 <memset>
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x38>)
 800c154:	6224      	str	r4, [r4, #32]
 800c156:	6263      	str	r3, [r4, #36]	; 0x24
 800c158:	4b04      	ldr	r3, [pc, #16]	; (800c16c <std+0x3c>)
 800c15a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <std+0x40>)
 800c15e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c160:	4b04      	ldr	r3, [pc, #16]	; (800c174 <std+0x44>)
 800c162:	6323      	str	r3, [r4, #48]	; 0x30
 800c164:	bd10      	pop	{r4, pc}
 800c166:	bf00      	nop
 800c168:	0800d871 	.word	0x0800d871
 800c16c:	0800d893 	.word	0x0800d893
 800c170:	0800d8cb 	.word	0x0800d8cb
 800c174:	0800d8ef 	.word	0x0800d8ef

0800c178 <_cleanup_r>:
 800c178:	4901      	ldr	r1, [pc, #4]	; (800c180 <_cleanup_r+0x8>)
 800c17a:	f000 b8af 	b.w	800c2dc <_fwalk_reent>
 800c17e:	bf00      	nop
 800c180:	0800c0b9 	.word	0x0800c0b9

0800c184 <__sfmoreglue>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	2568      	movs	r5, #104	; 0x68
 800c188:	1e4a      	subs	r2, r1, #1
 800c18a:	4355      	muls	r5, r2
 800c18c:	460e      	mov	r6, r1
 800c18e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c192:	f7fd f893 	bl	80092bc <_malloc_r>
 800c196:	4604      	mov	r4, r0
 800c198:	b140      	cbz	r0, 800c1ac <__sfmoreglue+0x28>
 800c19a:	2100      	movs	r1, #0
 800c19c:	e9c0 1600 	strd	r1, r6, [r0]
 800c1a0:	300c      	adds	r0, #12
 800c1a2:	60a0      	str	r0, [r4, #8]
 800c1a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1a8:	f7fd f834 	bl	8009214 <memset>
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}

0800c1b0 <__sfp_lock_acquire>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	; (800c1b8 <__sfp_lock_acquire+0x8>)
 800c1b2:	f000 bc1e 	b.w	800c9f2 <__retarget_lock_acquire_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	2000111c 	.word	0x2000111c

0800c1bc <__sfp_lock_release>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__sfp_lock_release+0x8>)
 800c1be:	f000 bc19 	b.w	800c9f4 <__retarget_lock_release_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	2000111c 	.word	0x2000111c

0800c1c8 <__sinit_lock_acquire>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__sinit_lock_acquire+0x8>)
 800c1ca:	f000 bc12 	b.w	800c9f2 <__retarget_lock_acquire_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20001117 	.word	0x20001117

0800c1d4 <__sinit_lock_release>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__sinit_lock_release+0x8>)
 800c1d6:	f000 bc0d 	b.w	800c9f4 <__retarget_lock_release_recursive>
 800c1da:	bf00      	nop
 800c1dc:	20001117 	.word	0x20001117

0800c1e0 <__sinit>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	f7ff fff0 	bl	800c1c8 <__sinit_lock_acquire>
 800c1e8:	69a3      	ldr	r3, [r4, #24]
 800c1ea:	b11b      	cbz	r3, 800c1f4 <__sinit+0x14>
 800c1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f0:	f7ff bff0 	b.w	800c1d4 <__sinit_lock_release>
 800c1f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c1fa:	4b13      	ldr	r3, [pc, #76]	; (800c248 <__sinit+0x68>)
 800c1fc:	4a13      	ldr	r2, [pc, #76]	; (800c24c <__sinit+0x6c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	62a2      	str	r2, [r4, #40]	; 0x28
 800c202:	42a3      	cmp	r3, r4
 800c204:	bf08      	it	eq
 800c206:	2301      	moveq	r3, #1
 800c208:	4620      	mov	r0, r4
 800c20a:	bf08      	it	eq
 800c20c:	61a3      	streq	r3, [r4, #24]
 800c20e:	f000 f81f 	bl	800c250 <__sfp>
 800c212:	6060      	str	r0, [r4, #4]
 800c214:	4620      	mov	r0, r4
 800c216:	f000 f81b 	bl	800c250 <__sfp>
 800c21a:	60a0      	str	r0, [r4, #8]
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 f817 	bl	800c250 <__sfp>
 800c222:	2200      	movs	r2, #0
 800c224:	2104      	movs	r1, #4
 800c226:	60e0      	str	r0, [r4, #12]
 800c228:	6860      	ldr	r0, [r4, #4]
 800c22a:	f7ff ff81 	bl	800c130 <std>
 800c22e:	2201      	movs	r2, #1
 800c230:	2109      	movs	r1, #9
 800c232:	68a0      	ldr	r0, [r4, #8]
 800c234:	f7ff ff7c 	bl	800c130 <std>
 800c238:	2202      	movs	r2, #2
 800c23a:	2112      	movs	r1, #18
 800c23c:	68e0      	ldr	r0, [r4, #12]
 800c23e:	f7ff ff77 	bl	800c130 <std>
 800c242:	2301      	movs	r3, #1
 800c244:	61a3      	str	r3, [r4, #24]
 800c246:	e7d1      	b.n	800c1ec <__sinit+0xc>
 800c248:	08010d70 	.word	0x08010d70
 800c24c:	0800c179 	.word	0x0800c179

0800c250 <__sfp>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	4607      	mov	r7, r0
 800c254:	f7ff ffac 	bl	800c1b0 <__sfp_lock_acquire>
 800c258:	4b1e      	ldr	r3, [pc, #120]	; (800c2d4 <__sfp+0x84>)
 800c25a:	681e      	ldr	r6, [r3, #0]
 800c25c:	69b3      	ldr	r3, [r6, #24]
 800c25e:	b913      	cbnz	r3, 800c266 <__sfp+0x16>
 800c260:	4630      	mov	r0, r6
 800c262:	f7ff ffbd 	bl	800c1e0 <__sinit>
 800c266:	3648      	adds	r6, #72	; 0x48
 800c268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	d503      	bpl.n	800c278 <__sfp+0x28>
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	b30b      	cbz	r3, 800c2b8 <__sfp+0x68>
 800c274:	6836      	ldr	r6, [r6, #0]
 800c276:	e7f7      	b.n	800c268 <__sfp+0x18>
 800c278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c27c:	b9d5      	cbnz	r5, 800c2b4 <__sfp+0x64>
 800c27e:	4b16      	ldr	r3, [pc, #88]	; (800c2d8 <__sfp+0x88>)
 800c280:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c284:	60e3      	str	r3, [r4, #12]
 800c286:	6665      	str	r5, [r4, #100]	; 0x64
 800c288:	f000 fbb2 	bl	800c9f0 <__retarget_lock_init_recursive>
 800c28c:	f7ff ff96 	bl	800c1bc <__sfp_lock_release>
 800c290:	2208      	movs	r2, #8
 800c292:	4629      	mov	r1, r5
 800c294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c29c:	6025      	str	r5, [r4, #0]
 800c29e:	61a5      	str	r5, [r4, #24]
 800c2a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2a4:	f7fc ffb6 	bl	8009214 <memset>
 800c2a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b4:	3468      	adds	r4, #104	; 0x68
 800c2b6:	e7d9      	b.n	800c26c <__sfp+0x1c>
 800c2b8:	2104      	movs	r1, #4
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff ff62 	bl	800c184 <__sfmoreglue>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	6030      	str	r0, [r6, #0]
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1d5      	bne.n	800c274 <__sfp+0x24>
 800c2c8:	f7ff ff78 	bl	800c1bc <__sfp_lock_release>
 800c2cc:	230c      	movs	r3, #12
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	e7ee      	b.n	800c2b0 <__sfp+0x60>
 800c2d2:	bf00      	nop
 800c2d4:	08010d70 	.word	0x08010d70
 800c2d8:	ffff0001 	.word	0xffff0001

0800c2dc <_fwalk_reent>:
 800c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	4606      	mov	r6, r0
 800c2e2:	4688      	mov	r8, r1
 800c2e4:	2700      	movs	r7, #0
 800c2e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ee:	f1b9 0901 	subs.w	r9, r9, #1
 800c2f2:	d505      	bpl.n	800c300 <_fwalk_reent+0x24>
 800c2f4:	6824      	ldr	r4, [r4, #0]
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	d1f7      	bne.n	800c2ea <_fwalk_reent+0xe>
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c300:	89ab      	ldrh	r3, [r5, #12]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d907      	bls.n	800c316 <_fwalk_reent+0x3a>
 800c306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c30a:	3301      	adds	r3, #1
 800c30c:	d003      	beq.n	800c316 <_fwalk_reent+0x3a>
 800c30e:	4629      	mov	r1, r5
 800c310:	4630      	mov	r0, r6
 800c312:	47c0      	blx	r8
 800c314:	4307      	orrs	r7, r0
 800c316:	3568      	adds	r5, #104	; 0x68
 800c318:	e7e9      	b.n	800c2ee <_fwalk_reent+0x12>

0800c31a <rshift>:
 800c31a:	6903      	ldr	r3, [r0, #16]
 800c31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c320:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c324:	f100 0414 	add.w	r4, r0, #20
 800c328:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c32c:	dd46      	ble.n	800c3bc <rshift+0xa2>
 800c32e:	f011 011f 	ands.w	r1, r1, #31
 800c332:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c336:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c33a:	d10c      	bne.n	800c356 <rshift+0x3c>
 800c33c:	4629      	mov	r1, r5
 800c33e:	f100 0710 	add.w	r7, r0, #16
 800c342:	42b1      	cmp	r1, r6
 800c344:	d335      	bcc.n	800c3b2 <rshift+0x98>
 800c346:	1a9b      	subs	r3, r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	1eea      	subs	r2, r5, #3
 800c34c:	4296      	cmp	r6, r2
 800c34e:	bf38      	it	cc
 800c350:	2300      	movcc	r3, #0
 800c352:	4423      	add	r3, r4
 800c354:	e015      	b.n	800c382 <rshift+0x68>
 800c356:	46a1      	mov	r9, r4
 800c358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c35c:	f1c1 0820 	rsb	r8, r1, #32
 800c360:	40cf      	lsrs	r7, r1
 800c362:	f105 0e04 	add.w	lr, r5, #4
 800c366:	4576      	cmp	r6, lr
 800c368:	46f4      	mov	ip, lr
 800c36a:	d816      	bhi.n	800c39a <rshift+0x80>
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	009a      	lsls	r2, r3, #2
 800c370:	3a04      	subs	r2, #4
 800c372:	3501      	adds	r5, #1
 800c374:	42ae      	cmp	r6, r5
 800c376:	bf38      	it	cc
 800c378:	2200      	movcc	r2, #0
 800c37a:	18a3      	adds	r3, r4, r2
 800c37c:	50a7      	str	r7, [r4, r2]
 800c37e:	b107      	cbz	r7, 800c382 <rshift+0x68>
 800c380:	3304      	adds	r3, #4
 800c382:	42a3      	cmp	r3, r4
 800c384:	eba3 0204 	sub.w	r2, r3, r4
 800c388:	bf08      	it	eq
 800c38a:	2300      	moveq	r3, #0
 800c38c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c390:	6102      	str	r2, [r0, #16]
 800c392:	bf08      	it	eq
 800c394:	6143      	streq	r3, [r0, #20]
 800c396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39a:	f8dc c000 	ldr.w	ip, [ip]
 800c39e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c3a2:	ea4c 0707 	orr.w	r7, ip, r7
 800c3a6:	f849 7b04 	str.w	r7, [r9], #4
 800c3aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ae:	40cf      	lsrs	r7, r1
 800c3b0:	e7d9      	b.n	800c366 <rshift+0x4c>
 800c3b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c3b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3ba:	e7c2      	b.n	800c342 <rshift+0x28>
 800c3bc:	4623      	mov	r3, r4
 800c3be:	e7e0      	b.n	800c382 <rshift+0x68>

0800c3c0 <__hexdig_fun>:
 800c3c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3c4:	2b09      	cmp	r3, #9
 800c3c6:	d802      	bhi.n	800c3ce <__hexdig_fun+0xe>
 800c3c8:	3820      	subs	r0, #32
 800c3ca:	b2c0      	uxtb	r0, r0
 800c3cc:	4770      	bx	lr
 800c3ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d801      	bhi.n	800c3da <__hexdig_fun+0x1a>
 800c3d6:	3847      	subs	r0, #71	; 0x47
 800c3d8:	e7f7      	b.n	800c3ca <__hexdig_fun+0xa>
 800c3da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	d801      	bhi.n	800c3e6 <__hexdig_fun+0x26>
 800c3e2:	3827      	subs	r0, #39	; 0x27
 800c3e4:	e7f1      	b.n	800c3ca <__hexdig_fun+0xa>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	4770      	bx	lr
	...

0800c3ec <__gethex>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	b08b      	sub	sp, #44	; 0x2c
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	4bb9      	ldr	r3, [pc, #740]	; (800c6dc <__gethex+0x2f0>)
 800c3f6:	9002      	str	r0, [sp, #8]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	468b      	mov	fp, r1
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	4690      	mov	r8, r2
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	f7f3 fea5 	bl	8000150 <strlen>
 800c406:	4682      	mov	sl, r0
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	f8db 2000 	ldr.w	r2, [fp]
 800c40e:	4403      	add	r3, r0
 800c410:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c414:	9307      	str	r3, [sp, #28]
 800c416:	1c93      	adds	r3, r2, #2
 800c418:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c41c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c420:	32fe      	adds	r2, #254	; 0xfe
 800c422:	18d1      	adds	r1, r2, r3
 800c424:	461f      	mov	r7, r3
 800c426:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c42a:	9101      	str	r1, [sp, #4]
 800c42c:	2830      	cmp	r0, #48	; 0x30
 800c42e:	d0f8      	beq.n	800c422 <__gethex+0x36>
 800c430:	f7ff ffc6 	bl	800c3c0 <__hexdig_fun>
 800c434:	4604      	mov	r4, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d13a      	bne.n	800c4b0 <__gethex+0xc4>
 800c43a:	4652      	mov	r2, sl
 800c43c:	4638      	mov	r0, r7
 800c43e:	9903      	ldr	r1, [sp, #12]
 800c440:	f001 fa59 	bl	800d8f6 <strncmp>
 800c444:	4605      	mov	r5, r0
 800c446:	2800      	cmp	r0, #0
 800c448:	d166      	bne.n	800c518 <__gethex+0x12c>
 800c44a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c44e:	eb07 060a 	add.w	r6, r7, sl
 800c452:	f7ff ffb5 	bl	800c3c0 <__hexdig_fun>
 800c456:	2800      	cmp	r0, #0
 800c458:	d060      	beq.n	800c51c <__gethex+0x130>
 800c45a:	4633      	mov	r3, r6
 800c45c:	7818      	ldrb	r0, [r3, #0]
 800c45e:	461f      	mov	r7, r3
 800c460:	2830      	cmp	r0, #48	; 0x30
 800c462:	f103 0301 	add.w	r3, r3, #1
 800c466:	d0f9      	beq.n	800c45c <__gethex+0x70>
 800c468:	f7ff ffaa 	bl	800c3c0 <__hexdig_fun>
 800c46c:	2301      	movs	r3, #1
 800c46e:	fab0 f480 	clz	r4, r0
 800c472:	4635      	mov	r5, r6
 800c474:	0964      	lsrs	r4, r4, #5
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	463a      	mov	r2, r7
 800c47a:	4616      	mov	r6, r2
 800c47c:	7830      	ldrb	r0, [r6, #0]
 800c47e:	3201      	adds	r2, #1
 800c480:	f7ff ff9e 	bl	800c3c0 <__hexdig_fun>
 800c484:	2800      	cmp	r0, #0
 800c486:	d1f8      	bne.n	800c47a <__gethex+0x8e>
 800c488:	4652      	mov	r2, sl
 800c48a:	4630      	mov	r0, r6
 800c48c:	9903      	ldr	r1, [sp, #12]
 800c48e:	f001 fa32 	bl	800d8f6 <strncmp>
 800c492:	b980      	cbnz	r0, 800c4b6 <__gethex+0xca>
 800c494:	b94d      	cbnz	r5, 800c4aa <__gethex+0xbe>
 800c496:	eb06 050a 	add.w	r5, r6, sl
 800c49a:	462a      	mov	r2, r5
 800c49c:	4616      	mov	r6, r2
 800c49e:	7830      	ldrb	r0, [r6, #0]
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	f7ff ff8d 	bl	800c3c0 <__hexdig_fun>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d1f8      	bne.n	800c49c <__gethex+0xb0>
 800c4aa:	1bad      	subs	r5, r5, r6
 800c4ac:	00ad      	lsls	r5, r5, #2
 800c4ae:	e004      	b.n	800c4ba <__gethex+0xce>
 800c4b0:	2400      	movs	r4, #0
 800c4b2:	4625      	mov	r5, r4
 800c4b4:	e7e0      	b.n	800c478 <__gethex+0x8c>
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	d1f7      	bne.n	800c4aa <__gethex+0xbe>
 800c4ba:	7833      	ldrb	r3, [r6, #0]
 800c4bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4c0:	2b50      	cmp	r3, #80	; 0x50
 800c4c2:	d139      	bne.n	800c538 <__gethex+0x14c>
 800c4c4:	7873      	ldrb	r3, [r6, #1]
 800c4c6:	2b2b      	cmp	r3, #43	; 0x2b
 800c4c8:	d02a      	beq.n	800c520 <__gethex+0x134>
 800c4ca:	2b2d      	cmp	r3, #45	; 0x2d
 800c4cc:	d02c      	beq.n	800c528 <__gethex+0x13c>
 800c4ce:	f04f 0900 	mov.w	r9, #0
 800c4d2:	1c71      	adds	r1, r6, #1
 800c4d4:	7808      	ldrb	r0, [r1, #0]
 800c4d6:	f7ff ff73 	bl	800c3c0 <__hexdig_fun>
 800c4da:	1e43      	subs	r3, r0, #1
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b18      	cmp	r3, #24
 800c4e0:	d82a      	bhi.n	800c538 <__gethex+0x14c>
 800c4e2:	f1a0 0210 	sub.w	r2, r0, #16
 800c4e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4ea:	f7ff ff69 	bl	800c3c0 <__hexdig_fun>
 800c4ee:	1e43      	subs	r3, r0, #1
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b18      	cmp	r3, #24
 800c4f4:	d91b      	bls.n	800c52e <__gethex+0x142>
 800c4f6:	f1b9 0f00 	cmp.w	r9, #0
 800c4fa:	d000      	beq.n	800c4fe <__gethex+0x112>
 800c4fc:	4252      	negs	r2, r2
 800c4fe:	4415      	add	r5, r2
 800c500:	f8cb 1000 	str.w	r1, [fp]
 800c504:	b1d4      	cbz	r4, 800c53c <__gethex+0x150>
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bf14      	ite	ne
 800c50c:	2700      	movne	r7, #0
 800c50e:	2706      	moveq	r7, #6
 800c510:	4638      	mov	r0, r7
 800c512:	b00b      	add	sp, #44	; 0x2c
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c518:	463e      	mov	r6, r7
 800c51a:	4625      	mov	r5, r4
 800c51c:	2401      	movs	r4, #1
 800c51e:	e7cc      	b.n	800c4ba <__gethex+0xce>
 800c520:	f04f 0900 	mov.w	r9, #0
 800c524:	1cb1      	adds	r1, r6, #2
 800c526:	e7d5      	b.n	800c4d4 <__gethex+0xe8>
 800c528:	f04f 0901 	mov.w	r9, #1
 800c52c:	e7fa      	b.n	800c524 <__gethex+0x138>
 800c52e:	230a      	movs	r3, #10
 800c530:	fb03 0202 	mla	r2, r3, r2, r0
 800c534:	3a10      	subs	r2, #16
 800c536:	e7d6      	b.n	800c4e6 <__gethex+0xfa>
 800c538:	4631      	mov	r1, r6
 800c53a:	e7e1      	b.n	800c500 <__gethex+0x114>
 800c53c:	4621      	mov	r1, r4
 800c53e:	1bf3      	subs	r3, r6, r7
 800c540:	3b01      	subs	r3, #1
 800c542:	2b07      	cmp	r3, #7
 800c544:	dc0a      	bgt.n	800c55c <__gethex+0x170>
 800c546:	9802      	ldr	r0, [sp, #8]
 800c548:	f000 fb00 	bl	800cb4c <_Balloc>
 800c54c:	4604      	mov	r4, r0
 800c54e:	b940      	cbnz	r0, 800c562 <__gethex+0x176>
 800c550:	4602      	mov	r2, r0
 800c552:	21de      	movs	r1, #222	; 0xde
 800c554:	4b62      	ldr	r3, [pc, #392]	; (800c6e0 <__gethex+0x2f4>)
 800c556:	4863      	ldr	r0, [pc, #396]	; (800c6e4 <__gethex+0x2f8>)
 800c558:	f7fc fdec 	bl	8009134 <__assert_func>
 800c55c:	3101      	adds	r1, #1
 800c55e:	105b      	asrs	r3, r3, #1
 800c560:	e7ef      	b.n	800c542 <__gethex+0x156>
 800c562:	f04f 0b00 	mov.w	fp, #0
 800c566:	f100 0914 	add.w	r9, r0, #20
 800c56a:	f1ca 0301 	rsb	r3, sl, #1
 800c56e:	f8cd 9010 	str.w	r9, [sp, #16]
 800c572:	f8cd b004 	str.w	fp, [sp, #4]
 800c576:	9308      	str	r3, [sp, #32]
 800c578:	42b7      	cmp	r7, r6
 800c57a:	d33f      	bcc.n	800c5fc <__gethex+0x210>
 800c57c:	9f04      	ldr	r7, [sp, #16]
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	f847 3b04 	str.w	r3, [r7], #4
 800c584:	eba7 0709 	sub.w	r7, r7, r9
 800c588:	10bf      	asrs	r7, r7, #2
 800c58a:	6127      	str	r7, [r4, #16]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fbd3 	bl	800cd38 <__hi0bits>
 800c592:	017f      	lsls	r7, r7, #5
 800c594:	f8d8 6000 	ldr.w	r6, [r8]
 800c598:	1a3f      	subs	r7, r7, r0
 800c59a:	42b7      	cmp	r7, r6
 800c59c:	dd62      	ble.n	800c664 <__gethex+0x278>
 800c59e:	1bbf      	subs	r7, r7, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 ff69 	bl	800d47a <__any_on>
 800c5a8:	4682      	mov	sl, r0
 800c5aa:	b1a8      	cbz	r0, 800c5d8 <__gethex+0x1ec>
 800c5ac:	f04f 0a01 	mov.w	sl, #1
 800c5b0:	1e7b      	subs	r3, r7, #1
 800c5b2:	1159      	asrs	r1, r3, #5
 800c5b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5b8:	f003 021f 	and.w	r2, r3, #31
 800c5bc:	fa0a f202 	lsl.w	r2, sl, r2
 800c5c0:	420a      	tst	r2, r1
 800c5c2:	d009      	beq.n	800c5d8 <__gethex+0x1ec>
 800c5c4:	4553      	cmp	r3, sl
 800c5c6:	dd05      	ble.n	800c5d4 <__gethex+0x1e8>
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	1eb9      	subs	r1, r7, #2
 800c5cc:	f000 ff55 	bl	800d47a <__any_on>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d144      	bne.n	800c65e <__gethex+0x272>
 800c5d4:	f04f 0a02 	mov.w	sl, #2
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7ff fe9d 	bl	800c31a <rshift>
 800c5e0:	443d      	add	r5, r7
 800c5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5e6:	42ab      	cmp	r3, r5
 800c5e8:	da4a      	bge.n	800c680 <__gethex+0x294>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	9802      	ldr	r0, [sp, #8]
 800c5ee:	f000 faed 	bl	800cbcc <_Bfree>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5f6:	27a3      	movs	r7, #163	; 0xa3
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	e789      	b.n	800c510 <__gethex+0x124>
 800c5fc:	1e73      	subs	r3, r6, #1
 800c5fe:	9a07      	ldr	r2, [sp, #28]
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c606:	4293      	cmp	r3, r2
 800c608:	d019      	beq.n	800c63e <__gethex+0x252>
 800c60a:	f1bb 0f20 	cmp.w	fp, #32
 800c60e:	d107      	bne.n	800c620 <__gethex+0x234>
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	9a01      	ldr	r2, [sp, #4]
 800c614:	f843 2b04 	str.w	r2, [r3], #4
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	2300      	movs	r3, #0
 800c61c:	469b      	mov	fp, r3
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c624:	f7ff fecc 	bl	800c3c0 <__hexdig_fun>
 800c628:	9b01      	ldr	r3, [sp, #4]
 800c62a:	f000 000f 	and.w	r0, r0, #15
 800c62e:	fa00 f00b 	lsl.w	r0, r0, fp
 800c632:	4303      	orrs	r3, r0
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	f10b 0b04 	add.w	fp, fp, #4
 800c63a:	9b05      	ldr	r3, [sp, #20]
 800c63c:	e00d      	b.n	800c65a <__gethex+0x26e>
 800c63e:	9b05      	ldr	r3, [sp, #20]
 800c640:	9a08      	ldr	r2, [sp, #32]
 800c642:	4413      	add	r3, r2
 800c644:	42bb      	cmp	r3, r7
 800c646:	d3e0      	bcc.n	800c60a <__gethex+0x21e>
 800c648:	4618      	mov	r0, r3
 800c64a:	4652      	mov	r2, sl
 800c64c:	9903      	ldr	r1, [sp, #12]
 800c64e:	9309      	str	r3, [sp, #36]	; 0x24
 800c650:	f001 f951 	bl	800d8f6 <strncmp>
 800c654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c656:	2800      	cmp	r0, #0
 800c658:	d1d7      	bne.n	800c60a <__gethex+0x21e>
 800c65a:	461e      	mov	r6, r3
 800c65c:	e78c      	b.n	800c578 <__gethex+0x18c>
 800c65e:	f04f 0a03 	mov.w	sl, #3
 800c662:	e7b9      	b.n	800c5d8 <__gethex+0x1ec>
 800c664:	da09      	bge.n	800c67a <__gethex+0x28e>
 800c666:	1bf7      	subs	r7, r6, r7
 800c668:	4621      	mov	r1, r4
 800c66a:	463a      	mov	r2, r7
 800c66c:	9802      	ldr	r0, [sp, #8]
 800c66e:	f000 fcc5 	bl	800cffc <__lshift>
 800c672:	4604      	mov	r4, r0
 800c674:	1bed      	subs	r5, r5, r7
 800c676:	f100 0914 	add.w	r9, r0, #20
 800c67a:	f04f 0a00 	mov.w	sl, #0
 800c67e:	e7b0      	b.n	800c5e2 <__gethex+0x1f6>
 800c680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c684:	42a8      	cmp	r0, r5
 800c686:	dd71      	ble.n	800c76c <__gethex+0x380>
 800c688:	1b45      	subs	r5, r0, r5
 800c68a:	42ae      	cmp	r6, r5
 800c68c:	dc34      	bgt.n	800c6f8 <__gethex+0x30c>
 800c68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d028      	beq.n	800c6e8 <__gethex+0x2fc>
 800c696:	2b03      	cmp	r3, #3
 800c698:	d02a      	beq.n	800c6f0 <__gethex+0x304>
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d115      	bne.n	800c6ca <__gethex+0x2de>
 800c69e:	42ae      	cmp	r6, r5
 800c6a0:	d113      	bne.n	800c6ca <__gethex+0x2de>
 800c6a2:	2e01      	cmp	r6, #1
 800c6a4:	d10b      	bne.n	800c6be <__gethex+0x2d2>
 800c6a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6aa:	9a06      	ldr	r2, [sp, #24]
 800c6ac:	2762      	movs	r7, #98	; 0x62
 800c6ae:	6013      	str	r3, [r2, #0]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	f8c9 3000 	str.w	r3, [r9]
 800c6b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6ba:	601c      	str	r4, [r3, #0]
 800c6bc:	e728      	b.n	800c510 <__gethex+0x124>
 800c6be:	4620      	mov	r0, r4
 800c6c0:	1e71      	subs	r1, r6, #1
 800c6c2:	f000 feda 	bl	800d47a <__any_on>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1ed      	bne.n	800c6a6 <__gethex+0x2ba>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	9802      	ldr	r0, [sp, #8]
 800c6ce:	f000 fa7d 	bl	800cbcc <_Bfree>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6d6:	2750      	movs	r7, #80	; 0x50
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	e719      	b.n	800c510 <__gethex+0x124>
 800c6dc:	08011074 	.word	0x08011074
 800c6e0:	08010f94 	.word	0x08010f94
 800c6e4:	08011008 	.word	0x08011008
 800c6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1ed      	bne.n	800c6ca <__gethex+0x2de>
 800c6ee:	e7da      	b.n	800c6a6 <__gethex+0x2ba>
 800c6f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1d7      	bne.n	800c6a6 <__gethex+0x2ba>
 800c6f6:	e7e8      	b.n	800c6ca <__gethex+0x2de>
 800c6f8:	1e6f      	subs	r7, r5, #1
 800c6fa:	f1ba 0f00 	cmp.w	sl, #0
 800c6fe:	d132      	bne.n	800c766 <__gethex+0x37a>
 800c700:	b127      	cbz	r7, 800c70c <__gethex+0x320>
 800c702:	4639      	mov	r1, r7
 800c704:	4620      	mov	r0, r4
 800c706:	f000 feb8 	bl	800d47a <__any_on>
 800c70a:	4682      	mov	sl, r0
 800c70c:	2101      	movs	r1, #1
 800c70e:	117b      	asrs	r3, r7, #5
 800c710:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c714:	f007 071f 	and.w	r7, r7, #31
 800c718:	fa01 f707 	lsl.w	r7, r1, r7
 800c71c:	421f      	tst	r7, r3
 800c71e:	f04f 0702 	mov.w	r7, #2
 800c722:	4629      	mov	r1, r5
 800c724:	4620      	mov	r0, r4
 800c726:	bf18      	it	ne
 800c728:	f04a 0a02 	orrne.w	sl, sl, #2
 800c72c:	1b76      	subs	r6, r6, r5
 800c72e:	f7ff fdf4 	bl	800c31a <rshift>
 800c732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c736:	f1ba 0f00 	cmp.w	sl, #0
 800c73a:	d048      	beq.n	800c7ce <__gethex+0x3e2>
 800c73c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d015      	beq.n	800c770 <__gethex+0x384>
 800c744:	2b03      	cmp	r3, #3
 800c746:	d017      	beq.n	800c778 <__gethex+0x38c>
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d109      	bne.n	800c760 <__gethex+0x374>
 800c74c:	f01a 0f02 	tst.w	sl, #2
 800c750:	d006      	beq.n	800c760 <__gethex+0x374>
 800c752:	f8d9 0000 	ldr.w	r0, [r9]
 800c756:	ea4a 0a00 	orr.w	sl, sl, r0
 800c75a:	f01a 0f01 	tst.w	sl, #1
 800c75e:	d10e      	bne.n	800c77e <__gethex+0x392>
 800c760:	f047 0710 	orr.w	r7, r7, #16
 800c764:	e033      	b.n	800c7ce <__gethex+0x3e2>
 800c766:	f04f 0a01 	mov.w	sl, #1
 800c76a:	e7cf      	b.n	800c70c <__gethex+0x320>
 800c76c:	2701      	movs	r7, #1
 800c76e:	e7e2      	b.n	800c736 <__gethex+0x34a>
 800c770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c772:	f1c3 0301 	rsb	r3, r3, #1
 800c776:	9315      	str	r3, [sp, #84]	; 0x54
 800c778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0f0      	beq.n	800c760 <__gethex+0x374>
 800c77e:	f04f 0c00 	mov.w	ip, #0
 800c782:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c786:	f104 0314 	add.w	r3, r4, #20
 800c78a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c78e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c792:	4618      	mov	r0, r3
 800c794:	f853 2b04 	ldr.w	r2, [r3], #4
 800c798:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c79c:	d01c      	beq.n	800c7d8 <__gethex+0x3ec>
 800c79e:	3201      	adds	r2, #1
 800c7a0:	6002      	str	r2, [r0, #0]
 800c7a2:	2f02      	cmp	r7, #2
 800c7a4:	f104 0314 	add.w	r3, r4, #20
 800c7a8:	d13d      	bne.n	800c826 <__gethex+0x43a>
 800c7aa:	f8d8 2000 	ldr.w	r2, [r8]
 800c7ae:	3a01      	subs	r2, #1
 800c7b0:	42b2      	cmp	r2, r6
 800c7b2:	d10a      	bne.n	800c7ca <__gethex+0x3de>
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	1171      	asrs	r1, r6, #5
 800c7b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7bc:	f006 061f 	and.w	r6, r6, #31
 800c7c0:	fa02 f606 	lsl.w	r6, r2, r6
 800c7c4:	421e      	tst	r6, r3
 800c7c6:	bf18      	it	ne
 800c7c8:	4617      	movne	r7, r2
 800c7ca:	f047 0720 	orr.w	r7, r7, #32
 800c7ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d0:	601c      	str	r4, [r3, #0]
 800c7d2:	9b06      	ldr	r3, [sp, #24]
 800c7d4:	601d      	str	r5, [r3, #0]
 800c7d6:	e69b      	b.n	800c510 <__gethex+0x124>
 800c7d8:	4299      	cmp	r1, r3
 800c7da:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7de:	d8d8      	bhi.n	800c792 <__gethex+0x3a6>
 800c7e0:	68a3      	ldr	r3, [r4, #8]
 800c7e2:	459b      	cmp	fp, r3
 800c7e4:	db17      	blt.n	800c816 <__gethex+0x42a>
 800c7e6:	6861      	ldr	r1, [r4, #4]
 800c7e8:	9802      	ldr	r0, [sp, #8]
 800c7ea:	3101      	adds	r1, #1
 800c7ec:	f000 f9ae 	bl	800cb4c <_Balloc>
 800c7f0:	4681      	mov	r9, r0
 800c7f2:	b918      	cbnz	r0, 800c7fc <__gethex+0x410>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	2184      	movs	r1, #132	; 0x84
 800c7f8:	4b19      	ldr	r3, [pc, #100]	; (800c860 <__gethex+0x474>)
 800c7fa:	e6ac      	b.n	800c556 <__gethex+0x16a>
 800c7fc:	6922      	ldr	r2, [r4, #16]
 800c7fe:	f104 010c 	add.w	r1, r4, #12
 800c802:	3202      	adds	r2, #2
 800c804:	0092      	lsls	r2, r2, #2
 800c806:	300c      	adds	r0, #12
 800c808:	f7fc fcf6 	bl	80091f8 <memcpy>
 800c80c:	4621      	mov	r1, r4
 800c80e:	9802      	ldr	r0, [sp, #8]
 800c810:	f000 f9dc 	bl	800cbcc <_Bfree>
 800c814:	464c      	mov	r4, r9
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	6122      	str	r2, [r4, #16]
 800c81c:	2201      	movs	r2, #1
 800c81e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c822:	615a      	str	r2, [r3, #20]
 800c824:	e7bd      	b.n	800c7a2 <__gethex+0x3b6>
 800c826:	6922      	ldr	r2, [r4, #16]
 800c828:	455a      	cmp	r2, fp
 800c82a:	dd0b      	ble.n	800c844 <__gethex+0x458>
 800c82c:	2101      	movs	r1, #1
 800c82e:	4620      	mov	r0, r4
 800c830:	f7ff fd73 	bl	800c31a <rshift>
 800c834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c838:	3501      	adds	r5, #1
 800c83a:	42ab      	cmp	r3, r5
 800c83c:	f6ff aed5 	blt.w	800c5ea <__gethex+0x1fe>
 800c840:	2701      	movs	r7, #1
 800c842:	e7c2      	b.n	800c7ca <__gethex+0x3de>
 800c844:	f016 061f 	ands.w	r6, r6, #31
 800c848:	d0fa      	beq.n	800c840 <__gethex+0x454>
 800c84a:	449a      	add	sl, r3
 800c84c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c850:	f000 fa72 	bl	800cd38 <__hi0bits>
 800c854:	f1c6 0620 	rsb	r6, r6, #32
 800c858:	42b0      	cmp	r0, r6
 800c85a:	dbe7      	blt.n	800c82c <__gethex+0x440>
 800c85c:	e7f0      	b.n	800c840 <__gethex+0x454>
 800c85e:	bf00      	nop
 800c860:	08010f94 	.word	0x08010f94

0800c864 <L_shift>:
 800c864:	f1c2 0208 	rsb	r2, r2, #8
 800c868:	0092      	lsls	r2, r2, #2
 800c86a:	b570      	push	{r4, r5, r6, lr}
 800c86c:	f1c2 0620 	rsb	r6, r2, #32
 800c870:	6843      	ldr	r3, [r0, #4]
 800c872:	6804      	ldr	r4, [r0, #0]
 800c874:	fa03 f506 	lsl.w	r5, r3, r6
 800c878:	432c      	orrs	r4, r5
 800c87a:	40d3      	lsrs	r3, r2
 800c87c:	6004      	str	r4, [r0, #0]
 800c87e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c882:	4288      	cmp	r0, r1
 800c884:	d3f4      	bcc.n	800c870 <L_shift+0xc>
 800c886:	bd70      	pop	{r4, r5, r6, pc}

0800c888 <__match>:
 800c888:	b530      	push	{r4, r5, lr}
 800c88a:	6803      	ldr	r3, [r0, #0]
 800c88c:	3301      	adds	r3, #1
 800c88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c892:	b914      	cbnz	r4, 800c89a <__match+0x12>
 800c894:	6003      	str	r3, [r0, #0]
 800c896:	2001      	movs	r0, #1
 800c898:	bd30      	pop	{r4, r5, pc}
 800c89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c89e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8a2:	2d19      	cmp	r5, #25
 800c8a4:	bf98      	it	ls
 800c8a6:	3220      	addls	r2, #32
 800c8a8:	42a2      	cmp	r2, r4
 800c8aa:	d0f0      	beq.n	800c88e <__match+0x6>
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	e7f3      	b.n	800c898 <__match+0x10>

0800c8b0 <__hexnan>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	2500      	movs	r5, #0
 800c8b6:	680b      	ldr	r3, [r1, #0]
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	115e      	asrs	r6, r3, #5
 800c8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8c0:	f013 031f 	ands.w	r3, r3, #31
 800c8c4:	bf18      	it	ne
 800c8c6:	3604      	addne	r6, #4
 800c8c8:	1f37      	subs	r7, r6, #4
 800c8ca:	4690      	mov	r8, r2
 800c8cc:	46b9      	mov	r9, r7
 800c8ce:	463c      	mov	r4, r7
 800c8d0:	46ab      	mov	fp, r5
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	6801      	ldr	r1, [r0, #0]
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8dc:	9502      	str	r5, [sp, #8]
 800c8de:	784a      	ldrb	r2, [r1, #1]
 800c8e0:	1c4b      	adds	r3, r1, #1
 800c8e2:	9303      	str	r3, [sp, #12]
 800c8e4:	b342      	cbz	r2, 800c938 <__hexnan+0x88>
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	9105      	str	r1, [sp, #20]
 800c8ea:	9204      	str	r2, [sp, #16]
 800c8ec:	f7ff fd68 	bl	800c3c0 <__hexdig_fun>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d14f      	bne.n	800c994 <__hexnan+0xe4>
 800c8f4:	9a04      	ldr	r2, [sp, #16]
 800c8f6:	9905      	ldr	r1, [sp, #20]
 800c8f8:	2a20      	cmp	r2, #32
 800c8fa:	d818      	bhi.n	800c92e <__hexnan+0x7e>
 800c8fc:	9b02      	ldr	r3, [sp, #8]
 800c8fe:	459b      	cmp	fp, r3
 800c900:	dd13      	ble.n	800c92a <__hexnan+0x7a>
 800c902:	454c      	cmp	r4, r9
 800c904:	d206      	bcs.n	800c914 <__hexnan+0x64>
 800c906:	2d07      	cmp	r5, #7
 800c908:	dc04      	bgt.n	800c914 <__hexnan+0x64>
 800c90a:	462a      	mov	r2, r5
 800c90c:	4649      	mov	r1, r9
 800c90e:	4620      	mov	r0, r4
 800c910:	f7ff ffa8 	bl	800c864 <L_shift>
 800c914:	4544      	cmp	r4, r8
 800c916:	d950      	bls.n	800c9ba <__hexnan+0x10a>
 800c918:	2300      	movs	r3, #0
 800c91a:	f1a4 0904 	sub.w	r9, r4, #4
 800c91e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c922:	461d      	mov	r5, r3
 800c924:	464c      	mov	r4, r9
 800c926:	f8cd b008 	str.w	fp, [sp, #8]
 800c92a:	9903      	ldr	r1, [sp, #12]
 800c92c:	e7d7      	b.n	800c8de <__hexnan+0x2e>
 800c92e:	2a29      	cmp	r2, #41	; 0x29
 800c930:	d156      	bne.n	800c9e0 <__hexnan+0x130>
 800c932:	3102      	adds	r1, #2
 800c934:	f8ca 1000 	str.w	r1, [sl]
 800c938:	f1bb 0f00 	cmp.w	fp, #0
 800c93c:	d050      	beq.n	800c9e0 <__hexnan+0x130>
 800c93e:	454c      	cmp	r4, r9
 800c940:	d206      	bcs.n	800c950 <__hexnan+0xa0>
 800c942:	2d07      	cmp	r5, #7
 800c944:	dc04      	bgt.n	800c950 <__hexnan+0xa0>
 800c946:	462a      	mov	r2, r5
 800c948:	4649      	mov	r1, r9
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7ff ff8a 	bl	800c864 <L_shift>
 800c950:	4544      	cmp	r4, r8
 800c952:	d934      	bls.n	800c9be <__hexnan+0x10e>
 800c954:	4623      	mov	r3, r4
 800c956:	f1a8 0204 	sub.w	r2, r8, #4
 800c95a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c95e:	429f      	cmp	r7, r3
 800c960:	f842 1f04 	str.w	r1, [r2, #4]!
 800c964:	d2f9      	bcs.n	800c95a <__hexnan+0xaa>
 800c966:	1b3b      	subs	r3, r7, r4
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	3304      	adds	r3, #4
 800c96e:	3401      	adds	r4, #1
 800c970:	3e03      	subs	r6, #3
 800c972:	42b4      	cmp	r4, r6
 800c974:	bf88      	it	hi
 800c976:	2304      	movhi	r3, #4
 800c978:	2200      	movs	r2, #0
 800c97a:	4443      	add	r3, r8
 800c97c:	f843 2b04 	str.w	r2, [r3], #4
 800c980:	429f      	cmp	r7, r3
 800c982:	d2fb      	bcs.n	800c97c <__hexnan+0xcc>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	b91b      	cbnz	r3, 800c990 <__hexnan+0xe0>
 800c988:	4547      	cmp	r7, r8
 800c98a:	d127      	bne.n	800c9dc <__hexnan+0x12c>
 800c98c:	2301      	movs	r3, #1
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	2005      	movs	r0, #5
 800c992:	e026      	b.n	800c9e2 <__hexnan+0x132>
 800c994:	3501      	adds	r5, #1
 800c996:	2d08      	cmp	r5, #8
 800c998:	f10b 0b01 	add.w	fp, fp, #1
 800c99c:	dd06      	ble.n	800c9ac <__hexnan+0xfc>
 800c99e:	4544      	cmp	r4, r8
 800c9a0:	d9c3      	bls.n	800c92a <__hexnan+0x7a>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	2501      	movs	r5, #1
 800c9a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9aa:	3c04      	subs	r4, #4
 800c9ac:	6822      	ldr	r2, [r4, #0]
 800c9ae:	f000 000f 	and.w	r0, r0, #15
 800c9b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c9b6:	6022      	str	r2, [r4, #0]
 800c9b8:	e7b7      	b.n	800c92a <__hexnan+0x7a>
 800c9ba:	2508      	movs	r5, #8
 800c9bc:	e7b5      	b.n	800c92a <__hexnan+0x7a>
 800c9be:	9b01      	ldr	r3, [sp, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0df      	beq.n	800c984 <__hexnan+0xd4>
 800c9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c8:	f1c3 0320 	rsb	r3, r3, #32
 800c9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9d4:	401a      	ands	r2, r3
 800c9d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800c9da:	e7d3      	b.n	800c984 <__hexnan+0xd4>
 800c9dc:	3f04      	subs	r7, #4
 800c9de:	e7d1      	b.n	800c984 <__hexnan+0xd4>
 800c9e0:	2004      	movs	r0, #4
 800c9e2:	b007      	add	sp, #28
 800c9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9e8 <_localeconv_r>:
 800c9e8:	4800      	ldr	r0, [pc, #0]	; (800c9ec <_localeconv_r+0x4>)
 800c9ea:	4770      	bx	lr
 800c9ec:	20000168 	.word	0x20000168

0800c9f0 <__retarget_lock_init_recursive>:
 800c9f0:	4770      	bx	lr

0800c9f2 <__retarget_lock_acquire_recursive>:
 800c9f2:	4770      	bx	lr

0800c9f4 <__retarget_lock_release_recursive>:
 800c9f4:	4770      	bx	lr

0800c9f6 <__swhatbuf_r>:
 800c9f6:	b570      	push	{r4, r5, r6, lr}
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fe:	4614      	mov	r4, r2
 800ca00:	2900      	cmp	r1, #0
 800ca02:	461d      	mov	r5, r3
 800ca04:	b096      	sub	sp, #88	; 0x58
 800ca06:	da07      	bge.n	800ca18 <__swhatbuf_r+0x22>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	89b3      	ldrh	r3, [r6, #12]
 800ca0e:	061a      	lsls	r2, r3, #24
 800ca10:	d410      	bmi.n	800ca34 <__swhatbuf_r+0x3e>
 800ca12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca16:	e00e      	b.n	800ca36 <__swhatbuf_r+0x40>
 800ca18:	466a      	mov	r2, sp
 800ca1a:	f000 ffad 	bl	800d978 <_fstat_r>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	dbf2      	blt.n	800ca08 <__swhatbuf_r+0x12>
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca2c:	425a      	negs	r2, r3
 800ca2e:	415a      	adcs	r2, r3
 800ca30:	602a      	str	r2, [r5, #0]
 800ca32:	e7ee      	b.n	800ca12 <__swhatbuf_r+0x1c>
 800ca34:	2340      	movs	r3, #64	; 0x40
 800ca36:	2000      	movs	r0, #0
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	b016      	add	sp, #88	; 0x58
 800ca3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca40 <__smakebuf_r>:
 800ca40:	898b      	ldrh	r3, [r1, #12]
 800ca42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca44:	079d      	lsls	r5, r3, #30
 800ca46:	4606      	mov	r6, r0
 800ca48:	460c      	mov	r4, r1
 800ca4a:	d507      	bpl.n	800ca5c <__smakebuf_r+0x1c>
 800ca4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	6123      	str	r3, [r4, #16]
 800ca54:	2301      	movs	r3, #1
 800ca56:	6163      	str	r3, [r4, #20]
 800ca58:	b002      	add	sp, #8
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	466a      	mov	r2, sp
 800ca5e:	ab01      	add	r3, sp, #4
 800ca60:	f7ff ffc9 	bl	800c9f6 <__swhatbuf_r>
 800ca64:	9900      	ldr	r1, [sp, #0]
 800ca66:	4605      	mov	r5, r0
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7fc fc27 	bl	80092bc <_malloc_r>
 800ca6e:	b948      	cbnz	r0, 800ca84 <__smakebuf_r+0x44>
 800ca70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca74:	059a      	lsls	r2, r3, #22
 800ca76:	d4ef      	bmi.n	800ca58 <__smakebuf_r+0x18>
 800ca78:	f023 0303 	bic.w	r3, r3, #3
 800ca7c:	f043 0302 	orr.w	r3, r3, #2
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7e3      	b.n	800ca4c <__smakebuf_r+0xc>
 800ca84:	4b0d      	ldr	r3, [pc, #52]	; (800cabc <__smakebuf_r+0x7c>)
 800ca86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	6020      	str	r0, [r4, #0]
 800ca8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	9b00      	ldr	r3, [sp, #0]
 800ca94:	6120      	str	r0, [r4, #16]
 800ca96:	6163      	str	r3, [r4, #20]
 800ca98:	9b01      	ldr	r3, [sp, #4]
 800ca9a:	b15b      	cbz	r3, 800cab4 <__smakebuf_r+0x74>
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caa2:	f000 ff7b 	bl	800d99c <_isatty_r>
 800caa6:	b128      	cbz	r0, 800cab4 <__smakebuf_r+0x74>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f023 0303 	bic.w	r3, r3, #3
 800caae:	f043 0301 	orr.w	r3, r3, #1
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	89a0      	ldrh	r0, [r4, #12]
 800cab6:	4305      	orrs	r5, r0
 800cab8:	81a5      	strh	r5, [r4, #12]
 800caba:	e7cd      	b.n	800ca58 <__smakebuf_r+0x18>
 800cabc:	0800c179 	.word	0x0800c179

0800cac0 <__ascii_mbtowc>:
 800cac0:	b082      	sub	sp, #8
 800cac2:	b901      	cbnz	r1, 800cac6 <__ascii_mbtowc+0x6>
 800cac4:	a901      	add	r1, sp, #4
 800cac6:	b142      	cbz	r2, 800cada <__ascii_mbtowc+0x1a>
 800cac8:	b14b      	cbz	r3, 800cade <__ascii_mbtowc+0x1e>
 800caca:	7813      	ldrb	r3, [r2, #0]
 800cacc:	600b      	str	r3, [r1, #0]
 800cace:	7812      	ldrb	r2, [r2, #0]
 800cad0:	1e10      	subs	r0, r2, #0
 800cad2:	bf18      	it	ne
 800cad4:	2001      	movne	r0, #1
 800cad6:	b002      	add	sp, #8
 800cad8:	4770      	bx	lr
 800cada:	4610      	mov	r0, r2
 800cadc:	e7fb      	b.n	800cad6 <__ascii_mbtowc+0x16>
 800cade:	f06f 0001 	mvn.w	r0, #1
 800cae2:	e7f8      	b.n	800cad6 <__ascii_mbtowc+0x16>

0800cae4 <memchr>:
 800cae4:	4603      	mov	r3, r0
 800cae6:	b510      	push	{r4, lr}
 800cae8:	b2c9      	uxtb	r1, r1
 800caea:	4402      	add	r2, r0
 800caec:	4293      	cmp	r3, r2
 800caee:	4618      	mov	r0, r3
 800caf0:	d101      	bne.n	800caf6 <memchr+0x12>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e003      	b.n	800cafe <memchr+0x1a>
 800caf6:	7804      	ldrb	r4, [r0, #0]
 800caf8:	3301      	adds	r3, #1
 800cafa:	428c      	cmp	r4, r1
 800cafc:	d1f6      	bne.n	800caec <memchr+0x8>
 800cafe:	bd10      	pop	{r4, pc}

0800cb00 <memmove>:
 800cb00:	4288      	cmp	r0, r1
 800cb02:	b510      	push	{r4, lr}
 800cb04:	eb01 0402 	add.w	r4, r1, r2
 800cb08:	d902      	bls.n	800cb10 <memmove+0x10>
 800cb0a:	4284      	cmp	r4, r0
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	d807      	bhi.n	800cb20 <memmove+0x20>
 800cb10:	1e43      	subs	r3, r0, #1
 800cb12:	42a1      	cmp	r1, r4
 800cb14:	d008      	beq.n	800cb28 <memmove+0x28>
 800cb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb1e:	e7f8      	b.n	800cb12 <memmove+0x12>
 800cb20:	4601      	mov	r1, r0
 800cb22:	4402      	add	r2, r0
 800cb24:	428a      	cmp	r2, r1
 800cb26:	d100      	bne.n	800cb2a <memmove+0x2a>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb32:	e7f7      	b.n	800cb24 <memmove+0x24>

0800cb34 <__malloc_lock>:
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <__malloc_lock+0x8>)
 800cb36:	f7ff bf5c 	b.w	800c9f2 <__retarget_lock_acquire_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	20001118 	.word	0x20001118

0800cb40 <__malloc_unlock>:
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__malloc_unlock+0x8>)
 800cb42:	f7ff bf57 	b.w	800c9f4 <__retarget_lock_release_recursive>
 800cb46:	bf00      	nop
 800cb48:	20001118 	.word	0x20001118

0800cb4c <_Balloc>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	b976      	cbnz	r6, 800cb74 <_Balloc+0x28>
 800cb56:	2010      	movs	r0, #16
 800cb58:	f7fc fb46 	bl	80091e8 <malloc>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	6260      	str	r0, [r4, #36]	; 0x24
 800cb60:	b920      	cbnz	r0, 800cb6c <_Balloc+0x20>
 800cb62:	2166      	movs	r1, #102	; 0x66
 800cb64:	4b17      	ldr	r3, [pc, #92]	; (800cbc4 <_Balloc+0x78>)
 800cb66:	4818      	ldr	r0, [pc, #96]	; (800cbc8 <_Balloc+0x7c>)
 800cb68:	f7fc fae4 	bl	8009134 <__assert_func>
 800cb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb70:	6006      	str	r6, [r0, #0]
 800cb72:	60c6      	str	r6, [r0, #12]
 800cb74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb76:	68f3      	ldr	r3, [r6, #12]
 800cb78:	b183      	cbz	r3, 800cb9c <_Balloc+0x50>
 800cb7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb82:	b9b8      	cbnz	r0, 800cbb4 <_Balloc+0x68>
 800cb84:	2101      	movs	r1, #1
 800cb86:	fa01 f605 	lsl.w	r6, r1, r5
 800cb8a:	1d72      	adds	r2, r6, #5
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	0092      	lsls	r2, r2, #2
 800cb90:	f000 fc94 	bl	800d4bc <_calloc_r>
 800cb94:	b160      	cbz	r0, 800cbb0 <_Balloc+0x64>
 800cb96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb9a:	e00e      	b.n	800cbba <_Balloc+0x6e>
 800cb9c:	2221      	movs	r2, #33	; 0x21
 800cb9e:	2104      	movs	r1, #4
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 fc8b 	bl	800d4bc <_calloc_r>
 800cba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba8:	60f0      	str	r0, [r6, #12]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e4      	bne.n	800cb7a <_Balloc+0x2e>
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	6802      	ldr	r2, [r0, #0]
 800cbb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbc0:	e7f7      	b.n	800cbb2 <_Balloc+0x66>
 800cbc2:	bf00      	nop
 800cbc4:	08010f1e 	.word	0x08010f1e
 800cbc8:	08011088 	.word	0x08011088

0800cbcc <_Bfree>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	b976      	cbnz	r6, 800cbf4 <_Bfree+0x28>
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f7fc fb06 	bl	80091e8 <malloc>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6268      	str	r0, [r5, #36]	; 0x24
 800cbe0:	b920      	cbnz	r0, 800cbec <_Bfree+0x20>
 800cbe2:	218a      	movs	r1, #138	; 0x8a
 800cbe4:	4b08      	ldr	r3, [pc, #32]	; (800cc08 <_Bfree+0x3c>)
 800cbe6:	4809      	ldr	r0, [pc, #36]	; (800cc0c <_Bfree+0x40>)
 800cbe8:	f7fc faa4 	bl	8009134 <__assert_func>
 800cbec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf0:	6006      	str	r6, [r0, #0]
 800cbf2:	60c6      	str	r6, [r0, #12]
 800cbf4:	b13c      	cbz	r4, 800cc06 <_Bfree+0x3a>
 800cbf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbf8:	6862      	ldr	r2, [r4, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc00:	6021      	str	r1, [r4, #0]
 800cc02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	08010f1e 	.word	0x08010f1e
 800cc0c:	08011088 	.word	0x08011088

0800cc10 <__multadd>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	4698      	mov	r8, r3
 800cc16:	460c      	mov	r4, r1
 800cc18:	2300      	movs	r3, #0
 800cc1a:	690e      	ldr	r6, [r1, #16]
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	f101 0014 	add.w	r0, r1, #20
 800cc22:	6805      	ldr	r5, [r0, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	b2a9      	uxth	r1, r5
 800cc28:	fb02 8101 	mla	r1, r2, r1, r8
 800cc2c:	0c2d      	lsrs	r5, r5, #16
 800cc2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cc32:	fb02 c505 	mla	r5, r2, r5, ip
 800cc36:	b289      	uxth	r1, r1
 800cc38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cc3c:	429e      	cmp	r6, r3
 800cc3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cc42:	f840 1b04 	str.w	r1, [r0], #4
 800cc46:	dcec      	bgt.n	800cc22 <__multadd+0x12>
 800cc48:	f1b8 0f00 	cmp.w	r8, #0
 800cc4c:	d022      	beq.n	800cc94 <__multadd+0x84>
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	42b3      	cmp	r3, r6
 800cc52:	dc19      	bgt.n	800cc88 <__multadd+0x78>
 800cc54:	6861      	ldr	r1, [r4, #4]
 800cc56:	4638      	mov	r0, r7
 800cc58:	3101      	adds	r1, #1
 800cc5a:	f7ff ff77 	bl	800cb4c <_Balloc>
 800cc5e:	4605      	mov	r5, r0
 800cc60:	b928      	cbnz	r0, 800cc6e <__multadd+0x5e>
 800cc62:	4602      	mov	r2, r0
 800cc64:	21b5      	movs	r1, #181	; 0xb5
 800cc66:	4b0d      	ldr	r3, [pc, #52]	; (800cc9c <__multadd+0x8c>)
 800cc68:	480d      	ldr	r0, [pc, #52]	; (800cca0 <__multadd+0x90>)
 800cc6a:	f7fc fa63 	bl	8009134 <__assert_func>
 800cc6e:	6922      	ldr	r2, [r4, #16]
 800cc70:	f104 010c 	add.w	r1, r4, #12
 800cc74:	3202      	adds	r2, #2
 800cc76:	0092      	lsls	r2, r2, #2
 800cc78:	300c      	adds	r0, #12
 800cc7a:	f7fc fabd 	bl	80091f8 <memcpy>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7ff ffa3 	bl	800cbcc <_Bfree>
 800cc86:	462c      	mov	r4, r5
 800cc88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cc8c:	3601      	adds	r6, #1
 800cc8e:	f8c3 8014 	str.w	r8, [r3, #20]
 800cc92:	6126      	str	r6, [r4, #16]
 800cc94:	4620      	mov	r0, r4
 800cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08010f94 	.word	0x08010f94
 800cca0:	08011088 	.word	0x08011088

0800cca4 <__s2b>:
 800cca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca8:	4615      	mov	r5, r2
 800ccaa:	2209      	movs	r2, #9
 800ccac:	461f      	mov	r7, r3
 800ccae:	3308      	adds	r3, #8
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	2201      	movs	r2, #1
 800ccba:	2100      	movs	r1, #0
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	db09      	blt.n	800ccd4 <__s2b+0x30>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7ff ff43 	bl	800cb4c <_Balloc>
 800ccc6:	b940      	cbnz	r0, 800ccda <__s2b+0x36>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	21ce      	movs	r1, #206	; 0xce
 800cccc:	4b18      	ldr	r3, [pc, #96]	; (800cd30 <__s2b+0x8c>)
 800ccce:	4819      	ldr	r0, [pc, #100]	; (800cd34 <__s2b+0x90>)
 800ccd0:	f7fc fa30 	bl	8009134 <__assert_func>
 800ccd4:	0052      	lsls	r2, r2, #1
 800ccd6:	3101      	adds	r1, #1
 800ccd8:	e7f0      	b.n	800ccbc <__s2b+0x18>
 800ccda:	9b08      	ldr	r3, [sp, #32]
 800ccdc:	2d09      	cmp	r5, #9
 800ccde:	6143      	str	r3, [r0, #20]
 800cce0:	f04f 0301 	mov.w	r3, #1
 800cce4:	6103      	str	r3, [r0, #16]
 800cce6:	dd16      	ble.n	800cd16 <__s2b+0x72>
 800cce8:	f104 0909 	add.w	r9, r4, #9
 800ccec:	46c8      	mov	r8, r9
 800ccee:	442c      	add	r4, r5
 800ccf0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	220a      	movs	r2, #10
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	3b30      	subs	r3, #48	; 0x30
 800ccfc:	f7ff ff88 	bl	800cc10 <__multadd>
 800cd00:	45a0      	cmp	r8, r4
 800cd02:	d1f5      	bne.n	800ccf0 <__s2b+0x4c>
 800cd04:	f1a5 0408 	sub.w	r4, r5, #8
 800cd08:	444c      	add	r4, r9
 800cd0a:	1b2d      	subs	r5, r5, r4
 800cd0c:	1963      	adds	r3, r4, r5
 800cd0e:	42bb      	cmp	r3, r7
 800cd10:	db04      	blt.n	800cd1c <__s2b+0x78>
 800cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd16:	2509      	movs	r5, #9
 800cd18:	340a      	adds	r4, #10
 800cd1a:	e7f6      	b.n	800cd0a <__s2b+0x66>
 800cd1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd20:	4601      	mov	r1, r0
 800cd22:	220a      	movs	r2, #10
 800cd24:	4630      	mov	r0, r6
 800cd26:	3b30      	subs	r3, #48	; 0x30
 800cd28:	f7ff ff72 	bl	800cc10 <__multadd>
 800cd2c:	e7ee      	b.n	800cd0c <__s2b+0x68>
 800cd2e:	bf00      	nop
 800cd30:	08010f94 	.word	0x08010f94
 800cd34:	08011088 	.word	0x08011088

0800cd38 <__hi0bits>:
 800cd38:	0c02      	lsrs	r2, r0, #16
 800cd3a:	0412      	lsls	r2, r2, #16
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	b9ca      	cbnz	r2, 800cd74 <__hi0bits+0x3c>
 800cd40:	0403      	lsls	r3, r0, #16
 800cd42:	2010      	movs	r0, #16
 800cd44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd48:	bf04      	itt	eq
 800cd4a:	021b      	lsleq	r3, r3, #8
 800cd4c:	3008      	addeq	r0, #8
 800cd4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd52:	bf04      	itt	eq
 800cd54:	011b      	lsleq	r3, r3, #4
 800cd56:	3004      	addeq	r0, #4
 800cd58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd5c:	bf04      	itt	eq
 800cd5e:	009b      	lsleq	r3, r3, #2
 800cd60:	3002      	addeq	r0, #2
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	db05      	blt.n	800cd72 <__hi0bits+0x3a>
 800cd66:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cd6a:	f100 0001 	add.w	r0, r0, #1
 800cd6e:	bf08      	it	eq
 800cd70:	2020      	moveq	r0, #32
 800cd72:	4770      	bx	lr
 800cd74:	2000      	movs	r0, #0
 800cd76:	e7e5      	b.n	800cd44 <__hi0bits+0xc>

0800cd78 <__lo0bits>:
 800cd78:	6803      	ldr	r3, [r0, #0]
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	f013 0007 	ands.w	r0, r3, #7
 800cd80:	d00b      	beq.n	800cd9a <__lo0bits+0x22>
 800cd82:	07d9      	lsls	r1, r3, #31
 800cd84:	d422      	bmi.n	800cdcc <__lo0bits+0x54>
 800cd86:	0798      	lsls	r0, r3, #30
 800cd88:	bf49      	itett	mi
 800cd8a:	085b      	lsrmi	r3, r3, #1
 800cd8c:	089b      	lsrpl	r3, r3, #2
 800cd8e:	2001      	movmi	r0, #1
 800cd90:	6013      	strmi	r3, [r2, #0]
 800cd92:	bf5c      	itt	pl
 800cd94:	2002      	movpl	r0, #2
 800cd96:	6013      	strpl	r3, [r2, #0]
 800cd98:	4770      	bx	lr
 800cd9a:	b299      	uxth	r1, r3
 800cd9c:	b909      	cbnz	r1, 800cda2 <__lo0bits+0x2a>
 800cd9e:	2010      	movs	r0, #16
 800cda0:	0c1b      	lsrs	r3, r3, #16
 800cda2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cda6:	bf04      	itt	eq
 800cda8:	0a1b      	lsreq	r3, r3, #8
 800cdaa:	3008      	addeq	r0, #8
 800cdac:	0719      	lsls	r1, r3, #28
 800cdae:	bf04      	itt	eq
 800cdb0:	091b      	lsreq	r3, r3, #4
 800cdb2:	3004      	addeq	r0, #4
 800cdb4:	0799      	lsls	r1, r3, #30
 800cdb6:	bf04      	itt	eq
 800cdb8:	089b      	lsreq	r3, r3, #2
 800cdba:	3002      	addeq	r0, #2
 800cdbc:	07d9      	lsls	r1, r3, #31
 800cdbe:	d403      	bmi.n	800cdc8 <__lo0bits+0x50>
 800cdc0:	085b      	lsrs	r3, r3, #1
 800cdc2:	f100 0001 	add.w	r0, r0, #1
 800cdc6:	d003      	beq.n	800cdd0 <__lo0bits+0x58>
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	4770      	bx	lr
 800cdcc:	2000      	movs	r0, #0
 800cdce:	4770      	bx	lr
 800cdd0:	2020      	movs	r0, #32
 800cdd2:	4770      	bx	lr

0800cdd4 <__i2b>:
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	2101      	movs	r1, #1
 800cdda:	f7ff feb7 	bl	800cb4c <_Balloc>
 800cdde:	4602      	mov	r2, r0
 800cde0:	b928      	cbnz	r0, 800cdee <__i2b+0x1a>
 800cde2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cde6:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <__i2b+0x24>)
 800cde8:	4804      	ldr	r0, [pc, #16]	; (800cdfc <__i2b+0x28>)
 800cdea:	f7fc f9a3 	bl	8009134 <__assert_func>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	6144      	str	r4, [r0, #20]
 800cdf2:	6103      	str	r3, [r0, #16]
 800cdf4:	bd10      	pop	{r4, pc}
 800cdf6:	bf00      	nop
 800cdf8:	08010f94 	.word	0x08010f94
 800cdfc:	08011088 	.word	0x08011088

0800ce00 <__multiply>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	4614      	mov	r4, r2
 800ce06:	690a      	ldr	r2, [r1, #16]
 800ce08:	6923      	ldr	r3, [r4, #16]
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	bfbe      	ittt	lt
 800ce10:	460b      	movlt	r3, r1
 800ce12:	4625      	movlt	r5, r4
 800ce14:	461c      	movlt	r4, r3
 800ce16:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ce1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ce1e:	68ab      	ldr	r3, [r5, #8]
 800ce20:	6869      	ldr	r1, [r5, #4]
 800ce22:	eb0a 0709 	add.w	r7, sl, r9
 800ce26:	42bb      	cmp	r3, r7
 800ce28:	b085      	sub	sp, #20
 800ce2a:	bfb8      	it	lt
 800ce2c:	3101      	addlt	r1, #1
 800ce2e:	f7ff fe8d 	bl	800cb4c <_Balloc>
 800ce32:	b930      	cbnz	r0, 800ce42 <__multiply+0x42>
 800ce34:	4602      	mov	r2, r0
 800ce36:	f240 115d 	movw	r1, #349	; 0x15d
 800ce3a:	4b41      	ldr	r3, [pc, #260]	; (800cf40 <__multiply+0x140>)
 800ce3c:	4841      	ldr	r0, [pc, #260]	; (800cf44 <__multiply+0x144>)
 800ce3e:	f7fc f979 	bl	8009134 <__assert_func>
 800ce42:	f100 0614 	add.w	r6, r0, #20
 800ce46:	4633      	mov	r3, r6
 800ce48:	2200      	movs	r2, #0
 800ce4a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ce4e:	4543      	cmp	r3, r8
 800ce50:	d31e      	bcc.n	800ce90 <__multiply+0x90>
 800ce52:	f105 0c14 	add.w	ip, r5, #20
 800ce56:	f104 0314 	add.w	r3, r4, #20
 800ce5a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ce5e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ce62:	9202      	str	r2, [sp, #8]
 800ce64:	ebac 0205 	sub.w	r2, ip, r5
 800ce68:	3a15      	subs	r2, #21
 800ce6a:	f022 0203 	bic.w	r2, r2, #3
 800ce6e:	3204      	adds	r2, #4
 800ce70:	f105 0115 	add.w	r1, r5, #21
 800ce74:	458c      	cmp	ip, r1
 800ce76:	bf38      	it	cc
 800ce78:	2204      	movcc	r2, #4
 800ce7a:	9201      	str	r2, [sp, #4]
 800ce7c:	9a02      	ldr	r2, [sp, #8]
 800ce7e:	9303      	str	r3, [sp, #12]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d808      	bhi.n	800ce96 <__multiply+0x96>
 800ce84:	2f00      	cmp	r7, #0
 800ce86:	dc55      	bgt.n	800cf34 <__multiply+0x134>
 800ce88:	6107      	str	r7, [r0, #16]
 800ce8a:	b005      	add	sp, #20
 800ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce90:	f843 2b04 	str.w	r2, [r3], #4
 800ce94:	e7db      	b.n	800ce4e <__multiply+0x4e>
 800ce96:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce9a:	f1ba 0f00 	cmp.w	sl, #0
 800ce9e:	d020      	beq.n	800cee2 <__multiply+0xe2>
 800cea0:	46b1      	mov	r9, r6
 800cea2:	2200      	movs	r2, #0
 800cea4:	f105 0e14 	add.w	lr, r5, #20
 800cea8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ceac:	f8d9 b000 	ldr.w	fp, [r9]
 800ceb0:	b2a1      	uxth	r1, r4
 800ceb2:	fa1f fb8b 	uxth.w	fp, fp
 800ceb6:	fb0a b101 	mla	r1, sl, r1, fp
 800ceba:	4411      	add	r1, r2
 800cebc:	f8d9 2000 	ldr.w	r2, [r9]
 800cec0:	0c24      	lsrs	r4, r4, #16
 800cec2:	0c12      	lsrs	r2, r2, #16
 800cec4:	fb0a 2404 	mla	r4, sl, r4, r2
 800cec8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cecc:	b289      	uxth	r1, r1
 800cece:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ced2:	45f4      	cmp	ip, lr
 800ced4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ced8:	f849 1b04 	str.w	r1, [r9], #4
 800cedc:	d8e4      	bhi.n	800cea8 <__multiply+0xa8>
 800cede:	9901      	ldr	r1, [sp, #4]
 800cee0:	5072      	str	r2, [r6, r1]
 800cee2:	9a03      	ldr	r2, [sp, #12]
 800cee4:	3304      	adds	r3, #4
 800cee6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	d01f      	beq.n	800cf30 <__multiply+0x130>
 800cef0:	46b6      	mov	lr, r6
 800cef2:	f04f 0a00 	mov.w	sl, #0
 800cef6:	6834      	ldr	r4, [r6, #0]
 800cef8:	f105 0114 	add.w	r1, r5, #20
 800cefc:	880a      	ldrh	r2, [r1, #0]
 800cefe:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cf02:	b2a4      	uxth	r4, r4
 800cf04:	fb09 b202 	mla	r2, r9, r2, fp
 800cf08:	4492      	add	sl, r2
 800cf0a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cf0e:	f84e 4b04 	str.w	r4, [lr], #4
 800cf12:	f851 4b04 	ldr.w	r4, [r1], #4
 800cf16:	f8be 2000 	ldrh.w	r2, [lr]
 800cf1a:	0c24      	lsrs	r4, r4, #16
 800cf1c:	fb09 2404 	mla	r4, r9, r4, r2
 800cf20:	458c      	cmp	ip, r1
 800cf22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cf26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cf2a:	d8e7      	bhi.n	800cefc <__multiply+0xfc>
 800cf2c:	9a01      	ldr	r2, [sp, #4]
 800cf2e:	50b4      	str	r4, [r6, r2]
 800cf30:	3604      	adds	r6, #4
 800cf32:	e7a3      	b.n	800ce7c <__multiply+0x7c>
 800cf34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1a5      	bne.n	800ce88 <__multiply+0x88>
 800cf3c:	3f01      	subs	r7, #1
 800cf3e:	e7a1      	b.n	800ce84 <__multiply+0x84>
 800cf40:	08010f94 	.word	0x08010f94
 800cf44:	08011088 	.word	0x08011088

0800cf48 <__pow5mult>:
 800cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	4615      	mov	r5, r2
 800cf4e:	f012 0203 	ands.w	r2, r2, #3
 800cf52:	4606      	mov	r6, r0
 800cf54:	460f      	mov	r7, r1
 800cf56:	d007      	beq.n	800cf68 <__pow5mult+0x20>
 800cf58:	4c25      	ldr	r4, [pc, #148]	; (800cff0 <__pow5mult+0xa8>)
 800cf5a:	3a01      	subs	r2, #1
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf62:	f7ff fe55 	bl	800cc10 <__multadd>
 800cf66:	4607      	mov	r7, r0
 800cf68:	10ad      	asrs	r5, r5, #2
 800cf6a:	d03d      	beq.n	800cfe8 <__pow5mult+0xa0>
 800cf6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf6e:	b97c      	cbnz	r4, 800cf90 <__pow5mult+0x48>
 800cf70:	2010      	movs	r0, #16
 800cf72:	f7fc f939 	bl	80091e8 <malloc>
 800cf76:	4602      	mov	r2, r0
 800cf78:	6270      	str	r0, [r6, #36]	; 0x24
 800cf7a:	b928      	cbnz	r0, 800cf88 <__pow5mult+0x40>
 800cf7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf80:	4b1c      	ldr	r3, [pc, #112]	; (800cff4 <__pow5mult+0xac>)
 800cf82:	481d      	ldr	r0, [pc, #116]	; (800cff8 <__pow5mult+0xb0>)
 800cf84:	f7fc f8d6 	bl	8009134 <__assert_func>
 800cf88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf8c:	6004      	str	r4, [r0, #0]
 800cf8e:	60c4      	str	r4, [r0, #12]
 800cf90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf98:	b94c      	cbnz	r4, 800cfae <__pow5mult+0x66>
 800cf9a:	f240 2171 	movw	r1, #625	; 0x271
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7ff ff18 	bl	800cdd4 <__i2b>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfac:	6003      	str	r3, [r0, #0]
 800cfae:	f04f 0900 	mov.w	r9, #0
 800cfb2:	07eb      	lsls	r3, r5, #31
 800cfb4:	d50a      	bpl.n	800cfcc <__pow5mult+0x84>
 800cfb6:	4639      	mov	r1, r7
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ff20 	bl	800ce00 <__multiply>
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	f7ff fe01 	bl	800cbcc <_Bfree>
 800cfca:	4647      	mov	r7, r8
 800cfcc:	106d      	asrs	r5, r5, #1
 800cfce:	d00b      	beq.n	800cfe8 <__pow5mult+0xa0>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	b938      	cbnz	r0, 800cfe4 <__pow5mult+0x9c>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7ff ff11 	bl	800ce00 <__multiply>
 800cfde:	6020      	str	r0, [r4, #0]
 800cfe0:	f8c0 9000 	str.w	r9, [r0]
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	e7e4      	b.n	800cfb2 <__pow5mult+0x6a>
 800cfe8:	4638      	mov	r0, r7
 800cfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfee:	bf00      	nop
 800cff0:	080111d8 	.word	0x080111d8
 800cff4:	08010f1e 	.word	0x08010f1e
 800cff8:	08011088 	.word	0x08011088

0800cffc <__lshift>:
 800cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	460c      	mov	r4, r1
 800d002:	4607      	mov	r7, r0
 800d004:	4691      	mov	r9, r2
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	6849      	ldr	r1, [r1, #4]
 800d00a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d00e:	68a3      	ldr	r3, [r4, #8]
 800d010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d014:	f108 0601 	add.w	r6, r8, #1
 800d018:	42b3      	cmp	r3, r6
 800d01a:	db0b      	blt.n	800d034 <__lshift+0x38>
 800d01c:	4638      	mov	r0, r7
 800d01e:	f7ff fd95 	bl	800cb4c <_Balloc>
 800d022:	4605      	mov	r5, r0
 800d024:	b948      	cbnz	r0, 800d03a <__lshift+0x3e>
 800d026:	4602      	mov	r2, r0
 800d028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d02c:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <__lshift+0xd0>)
 800d02e:	4828      	ldr	r0, [pc, #160]	; (800d0d0 <__lshift+0xd4>)
 800d030:	f7fc f880 	bl	8009134 <__assert_func>
 800d034:	3101      	adds	r1, #1
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	e7ee      	b.n	800d018 <__lshift+0x1c>
 800d03a:	2300      	movs	r3, #0
 800d03c:	f100 0114 	add.w	r1, r0, #20
 800d040:	f100 0210 	add.w	r2, r0, #16
 800d044:	4618      	mov	r0, r3
 800d046:	4553      	cmp	r3, sl
 800d048:	db33      	blt.n	800d0b2 <__lshift+0xb6>
 800d04a:	6920      	ldr	r0, [r4, #16]
 800d04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d050:	f104 0314 	add.w	r3, r4, #20
 800d054:	f019 091f 	ands.w	r9, r9, #31
 800d058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d060:	d02b      	beq.n	800d0ba <__lshift+0xbe>
 800d062:	468a      	mov	sl, r1
 800d064:	2200      	movs	r2, #0
 800d066:	f1c9 0e20 	rsb	lr, r9, #32
 800d06a:	6818      	ldr	r0, [r3, #0]
 800d06c:	fa00 f009 	lsl.w	r0, r0, r9
 800d070:	4302      	orrs	r2, r0
 800d072:	f84a 2b04 	str.w	r2, [sl], #4
 800d076:	f853 2b04 	ldr.w	r2, [r3], #4
 800d07a:	459c      	cmp	ip, r3
 800d07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d080:	d8f3      	bhi.n	800d06a <__lshift+0x6e>
 800d082:	ebac 0304 	sub.w	r3, ip, r4
 800d086:	3b15      	subs	r3, #21
 800d088:	f023 0303 	bic.w	r3, r3, #3
 800d08c:	3304      	adds	r3, #4
 800d08e:	f104 0015 	add.w	r0, r4, #21
 800d092:	4584      	cmp	ip, r0
 800d094:	bf38      	it	cc
 800d096:	2304      	movcc	r3, #4
 800d098:	50ca      	str	r2, [r1, r3]
 800d09a:	b10a      	cbz	r2, 800d0a0 <__lshift+0xa4>
 800d09c:	f108 0602 	add.w	r6, r8, #2
 800d0a0:	3e01      	subs	r6, #1
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	612e      	str	r6, [r5, #16]
 800d0a8:	f7ff fd90 	bl	800cbcc <_Bfree>
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	e7c5      	b.n	800d046 <__lshift+0x4a>
 800d0ba:	3904      	subs	r1, #4
 800d0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0c0:	459c      	cmp	ip, r3
 800d0c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0c6:	d8f9      	bhi.n	800d0bc <__lshift+0xc0>
 800d0c8:	e7ea      	b.n	800d0a0 <__lshift+0xa4>
 800d0ca:	bf00      	nop
 800d0cc:	08010f94 	.word	0x08010f94
 800d0d0:	08011088 	.word	0x08011088

0800d0d4 <__mcmp>:
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	690a      	ldr	r2, [r1, #16]
 800d0d8:	6900      	ldr	r0, [r0, #16]
 800d0da:	b530      	push	{r4, r5, lr}
 800d0dc:	1a80      	subs	r0, r0, r2
 800d0de:	d10d      	bne.n	800d0fc <__mcmp+0x28>
 800d0e0:	3314      	adds	r3, #20
 800d0e2:	3114      	adds	r1, #20
 800d0e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0f4:	4295      	cmp	r5, r2
 800d0f6:	d002      	beq.n	800d0fe <__mcmp+0x2a>
 800d0f8:	d304      	bcc.n	800d104 <__mcmp+0x30>
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	bd30      	pop	{r4, r5, pc}
 800d0fe:	42a3      	cmp	r3, r4
 800d100:	d3f4      	bcc.n	800d0ec <__mcmp+0x18>
 800d102:	e7fb      	b.n	800d0fc <__mcmp+0x28>
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	e7f8      	b.n	800d0fc <__mcmp+0x28>
	...

0800d10c <__mdiff>:
 800d10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d110:	460c      	mov	r4, r1
 800d112:	4606      	mov	r6, r0
 800d114:	4611      	mov	r1, r2
 800d116:	4620      	mov	r0, r4
 800d118:	4692      	mov	sl, r2
 800d11a:	f7ff ffdb 	bl	800d0d4 <__mcmp>
 800d11e:	1e05      	subs	r5, r0, #0
 800d120:	d111      	bne.n	800d146 <__mdiff+0x3a>
 800d122:	4629      	mov	r1, r5
 800d124:	4630      	mov	r0, r6
 800d126:	f7ff fd11 	bl	800cb4c <_Balloc>
 800d12a:	4602      	mov	r2, r0
 800d12c:	b928      	cbnz	r0, 800d13a <__mdiff+0x2e>
 800d12e:	f240 2132 	movw	r1, #562	; 0x232
 800d132:	4b3c      	ldr	r3, [pc, #240]	; (800d224 <__mdiff+0x118>)
 800d134:	483c      	ldr	r0, [pc, #240]	; (800d228 <__mdiff+0x11c>)
 800d136:	f7fb fffd 	bl	8009134 <__assert_func>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d140:	4610      	mov	r0, r2
 800d142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	bfa4      	itt	ge
 800d148:	4653      	movge	r3, sl
 800d14a:	46a2      	movge	sl, r4
 800d14c:	4630      	mov	r0, r6
 800d14e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d152:	bfa6      	itte	ge
 800d154:	461c      	movge	r4, r3
 800d156:	2500      	movge	r5, #0
 800d158:	2501      	movlt	r5, #1
 800d15a:	f7ff fcf7 	bl	800cb4c <_Balloc>
 800d15e:	4602      	mov	r2, r0
 800d160:	b918      	cbnz	r0, 800d16a <__mdiff+0x5e>
 800d162:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d166:	4b2f      	ldr	r3, [pc, #188]	; (800d224 <__mdiff+0x118>)
 800d168:	e7e4      	b.n	800d134 <__mdiff+0x28>
 800d16a:	f100 0814 	add.w	r8, r0, #20
 800d16e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d172:	60c5      	str	r5, [r0, #12]
 800d174:	f04f 0c00 	mov.w	ip, #0
 800d178:	f10a 0514 	add.w	r5, sl, #20
 800d17c:	f10a 0010 	add.w	r0, sl, #16
 800d180:	46c2      	mov	sl, r8
 800d182:	6926      	ldr	r6, [r4, #16]
 800d184:	f104 0914 	add.w	r9, r4, #20
 800d188:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d18c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d190:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d194:	f859 3b04 	ldr.w	r3, [r9], #4
 800d198:	fa1f f18b 	uxth.w	r1, fp
 800d19c:	4461      	add	r1, ip
 800d19e:	fa1f fc83 	uxth.w	ip, r3
 800d1a2:	0c1b      	lsrs	r3, r3, #16
 800d1a4:	eba1 010c 	sub.w	r1, r1, ip
 800d1a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d1b0:	b289      	uxth	r1, r1
 800d1b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d1b6:	454e      	cmp	r6, r9
 800d1b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d1bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d1c0:	d8e6      	bhi.n	800d190 <__mdiff+0x84>
 800d1c2:	1b33      	subs	r3, r6, r4
 800d1c4:	3b15      	subs	r3, #21
 800d1c6:	f023 0303 	bic.w	r3, r3, #3
 800d1ca:	3415      	adds	r4, #21
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	42a6      	cmp	r6, r4
 800d1d0:	bf38      	it	cc
 800d1d2:	2304      	movcc	r3, #4
 800d1d4:	441d      	add	r5, r3
 800d1d6:	4443      	add	r3, r8
 800d1d8:	461e      	mov	r6, r3
 800d1da:	462c      	mov	r4, r5
 800d1dc:	4574      	cmp	r4, lr
 800d1de:	d30e      	bcc.n	800d1fe <__mdiff+0xf2>
 800d1e0:	f10e 0103 	add.w	r1, lr, #3
 800d1e4:	1b49      	subs	r1, r1, r5
 800d1e6:	f021 0103 	bic.w	r1, r1, #3
 800d1ea:	3d03      	subs	r5, #3
 800d1ec:	45ae      	cmp	lr, r5
 800d1ee:	bf38      	it	cc
 800d1f0:	2100      	movcc	r1, #0
 800d1f2:	4419      	add	r1, r3
 800d1f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d1f8:	b18b      	cbz	r3, 800d21e <__mdiff+0x112>
 800d1fa:	6117      	str	r7, [r2, #16]
 800d1fc:	e7a0      	b.n	800d140 <__mdiff+0x34>
 800d1fe:	f854 8b04 	ldr.w	r8, [r4], #4
 800d202:	fa1f f188 	uxth.w	r1, r8
 800d206:	4461      	add	r1, ip
 800d208:	1408      	asrs	r0, r1, #16
 800d20a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d20e:	b289      	uxth	r1, r1
 800d210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d218:	f846 1b04 	str.w	r1, [r6], #4
 800d21c:	e7de      	b.n	800d1dc <__mdiff+0xd0>
 800d21e:	3f01      	subs	r7, #1
 800d220:	e7e8      	b.n	800d1f4 <__mdiff+0xe8>
 800d222:	bf00      	nop
 800d224:	08010f94 	.word	0x08010f94
 800d228:	08011088 	.word	0x08011088

0800d22c <__ulp>:
 800d22c:	4b11      	ldr	r3, [pc, #68]	; (800d274 <__ulp+0x48>)
 800d22e:	400b      	ands	r3, r1
 800d230:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d234:	2b00      	cmp	r3, #0
 800d236:	dd02      	ble.n	800d23e <__ulp+0x12>
 800d238:	2000      	movs	r0, #0
 800d23a:	4619      	mov	r1, r3
 800d23c:	4770      	bx	lr
 800d23e:	425b      	negs	r3, r3
 800d240:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d244:	f04f 0000 	mov.w	r0, #0
 800d248:	f04f 0100 	mov.w	r1, #0
 800d24c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d250:	da04      	bge.n	800d25c <__ulp+0x30>
 800d252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d256:	fa43 f102 	asr.w	r1, r3, r2
 800d25a:	4770      	bx	lr
 800d25c:	f1a2 0314 	sub.w	r3, r2, #20
 800d260:	2b1e      	cmp	r3, #30
 800d262:	bfd6      	itet	le
 800d264:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d268:	2301      	movgt	r3, #1
 800d26a:	fa22 f303 	lsrle.w	r3, r2, r3
 800d26e:	4618      	mov	r0, r3
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	7ff00000 	.word	0x7ff00000

0800d278 <__b2d>:
 800d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	6907      	ldr	r7, [r0, #16]
 800d27e:	f100 0914 	add.w	r9, r0, #20
 800d282:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d286:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d28a:	f1a7 0804 	sub.w	r8, r7, #4
 800d28e:	4630      	mov	r0, r6
 800d290:	f7ff fd52 	bl	800cd38 <__hi0bits>
 800d294:	f1c0 0320 	rsb	r3, r0, #32
 800d298:	280a      	cmp	r0, #10
 800d29a:	600b      	str	r3, [r1, #0]
 800d29c:	491f      	ldr	r1, [pc, #124]	; (800d31c <__b2d+0xa4>)
 800d29e:	dc17      	bgt.n	800d2d0 <__b2d+0x58>
 800d2a0:	45c1      	cmp	r9, r8
 800d2a2:	bf28      	it	cs
 800d2a4:	2200      	movcs	r2, #0
 800d2a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d2aa:	fa26 f30c 	lsr.w	r3, r6, ip
 800d2ae:	bf38      	it	cc
 800d2b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d2b4:	ea43 0501 	orr.w	r5, r3, r1
 800d2b8:	f100 0315 	add.w	r3, r0, #21
 800d2bc:	fa06 f303 	lsl.w	r3, r6, r3
 800d2c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800d2c4:	ea43 0402 	orr.w	r4, r3, r2
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d0:	45c1      	cmp	r9, r8
 800d2d2:	bf2e      	itee	cs
 800d2d4:	2200      	movcs	r2, #0
 800d2d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d2da:	f1a7 0808 	subcc.w	r8, r7, #8
 800d2de:	f1b0 030b 	subs.w	r3, r0, #11
 800d2e2:	d016      	beq.n	800d312 <__b2d+0x9a>
 800d2e4:	f1c3 0720 	rsb	r7, r3, #32
 800d2e8:	fa22 f107 	lsr.w	r1, r2, r7
 800d2ec:	45c8      	cmp	r8, r9
 800d2ee:	fa06 f603 	lsl.w	r6, r6, r3
 800d2f2:	ea46 0601 	orr.w	r6, r6, r1
 800d2f6:	bf94      	ite	ls
 800d2f8:	2100      	movls	r1, #0
 800d2fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d2fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d302:	fa02 f003 	lsl.w	r0, r2, r3
 800d306:	40f9      	lsrs	r1, r7
 800d308:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d30c:	ea40 0401 	orr.w	r4, r0, r1
 800d310:	e7da      	b.n	800d2c8 <__b2d+0x50>
 800d312:	4614      	mov	r4, r2
 800d314:	ea46 0501 	orr.w	r5, r6, r1
 800d318:	e7d6      	b.n	800d2c8 <__b2d+0x50>
 800d31a:	bf00      	nop
 800d31c:	3ff00000 	.word	0x3ff00000

0800d320 <__d2b>:
 800d320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d324:	2101      	movs	r1, #1
 800d326:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d32a:	4690      	mov	r8, r2
 800d32c:	461d      	mov	r5, r3
 800d32e:	f7ff fc0d 	bl	800cb4c <_Balloc>
 800d332:	4604      	mov	r4, r0
 800d334:	b930      	cbnz	r0, 800d344 <__d2b+0x24>
 800d336:	4602      	mov	r2, r0
 800d338:	f240 310a 	movw	r1, #778	; 0x30a
 800d33c:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <__d2b+0xb0>)
 800d33e:	4825      	ldr	r0, [pc, #148]	; (800d3d4 <__d2b+0xb4>)
 800d340:	f7fb fef8 	bl	8009134 <__assert_func>
 800d344:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d348:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d34c:	bb2d      	cbnz	r5, 800d39a <__d2b+0x7a>
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	f1b8 0300 	subs.w	r3, r8, #0
 800d354:	d026      	beq.n	800d3a4 <__d2b+0x84>
 800d356:	4668      	mov	r0, sp
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	f7ff fd0d 	bl	800cd78 <__lo0bits>
 800d35e:	9900      	ldr	r1, [sp, #0]
 800d360:	b1f0      	cbz	r0, 800d3a0 <__d2b+0x80>
 800d362:	9a01      	ldr	r2, [sp, #4]
 800d364:	f1c0 0320 	rsb	r3, r0, #32
 800d368:	fa02 f303 	lsl.w	r3, r2, r3
 800d36c:	430b      	orrs	r3, r1
 800d36e:	40c2      	lsrs	r2, r0
 800d370:	6163      	str	r3, [r4, #20]
 800d372:	9201      	str	r2, [sp, #4]
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bf14      	ite	ne
 800d37a:	2102      	movne	r1, #2
 800d37c:	2101      	moveq	r1, #1
 800d37e:	61a3      	str	r3, [r4, #24]
 800d380:	6121      	str	r1, [r4, #16]
 800d382:	b1c5      	cbz	r5, 800d3b6 <__d2b+0x96>
 800d384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d388:	4405      	add	r5, r0
 800d38a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d38e:	603d      	str	r5, [r7, #0]
 800d390:	6030      	str	r0, [r6, #0]
 800d392:	4620      	mov	r0, r4
 800d394:	b002      	add	sp, #8
 800d396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d39e:	e7d6      	b.n	800d34e <__d2b+0x2e>
 800d3a0:	6161      	str	r1, [r4, #20]
 800d3a2:	e7e7      	b.n	800d374 <__d2b+0x54>
 800d3a4:	a801      	add	r0, sp, #4
 800d3a6:	f7ff fce7 	bl	800cd78 <__lo0bits>
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	9b01      	ldr	r3, [sp, #4]
 800d3ae:	6121      	str	r1, [r4, #16]
 800d3b0:	6163      	str	r3, [r4, #20]
 800d3b2:	3020      	adds	r0, #32
 800d3b4:	e7e5      	b.n	800d382 <__d2b+0x62>
 800d3b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d3ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3be:	6038      	str	r0, [r7, #0]
 800d3c0:	6918      	ldr	r0, [r3, #16]
 800d3c2:	f7ff fcb9 	bl	800cd38 <__hi0bits>
 800d3c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d3ca:	6031      	str	r1, [r6, #0]
 800d3cc:	e7e1      	b.n	800d392 <__d2b+0x72>
 800d3ce:	bf00      	nop
 800d3d0:	08010f94 	.word	0x08010f94
 800d3d4:	08011088 	.word	0x08011088

0800d3d8 <__ratio>:
 800d3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	4688      	mov	r8, r1
 800d3de:	4669      	mov	r1, sp
 800d3e0:	4681      	mov	r9, r0
 800d3e2:	f7ff ff49 	bl	800d278 <__b2d>
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	a901      	add	r1, sp, #4
 800d3f0:	f7ff ff42 	bl	800d278 <__b2d>
 800d3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3fc:	468b      	mov	fp, r1
 800d3fe:	eba3 0c02 	sub.w	ip, r3, r2
 800d402:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d406:	1a9b      	subs	r3, r3, r2
 800d408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bfd5      	itete	le
 800d410:	460a      	movle	r2, r1
 800d412:	462a      	movgt	r2, r5
 800d414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d418:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d41c:	bfd8      	it	le
 800d41e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d422:	465b      	mov	r3, fp
 800d424:	4602      	mov	r2, r0
 800d426:	4639      	mov	r1, r7
 800d428:	4620      	mov	r0, r4
 800d42a:	f7f3 f97f 	bl	800072c <__aeabi_ddiv>
 800d42e:	b003      	add	sp, #12
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d434 <__copybits>:
 800d434:	3901      	subs	r1, #1
 800d436:	b570      	push	{r4, r5, r6, lr}
 800d438:	1149      	asrs	r1, r1, #5
 800d43a:	6914      	ldr	r4, [r2, #16]
 800d43c:	3101      	adds	r1, #1
 800d43e:	f102 0314 	add.w	r3, r2, #20
 800d442:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d446:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d44a:	1f05      	subs	r5, r0, #4
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	d30c      	bcc.n	800d46a <__copybits+0x36>
 800d450:	1aa3      	subs	r3, r4, r2
 800d452:	3b11      	subs	r3, #17
 800d454:	f023 0303 	bic.w	r3, r3, #3
 800d458:	3211      	adds	r2, #17
 800d45a:	42a2      	cmp	r2, r4
 800d45c:	bf88      	it	hi
 800d45e:	2300      	movhi	r3, #0
 800d460:	4418      	add	r0, r3
 800d462:	2300      	movs	r3, #0
 800d464:	4288      	cmp	r0, r1
 800d466:	d305      	bcc.n	800d474 <__copybits+0x40>
 800d468:	bd70      	pop	{r4, r5, r6, pc}
 800d46a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d46e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d472:	e7eb      	b.n	800d44c <__copybits+0x18>
 800d474:	f840 3b04 	str.w	r3, [r0], #4
 800d478:	e7f4      	b.n	800d464 <__copybits+0x30>

0800d47a <__any_on>:
 800d47a:	f100 0214 	add.w	r2, r0, #20
 800d47e:	6900      	ldr	r0, [r0, #16]
 800d480:	114b      	asrs	r3, r1, #5
 800d482:	4298      	cmp	r0, r3
 800d484:	b510      	push	{r4, lr}
 800d486:	db11      	blt.n	800d4ac <__any_on+0x32>
 800d488:	dd0a      	ble.n	800d4a0 <__any_on+0x26>
 800d48a:	f011 011f 	ands.w	r1, r1, #31
 800d48e:	d007      	beq.n	800d4a0 <__any_on+0x26>
 800d490:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d494:	fa24 f001 	lsr.w	r0, r4, r1
 800d498:	fa00 f101 	lsl.w	r1, r0, r1
 800d49c:	428c      	cmp	r4, r1
 800d49e:	d10b      	bne.n	800d4b8 <__any_on+0x3e>
 800d4a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d803      	bhi.n	800d4b0 <__any_on+0x36>
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	bd10      	pop	{r4, pc}
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	e7f7      	b.n	800d4a0 <__any_on+0x26>
 800d4b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	d0f5      	beq.n	800d4a4 <__any_on+0x2a>
 800d4b8:	2001      	movs	r0, #1
 800d4ba:	e7f6      	b.n	800d4aa <__any_on+0x30>

0800d4bc <_calloc_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	fb02 f501 	mul.w	r5, r2, r1
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	f7fb fefa 	bl	80092bc <_malloc_r>
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	b118      	cbz	r0, 800d4d4 <_calloc_r+0x18>
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	f7fb fea0 	bl	8009214 <memset>
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}

0800d4d8 <_realloc_r>:
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	4607      	mov	r7, r0
 800d4dc:	4614      	mov	r4, r2
 800d4de:	460e      	mov	r6, r1
 800d4e0:	b921      	cbnz	r1, 800d4ec <_realloc_r+0x14>
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4e8:	f7fb bee8 	b.w	80092bc <_malloc_r>
 800d4ec:	b922      	cbnz	r2, 800d4f8 <_realloc_r+0x20>
 800d4ee:	f7fb fe99 	bl	8009224 <_free_r>
 800d4f2:	4625      	mov	r5, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f8:	f000 fa72 	bl	800d9e0 <_malloc_usable_size_r>
 800d4fc:	42a0      	cmp	r0, r4
 800d4fe:	d20f      	bcs.n	800d520 <_realloc_r+0x48>
 800d500:	4621      	mov	r1, r4
 800d502:	4638      	mov	r0, r7
 800d504:	f7fb feda 	bl	80092bc <_malloc_r>
 800d508:	4605      	mov	r5, r0
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d0f2      	beq.n	800d4f4 <_realloc_r+0x1c>
 800d50e:	4631      	mov	r1, r6
 800d510:	4622      	mov	r2, r4
 800d512:	f7fb fe71 	bl	80091f8 <memcpy>
 800d516:	4631      	mov	r1, r6
 800d518:	4638      	mov	r0, r7
 800d51a:	f7fb fe83 	bl	8009224 <_free_r>
 800d51e:	e7e9      	b.n	800d4f4 <_realloc_r+0x1c>
 800d520:	4635      	mov	r5, r6
 800d522:	e7e7      	b.n	800d4f4 <_realloc_r+0x1c>

0800d524 <__ssputs_r>:
 800d524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d528:	688e      	ldr	r6, [r1, #8]
 800d52a:	4682      	mov	sl, r0
 800d52c:	429e      	cmp	r6, r3
 800d52e:	460c      	mov	r4, r1
 800d530:	4690      	mov	r8, r2
 800d532:	461f      	mov	r7, r3
 800d534:	d838      	bhi.n	800d5a8 <__ssputs_r+0x84>
 800d536:	898a      	ldrh	r2, [r1, #12]
 800d538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d53c:	d032      	beq.n	800d5a4 <__ssputs_r+0x80>
 800d53e:	6825      	ldr	r5, [r4, #0]
 800d540:	6909      	ldr	r1, [r1, #16]
 800d542:	3301      	adds	r3, #1
 800d544:	eba5 0901 	sub.w	r9, r5, r1
 800d548:	6965      	ldr	r5, [r4, #20]
 800d54a:	444b      	add	r3, r9
 800d54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d554:	106d      	asrs	r5, r5, #1
 800d556:	429d      	cmp	r5, r3
 800d558:	bf38      	it	cc
 800d55a:	461d      	movcc	r5, r3
 800d55c:	0553      	lsls	r3, r2, #21
 800d55e:	d531      	bpl.n	800d5c4 <__ssputs_r+0xa0>
 800d560:	4629      	mov	r1, r5
 800d562:	f7fb feab 	bl	80092bc <_malloc_r>
 800d566:	4606      	mov	r6, r0
 800d568:	b950      	cbnz	r0, 800d580 <__ssputs_r+0x5c>
 800d56a:	230c      	movs	r3, #12
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	f8ca 3000 	str.w	r3, [sl]
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d580:	464a      	mov	r2, r9
 800d582:	6921      	ldr	r1, [r4, #16]
 800d584:	f7fb fe38 	bl	80091f8 <memcpy>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	6126      	str	r6, [r4, #16]
 800d596:	444e      	add	r6, r9
 800d598:	6026      	str	r6, [r4, #0]
 800d59a:	463e      	mov	r6, r7
 800d59c:	6165      	str	r5, [r4, #20]
 800d59e:	eba5 0509 	sub.w	r5, r5, r9
 800d5a2:	60a5      	str	r5, [r4, #8]
 800d5a4:	42be      	cmp	r6, r7
 800d5a6:	d900      	bls.n	800d5aa <__ssputs_r+0x86>
 800d5a8:	463e      	mov	r6, r7
 800d5aa:	4632      	mov	r2, r6
 800d5ac:	4641      	mov	r1, r8
 800d5ae:	6820      	ldr	r0, [r4, #0]
 800d5b0:	f7ff faa6 	bl	800cb00 <memmove>
 800d5b4:	68a3      	ldr	r3, [r4, #8]
 800d5b6:	6822      	ldr	r2, [r4, #0]
 800d5b8:	1b9b      	subs	r3, r3, r6
 800d5ba:	4432      	add	r2, r6
 800d5bc:	2000      	movs	r0, #0
 800d5be:	60a3      	str	r3, [r4, #8]
 800d5c0:	6022      	str	r2, [r4, #0]
 800d5c2:	e7db      	b.n	800d57c <__ssputs_r+0x58>
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	f7ff ff87 	bl	800d4d8 <_realloc_r>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d1e1      	bne.n	800d594 <__ssputs_r+0x70>
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	6921      	ldr	r1, [r4, #16]
 800d5d4:	f7fb fe26 	bl	8009224 <_free_r>
 800d5d8:	e7c7      	b.n	800d56a <__ssputs_r+0x46>
	...

0800d5dc <_svfiprintf_r>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	4698      	mov	r8, r3
 800d5e2:	898b      	ldrh	r3, [r1, #12]
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	061b      	lsls	r3, r3, #24
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	4614      	mov	r4, r2
 800d5ec:	b09d      	sub	sp, #116	; 0x74
 800d5ee:	d50e      	bpl.n	800d60e <_svfiprintf_r+0x32>
 800d5f0:	690b      	ldr	r3, [r1, #16]
 800d5f2:	b963      	cbnz	r3, 800d60e <_svfiprintf_r+0x32>
 800d5f4:	2140      	movs	r1, #64	; 0x40
 800d5f6:	f7fb fe61 	bl	80092bc <_malloc_r>
 800d5fa:	6028      	str	r0, [r5, #0]
 800d5fc:	6128      	str	r0, [r5, #16]
 800d5fe:	b920      	cbnz	r0, 800d60a <_svfiprintf_r+0x2e>
 800d600:	230c      	movs	r3, #12
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	e0d1      	b.n	800d7ae <_svfiprintf_r+0x1d2>
 800d60a:	2340      	movs	r3, #64	; 0x40
 800d60c:	616b      	str	r3, [r5, #20]
 800d60e:	2300      	movs	r3, #0
 800d610:	9309      	str	r3, [sp, #36]	; 0x24
 800d612:	2320      	movs	r3, #32
 800d614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d618:	2330      	movs	r3, #48	; 0x30
 800d61a:	f04f 0901 	mov.w	r9, #1
 800d61e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7c8 <_svfiprintf_r+0x1ec>
 800d626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d62a:	4623      	mov	r3, r4
 800d62c:	469a      	mov	sl, r3
 800d62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d632:	b10a      	cbz	r2, 800d638 <_svfiprintf_r+0x5c>
 800d634:	2a25      	cmp	r2, #37	; 0x25
 800d636:	d1f9      	bne.n	800d62c <_svfiprintf_r+0x50>
 800d638:	ebba 0b04 	subs.w	fp, sl, r4
 800d63c:	d00b      	beq.n	800d656 <_svfiprintf_r+0x7a>
 800d63e:	465b      	mov	r3, fp
 800d640:	4622      	mov	r2, r4
 800d642:	4629      	mov	r1, r5
 800d644:	4638      	mov	r0, r7
 800d646:	f7ff ff6d 	bl	800d524 <__ssputs_r>
 800d64a:	3001      	adds	r0, #1
 800d64c:	f000 80aa 	beq.w	800d7a4 <_svfiprintf_r+0x1c8>
 800d650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d652:	445a      	add	r2, fp
 800d654:	9209      	str	r2, [sp, #36]	; 0x24
 800d656:	f89a 3000 	ldrb.w	r3, [sl]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80a2 	beq.w	800d7a4 <_svfiprintf_r+0x1c8>
 800d660:	2300      	movs	r3, #0
 800d662:	f04f 32ff 	mov.w	r2, #4294967295
 800d666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d66a:	f10a 0a01 	add.w	sl, sl, #1
 800d66e:	9304      	str	r3, [sp, #16]
 800d670:	9307      	str	r3, [sp, #28]
 800d672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d676:	931a      	str	r3, [sp, #104]	; 0x68
 800d678:	4654      	mov	r4, sl
 800d67a:	2205      	movs	r2, #5
 800d67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d680:	4851      	ldr	r0, [pc, #324]	; (800d7c8 <_svfiprintf_r+0x1ec>)
 800d682:	f7ff fa2f 	bl	800cae4 <memchr>
 800d686:	9a04      	ldr	r2, [sp, #16]
 800d688:	b9d8      	cbnz	r0, 800d6c2 <_svfiprintf_r+0xe6>
 800d68a:	06d0      	lsls	r0, r2, #27
 800d68c:	bf44      	itt	mi
 800d68e:	2320      	movmi	r3, #32
 800d690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d694:	0711      	lsls	r1, r2, #28
 800d696:	bf44      	itt	mi
 800d698:	232b      	movmi	r3, #43	; 0x2b
 800d69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69e:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a4:	d015      	beq.n	800d6d2 <_svfiprintf_r+0xf6>
 800d6a6:	4654      	mov	r4, sl
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f04f 0c0a 	mov.w	ip, #10
 800d6ae:	9a07      	ldr	r2, [sp, #28]
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b6:	3b30      	subs	r3, #48	; 0x30
 800d6b8:	2b09      	cmp	r3, #9
 800d6ba:	d94e      	bls.n	800d75a <_svfiprintf_r+0x17e>
 800d6bc:	b1b0      	cbz	r0, 800d6ec <_svfiprintf_r+0x110>
 800d6be:	9207      	str	r2, [sp, #28]
 800d6c0:	e014      	b.n	800d6ec <_svfiprintf_r+0x110>
 800d6c2:	eba0 0308 	sub.w	r3, r0, r8
 800d6c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	46a2      	mov	sl, r4
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	e7d2      	b.n	800d678 <_svfiprintf_r+0x9c>
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	1d19      	adds	r1, r3, #4
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	9103      	str	r1, [sp, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bfbb      	ittet	lt
 800d6de:	425b      	neglt	r3, r3
 800d6e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e4:	9307      	strge	r3, [sp, #28]
 800d6e6:	9307      	strlt	r3, [sp, #28]
 800d6e8:	bfb8      	it	lt
 800d6ea:	9204      	strlt	r2, [sp, #16]
 800d6ec:	7823      	ldrb	r3, [r4, #0]
 800d6ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d6f0:	d10c      	bne.n	800d70c <_svfiprintf_r+0x130>
 800d6f2:	7863      	ldrb	r3, [r4, #1]
 800d6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f6:	d135      	bne.n	800d764 <_svfiprintf_r+0x188>
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	3402      	adds	r4, #2
 800d6fc:	1d1a      	adds	r2, r3, #4
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	9203      	str	r2, [sp, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	bfb8      	it	lt
 800d706:	f04f 33ff 	movlt.w	r3, #4294967295
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7d8 <_svfiprintf_r+0x1fc>
 800d710:	2203      	movs	r2, #3
 800d712:	4650      	mov	r0, sl
 800d714:	7821      	ldrb	r1, [r4, #0]
 800d716:	f7ff f9e5 	bl	800cae4 <memchr>
 800d71a:	b140      	cbz	r0, 800d72e <_svfiprintf_r+0x152>
 800d71c:	2340      	movs	r3, #64	; 0x40
 800d71e:	eba0 000a 	sub.w	r0, r0, sl
 800d722:	fa03 f000 	lsl.w	r0, r3, r0
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	3401      	adds	r4, #1
 800d72a:	4303      	orrs	r3, r0
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d732:	2206      	movs	r2, #6
 800d734:	4825      	ldr	r0, [pc, #148]	; (800d7cc <_svfiprintf_r+0x1f0>)
 800d736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d73a:	f7ff f9d3 	bl	800cae4 <memchr>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d038      	beq.n	800d7b4 <_svfiprintf_r+0x1d8>
 800d742:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <_svfiprintf_r+0x1f4>)
 800d744:	bb1b      	cbnz	r3, 800d78e <_svfiprintf_r+0x1b2>
 800d746:	9b03      	ldr	r3, [sp, #12]
 800d748:	3307      	adds	r3, #7
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	3308      	adds	r3, #8
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d754:	4433      	add	r3, r6
 800d756:	9309      	str	r3, [sp, #36]	; 0x24
 800d758:	e767      	b.n	800d62a <_svfiprintf_r+0x4e>
 800d75a:	460c      	mov	r4, r1
 800d75c:	2001      	movs	r0, #1
 800d75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d762:	e7a5      	b.n	800d6b0 <_svfiprintf_r+0xd4>
 800d764:	2300      	movs	r3, #0
 800d766:	f04f 0c0a 	mov.w	ip, #10
 800d76a:	4619      	mov	r1, r3
 800d76c:	3401      	adds	r4, #1
 800d76e:	9305      	str	r3, [sp, #20]
 800d770:	4620      	mov	r0, r4
 800d772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d776:	3a30      	subs	r2, #48	; 0x30
 800d778:	2a09      	cmp	r2, #9
 800d77a:	d903      	bls.n	800d784 <_svfiprintf_r+0x1a8>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d0c5      	beq.n	800d70c <_svfiprintf_r+0x130>
 800d780:	9105      	str	r1, [sp, #20]
 800d782:	e7c3      	b.n	800d70c <_svfiprintf_r+0x130>
 800d784:	4604      	mov	r4, r0
 800d786:	2301      	movs	r3, #1
 800d788:	fb0c 2101 	mla	r1, ip, r1, r2
 800d78c:	e7f0      	b.n	800d770 <_svfiprintf_r+0x194>
 800d78e:	ab03      	add	r3, sp, #12
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	462a      	mov	r2, r5
 800d794:	4638      	mov	r0, r7
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <_svfiprintf_r+0x1f8>)
 800d798:	a904      	add	r1, sp, #16
 800d79a:	f7fb ffdf 	bl	800975c <_printf_float>
 800d79e:	1c42      	adds	r2, r0, #1
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	d1d6      	bne.n	800d752 <_svfiprintf_r+0x176>
 800d7a4:	89ab      	ldrh	r3, [r5, #12]
 800d7a6:	065b      	lsls	r3, r3, #25
 800d7a8:	f53f af2c 	bmi.w	800d604 <_svfiprintf_r+0x28>
 800d7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7ae:	b01d      	add	sp, #116	; 0x74
 800d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <_svfiprintf_r+0x1f8>)
 800d7be:	a904      	add	r1, sp, #16
 800d7c0:	f7fc fa68 	bl	8009c94 <_printf_i>
 800d7c4:	e7eb      	b.n	800d79e <_svfiprintf_r+0x1c2>
 800d7c6:	bf00      	nop
 800d7c8:	08010d74 	.word	0x08010d74
 800d7cc:	08010d7e 	.word	0x08010d7e
 800d7d0:	0800975d 	.word	0x0800975d
 800d7d4:	0800d525 	.word	0x0800d525
 800d7d8:	08010d7a 	.word	0x08010d7a

0800d7dc <nan>:
 800d7dc:	2000      	movs	r0, #0
 800d7de:	4901      	ldr	r1, [pc, #4]	; (800d7e4 <nan+0x8>)
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	7ff80000 	.word	0x7ff80000

0800d7e8 <_raise_r>:
 800d7e8:	291f      	cmp	r1, #31
 800d7ea:	b538      	push	{r3, r4, r5, lr}
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	d904      	bls.n	800d7fc <_raise_r+0x14>
 800d7f2:	2316      	movs	r3, #22
 800d7f4:	6003      	str	r3, [r0, #0]
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d7fe:	b112      	cbz	r2, 800d806 <_raise_r+0x1e>
 800d800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d804:	b94b      	cbnz	r3, 800d81a <_raise_r+0x32>
 800d806:	4620      	mov	r0, r4
 800d808:	f000 f830 	bl	800d86c <_getpid_r>
 800d80c:	462a      	mov	r2, r5
 800d80e:	4601      	mov	r1, r0
 800d810:	4620      	mov	r0, r4
 800d812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d816:	f000 b817 	b.w	800d848 <_kill_r>
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d00a      	beq.n	800d834 <_raise_r+0x4c>
 800d81e:	1c59      	adds	r1, r3, #1
 800d820:	d103      	bne.n	800d82a <_raise_r+0x42>
 800d822:	2316      	movs	r3, #22
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	2001      	movs	r0, #1
 800d828:	e7e7      	b.n	800d7fa <_raise_r+0x12>
 800d82a:	2400      	movs	r4, #0
 800d82c:	4628      	mov	r0, r5
 800d82e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d832:	4798      	blx	r3
 800d834:	2000      	movs	r0, #0
 800d836:	e7e0      	b.n	800d7fa <_raise_r+0x12>

0800d838 <raise>:
 800d838:	4b02      	ldr	r3, [pc, #8]	; (800d844 <raise+0xc>)
 800d83a:	4601      	mov	r1, r0
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	f7ff bfd3 	b.w	800d7e8 <_raise_r>
 800d842:	bf00      	nop
 800d844:	20000010 	.word	0x20000010

0800d848 <_kill_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	2300      	movs	r3, #0
 800d84c:	4d06      	ldr	r5, [pc, #24]	; (800d868 <_kill_r+0x20>)
 800d84e:	4604      	mov	r4, r0
 800d850:	4608      	mov	r0, r1
 800d852:	4611      	mov	r1, r2
 800d854:	602b      	str	r3, [r5, #0]
 800d856:	f7f7 ffd8 	bl	800580a <_kill>
 800d85a:	1c43      	adds	r3, r0, #1
 800d85c:	d102      	bne.n	800d864 <_kill_r+0x1c>
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	b103      	cbz	r3, 800d864 <_kill_r+0x1c>
 800d862:	6023      	str	r3, [r4, #0]
 800d864:	bd38      	pop	{r3, r4, r5, pc}
 800d866:	bf00      	nop
 800d868:	20001120 	.word	0x20001120

0800d86c <_getpid_r>:
 800d86c:	f7f7 bfc6 	b.w	80057fc <_getpid>

0800d870 <__sread>:
 800d870:	b510      	push	{r4, lr}
 800d872:	460c      	mov	r4, r1
 800d874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d878:	f000 f8ba 	bl	800d9f0 <_read_r>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	bfab      	itete	ge
 800d880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d882:	89a3      	ldrhlt	r3, [r4, #12]
 800d884:	181b      	addge	r3, r3, r0
 800d886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d88a:	bfac      	ite	ge
 800d88c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d88e:	81a3      	strhlt	r3, [r4, #12]
 800d890:	bd10      	pop	{r4, pc}

0800d892 <__swrite>:
 800d892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d896:	461f      	mov	r7, r3
 800d898:	898b      	ldrh	r3, [r1, #12]
 800d89a:	4605      	mov	r5, r0
 800d89c:	05db      	lsls	r3, r3, #23
 800d89e:	460c      	mov	r4, r1
 800d8a0:	4616      	mov	r6, r2
 800d8a2:	d505      	bpl.n	800d8b0 <__swrite+0x1e>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ac:	f000 f886 	bl	800d9bc <_lseek_r>
 800d8b0:	89a3      	ldrh	r3, [r4, #12]
 800d8b2:	4632      	mov	r2, r6
 800d8b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8b8:	81a3      	strh	r3, [r4, #12]
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	463b      	mov	r3, r7
 800d8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c6:	f000 b835 	b.w	800d934 <_write_r>

0800d8ca <__sseek>:
 800d8ca:	b510      	push	{r4, lr}
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d2:	f000 f873 	bl	800d9bc <_lseek_r>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	bf15      	itete	ne
 800d8dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8e6:	81a3      	strheq	r3, [r4, #12]
 800d8e8:	bf18      	it	ne
 800d8ea:	81a3      	strhne	r3, [r4, #12]
 800d8ec:	bd10      	pop	{r4, pc}

0800d8ee <__sclose>:
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 b831 	b.w	800d958 <_close_r>

0800d8f6 <strncmp>:
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	b16a      	cbz	r2, 800d916 <strncmp+0x20>
 800d8fa:	3901      	subs	r1, #1
 800d8fc:	1884      	adds	r4, r0, r2
 800d8fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d902:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d906:	4293      	cmp	r3, r2
 800d908:	d103      	bne.n	800d912 <strncmp+0x1c>
 800d90a:	42a0      	cmp	r0, r4
 800d90c:	d001      	beq.n	800d912 <strncmp+0x1c>
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1f5      	bne.n	800d8fe <strncmp+0x8>
 800d912:	1a98      	subs	r0, r3, r2
 800d914:	bd10      	pop	{r4, pc}
 800d916:	4610      	mov	r0, r2
 800d918:	e7fc      	b.n	800d914 <strncmp+0x1e>

0800d91a <__ascii_wctomb>:
 800d91a:	4603      	mov	r3, r0
 800d91c:	4608      	mov	r0, r1
 800d91e:	b141      	cbz	r1, 800d932 <__ascii_wctomb+0x18>
 800d920:	2aff      	cmp	r2, #255	; 0xff
 800d922:	d904      	bls.n	800d92e <__ascii_wctomb+0x14>
 800d924:	228a      	movs	r2, #138	; 0x8a
 800d926:	f04f 30ff 	mov.w	r0, #4294967295
 800d92a:	601a      	str	r2, [r3, #0]
 800d92c:	4770      	bx	lr
 800d92e:	2001      	movs	r0, #1
 800d930:	700a      	strb	r2, [r1, #0]
 800d932:	4770      	bx	lr

0800d934 <_write_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4604      	mov	r4, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	4611      	mov	r1, r2
 800d93c:	2200      	movs	r2, #0
 800d93e:	4d05      	ldr	r5, [pc, #20]	; (800d954 <_write_r+0x20>)
 800d940:	602a      	str	r2, [r5, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	f7f7 ff98 	bl	8005878 <_write>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_write_r+0x1e>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_write_r+0x1e>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	20001120 	.word	0x20001120

0800d958 <_close_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	2300      	movs	r3, #0
 800d95c:	4d05      	ldr	r5, [pc, #20]	; (800d974 <_close_r+0x1c>)
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f7 ffa4 	bl	80058b0 <_close>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_close_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_close_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	20001120 	.word	0x20001120

0800d978 <_fstat_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	2300      	movs	r3, #0
 800d97c:	4d06      	ldr	r5, [pc, #24]	; (800d998 <_fstat_r+0x20>)
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f7 ff9e 	bl	80058c6 <_fstat>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_fstat_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_fstat_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	20001120 	.word	0x20001120

0800d99c <_isatty_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	2300      	movs	r3, #0
 800d9a0:	4d05      	ldr	r5, [pc, #20]	; (800d9b8 <_isatty_r+0x1c>)
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	f7f7 ff9c 	bl	80058e4 <_isatty>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_isatty_r+0x1a>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_isatty_r+0x1a>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20001120 	.word	0x20001120

0800d9bc <_lseek_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	4d05      	ldr	r5, [pc, #20]	; (800d9dc <_lseek_r+0x20>)
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f7 ff94 	bl	80058f8 <_lseek>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_lseek_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_lseek_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	20001120 	.word	0x20001120

0800d9e0 <_malloc_usable_size_r>:
 800d9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e4:	1f18      	subs	r0, r3, #4
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	bfbc      	itt	lt
 800d9ea:	580b      	ldrlt	r3, [r1, r0]
 800d9ec:	18c0      	addlt	r0, r0, r3
 800d9ee:	4770      	bx	lr

0800d9f0 <_read_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4d05      	ldr	r5, [pc, #20]	; (800da10 <_read_r+0x20>)
 800d9fc:	602a      	str	r2, [r5, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	f7f7 ff1d 	bl	800583e <_read>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_read_r+0x1e>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_read_r+0x1e>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20001120 	.word	0x20001120

0800da14 <cos>:
 800da14:	b530      	push	{r4, r5, lr}
 800da16:	4a1e      	ldr	r2, [pc, #120]	; (800da90 <cos+0x7c>)
 800da18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da1c:	4293      	cmp	r3, r2
 800da1e:	b087      	sub	sp, #28
 800da20:	dc04      	bgt.n	800da2c <cos+0x18>
 800da22:	2200      	movs	r2, #0
 800da24:	2300      	movs	r3, #0
 800da26:	f001 f8f3 	bl	800ec10 <__kernel_cos>
 800da2a:	e006      	b.n	800da3a <cos+0x26>
 800da2c:	4a19      	ldr	r2, [pc, #100]	; (800da94 <cos+0x80>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	dd05      	ble.n	800da3e <cos+0x2a>
 800da32:	4602      	mov	r2, r0
 800da34:	460b      	mov	r3, r1
 800da36:	f7f2 fb97 	bl	8000168 <__aeabi_dsub>
 800da3a:	b007      	add	sp, #28
 800da3c:	bd30      	pop	{r4, r5, pc}
 800da3e:	aa02      	add	r2, sp, #8
 800da40:	f000 fb56 	bl	800e0f0 <__ieee754_rem_pio2>
 800da44:	f000 0003 	and.w	r0, r0, #3
 800da48:	2801      	cmp	r0, #1
 800da4a:	d007      	beq.n	800da5c <cos+0x48>
 800da4c:	2802      	cmp	r0, #2
 800da4e:	d00f      	beq.n	800da70 <cos+0x5c>
 800da50:	b9a8      	cbnz	r0, 800da7e <cos+0x6a>
 800da52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da5a:	e7e4      	b.n	800da26 <cos+0x12>
 800da5c:	9000      	str	r0, [sp, #0]
 800da5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da66:	f001 fcdb 	bl	800f420 <__kernel_sin>
 800da6a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800da6e:	e7e4      	b.n	800da3a <cos+0x26>
 800da70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da78:	f001 f8ca 	bl	800ec10 <__kernel_cos>
 800da7c:	e7f5      	b.n	800da6a <cos+0x56>
 800da7e:	2301      	movs	r3, #1
 800da80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da8a:	f001 fcc9 	bl	800f420 <__kernel_sin>
 800da8e:	e7d4      	b.n	800da3a <cos+0x26>
 800da90:	3fe921fb 	.word	0x3fe921fb
 800da94:	7fefffff 	.word	0x7fefffff

0800da98 <sin>:
 800da98:	b530      	push	{r4, r5, lr}
 800da9a:	4a20      	ldr	r2, [pc, #128]	; (800db1c <sin+0x84>)
 800da9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800daa0:	4293      	cmp	r3, r2
 800daa2:	b087      	sub	sp, #28
 800daa4:	dc06      	bgt.n	800dab4 <sin+0x1c>
 800daa6:	2300      	movs	r3, #0
 800daa8:	2200      	movs	r2, #0
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	2300      	movs	r3, #0
 800daae:	f001 fcb7 	bl	800f420 <__kernel_sin>
 800dab2:	e006      	b.n	800dac2 <sin+0x2a>
 800dab4:	4a1a      	ldr	r2, [pc, #104]	; (800db20 <sin+0x88>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	dd05      	ble.n	800dac6 <sin+0x2e>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	f7f2 fb53 	bl	8000168 <__aeabi_dsub>
 800dac2:	b007      	add	sp, #28
 800dac4:	bd30      	pop	{r4, r5, pc}
 800dac6:	aa02      	add	r2, sp, #8
 800dac8:	f000 fb12 	bl	800e0f0 <__ieee754_rem_pio2>
 800dacc:	f000 0003 	and.w	r0, r0, #3
 800dad0:	2801      	cmp	r0, #1
 800dad2:	d009      	beq.n	800dae8 <sin+0x50>
 800dad4:	2802      	cmp	r0, #2
 800dad6:	d00e      	beq.n	800daf6 <sin+0x5e>
 800dad8:	b9c0      	cbnz	r0, 800db0c <sin+0x74>
 800dada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dade:	2301      	movs	r3, #1
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dae6:	e7e2      	b.n	800daae <sin+0x16>
 800dae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf0:	f001 f88e 	bl	800ec10 <__kernel_cos>
 800daf4:	e7e5      	b.n	800dac2 <sin+0x2a>
 800daf6:	2301      	movs	r3, #1
 800daf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db02:	f001 fc8d 	bl	800f420 <__kernel_sin>
 800db06:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800db0a:	e7da      	b.n	800dac2 <sin+0x2a>
 800db0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db14:	f001 f87c 	bl	800ec10 <__kernel_cos>
 800db18:	e7f5      	b.n	800db06 <sin+0x6e>
 800db1a:	bf00      	nop
 800db1c:	3fe921fb 	.word	0x3fe921fb
 800db20:	7fefffff 	.word	0x7fefffff

0800db24 <atanf>:
 800db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db28:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800db2c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800db30:	4604      	mov	r4, r0
 800db32:	4680      	mov	r8, r0
 800db34:	db0e      	blt.n	800db54 <atanf+0x30>
 800db36:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800db3a:	dd04      	ble.n	800db46 <atanf+0x22>
 800db3c:	4601      	mov	r1, r0
 800db3e:	f7f3 f819 	bl	8000b74 <__addsf3>
 800db42:	4604      	mov	r4, r0
 800db44:	e003      	b.n	800db4e <atanf+0x2a>
 800db46:	2800      	cmp	r0, #0
 800db48:	f300 80ce 	bgt.w	800dce8 <atanf+0x1c4>
 800db4c:	4c67      	ldr	r4, [pc, #412]	; (800dcec <atanf+0x1c8>)
 800db4e:	4620      	mov	r0, r4
 800db50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db54:	4b66      	ldr	r3, [pc, #408]	; (800dcf0 <atanf+0x1cc>)
 800db56:	429d      	cmp	r5, r3
 800db58:	dc0e      	bgt.n	800db78 <atanf+0x54>
 800db5a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800db5e:	da08      	bge.n	800db72 <atanf+0x4e>
 800db60:	4964      	ldr	r1, [pc, #400]	; (800dcf4 <atanf+0x1d0>)
 800db62:	f7f3 f807 	bl	8000b74 <__addsf3>
 800db66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db6a:	f7f3 fac7 	bl	80010fc <__aeabi_fcmpgt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d1ed      	bne.n	800db4e <atanf+0x2a>
 800db72:	f04f 36ff 	mov.w	r6, #4294967295
 800db76:	e01c      	b.n	800dbb2 <atanf+0x8e>
 800db78:	f000 f914 	bl	800dda4 <fabsf>
 800db7c:	4b5e      	ldr	r3, [pc, #376]	; (800dcf8 <atanf+0x1d4>)
 800db7e:	4604      	mov	r4, r0
 800db80:	429d      	cmp	r5, r3
 800db82:	dc7c      	bgt.n	800dc7e <atanf+0x15a>
 800db84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800db88:	429d      	cmp	r5, r3
 800db8a:	dc67      	bgt.n	800dc5c <atanf+0x138>
 800db8c:	4601      	mov	r1, r0
 800db8e:	f7f2 fff1 	bl	8000b74 <__addsf3>
 800db92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800db96:	f7f2 ffeb 	bl	8000b70 <__aeabi_fsub>
 800db9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800db9e:	4605      	mov	r5, r0
 800dba0:	4620      	mov	r0, r4
 800dba2:	f7f2 ffe7 	bl	8000b74 <__addsf3>
 800dba6:	4601      	mov	r1, r0
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f7f3 f99f 	bl	8000eec <__aeabi_fdiv>
 800dbae:	2600      	movs	r6, #0
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	4621      	mov	r1, r4
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7f3 f8e5 	bl	8000d84 <__aeabi_fmul>
 800dbba:	4601      	mov	r1, r0
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	f7f3 f8e1 	bl	8000d84 <__aeabi_fmul>
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	494d      	ldr	r1, [pc, #308]	; (800dcfc <atanf+0x1d8>)
 800dbc6:	f7f3 f8dd 	bl	8000d84 <__aeabi_fmul>
 800dbca:	494d      	ldr	r1, [pc, #308]	; (800dd00 <atanf+0x1dc>)
 800dbcc:	f7f2 ffd2 	bl	8000b74 <__addsf3>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f3 f8d7 	bl	8000d84 <__aeabi_fmul>
 800dbd6:	494b      	ldr	r1, [pc, #300]	; (800dd04 <atanf+0x1e0>)
 800dbd8:	f7f2 ffcc 	bl	8000b74 <__addsf3>
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f3 f8d1 	bl	8000d84 <__aeabi_fmul>
 800dbe2:	4949      	ldr	r1, [pc, #292]	; (800dd08 <atanf+0x1e4>)
 800dbe4:	f7f2 ffc6 	bl	8000b74 <__addsf3>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f3 f8cb 	bl	8000d84 <__aeabi_fmul>
 800dbee:	4947      	ldr	r1, [pc, #284]	; (800dd0c <atanf+0x1e8>)
 800dbf0:	f7f2 ffc0 	bl	8000b74 <__addsf3>
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	f7f3 f8c5 	bl	8000d84 <__aeabi_fmul>
 800dbfa:	4945      	ldr	r1, [pc, #276]	; (800dd10 <atanf+0x1ec>)
 800dbfc:	f7f2 ffba 	bl	8000b74 <__addsf3>
 800dc00:	4639      	mov	r1, r7
 800dc02:	f7f3 f8bf 	bl	8000d84 <__aeabi_fmul>
 800dc06:	4943      	ldr	r1, [pc, #268]	; (800dd14 <atanf+0x1f0>)
 800dc08:	4607      	mov	r7, r0
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f7f3 f8ba 	bl	8000d84 <__aeabi_fmul>
 800dc10:	4941      	ldr	r1, [pc, #260]	; (800dd18 <atanf+0x1f4>)
 800dc12:	f7f2 ffad 	bl	8000b70 <__aeabi_fsub>
 800dc16:	4629      	mov	r1, r5
 800dc18:	f7f3 f8b4 	bl	8000d84 <__aeabi_fmul>
 800dc1c:	493f      	ldr	r1, [pc, #252]	; (800dd1c <atanf+0x1f8>)
 800dc1e:	f7f2 ffa7 	bl	8000b70 <__aeabi_fsub>
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f3 f8ae 	bl	8000d84 <__aeabi_fmul>
 800dc28:	493d      	ldr	r1, [pc, #244]	; (800dd20 <atanf+0x1fc>)
 800dc2a:	f7f2 ffa1 	bl	8000b70 <__aeabi_fsub>
 800dc2e:	4629      	mov	r1, r5
 800dc30:	f7f3 f8a8 	bl	8000d84 <__aeabi_fmul>
 800dc34:	493b      	ldr	r1, [pc, #236]	; (800dd24 <atanf+0x200>)
 800dc36:	f7f2 ff9b 	bl	8000b70 <__aeabi_fsub>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f3 f8a2 	bl	8000d84 <__aeabi_fmul>
 800dc40:	4601      	mov	r1, r0
 800dc42:	4638      	mov	r0, r7
 800dc44:	f7f2 ff96 	bl	8000b74 <__addsf3>
 800dc48:	4621      	mov	r1, r4
 800dc4a:	f7f3 f89b 	bl	8000d84 <__aeabi_fmul>
 800dc4e:	1c73      	adds	r3, r6, #1
 800dc50:	4601      	mov	r1, r0
 800dc52:	d133      	bne.n	800dcbc <atanf+0x198>
 800dc54:	4620      	mov	r0, r4
 800dc56:	f7f2 ff8b 	bl	8000b70 <__aeabi_fsub>
 800dc5a:	e772      	b.n	800db42 <atanf+0x1e>
 800dc5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc60:	f7f2 ff86 	bl	8000b70 <__aeabi_fsub>
 800dc64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc68:	4605      	mov	r5, r0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7f2 ff82 	bl	8000b74 <__addsf3>
 800dc70:	4601      	mov	r1, r0
 800dc72:	4628      	mov	r0, r5
 800dc74:	f7f3 f93a 	bl	8000eec <__aeabi_fdiv>
 800dc78:	2601      	movs	r6, #1
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	e799      	b.n	800dbb2 <atanf+0x8e>
 800dc7e:	4b2a      	ldr	r3, [pc, #168]	; (800dd28 <atanf+0x204>)
 800dc80:	429d      	cmp	r5, r3
 800dc82:	dc14      	bgt.n	800dcae <atanf+0x18a>
 800dc84:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dc88:	f7f2 ff72 	bl	8000b70 <__aeabi_fsub>
 800dc8c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dc90:	4605      	mov	r5, r0
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7f3 f876 	bl	8000d84 <__aeabi_fmul>
 800dc98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dc9c:	f7f2 ff6a 	bl	8000b74 <__addsf3>
 800dca0:	4601      	mov	r1, r0
 800dca2:	4628      	mov	r0, r5
 800dca4:	f7f3 f922 	bl	8000eec <__aeabi_fdiv>
 800dca8:	2602      	movs	r6, #2
 800dcaa:	4604      	mov	r4, r0
 800dcac:	e781      	b.n	800dbb2 <atanf+0x8e>
 800dcae:	4601      	mov	r1, r0
 800dcb0:	481e      	ldr	r0, [pc, #120]	; (800dd2c <atanf+0x208>)
 800dcb2:	f7f3 f91b 	bl	8000eec <__aeabi_fdiv>
 800dcb6:	2603      	movs	r6, #3
 800dcb8:	4604      	mov	r4, r0
 800dcba:	e77a      	b.n	800dbb2 <atanf+0x8e>
 800dcbc:	4b1c      	ldr	r3, [pc, #112]	; (800dd30 <atanf+0x20c>)
 800dcbe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800dcc2:	f7f2 ff55 	bl	8000b70 <__aeabi_fsub>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	f7f2 ff52 	bl	8000b70 <__aeabi_fsub>
 800dccc:	4b19      	ldr	r3, [pc, #100]	; (800dd34 <atanf+0x210>)
 800dcce:	4601      	mov	r1, r0
 800dcd0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dcd4:	f7f2 ff4c 	bl	8000b70 <__aeabi_fsub>
 800dcd8:	f1b8 0f00 	cmp.w	r8, #0
 800dcdc:	4604      	mov	r4, r0
 800dcde:	f6bf af36 	bge.w	800db4e <atanf+0x2a>
 800dce2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dce6:	e72c      	b.n	800db42 <atanf+0x1e>
 800dce8:	4c13      	ldr	r4, [pc, #76]	; (800dd38 <atanf+0x214>)
 800dcea:	e730      	b.n	800db4e <atanf+0x2a>
 800dcec:	bfc90fdb 	.word	0xbfc90fdb
 800dcf0:	3edfffff 	.word	0x3edfffff
 800dcf4:	7149f2ca 	.word	0x7149f2ca
 800dcf8:	3f97ffff 	.word	0x3f97ffff
 800dcfc:	3c8569d7 	.word	0x3c8569d7
 800dd00:	3d4bda59 	.word	0x3d4bda59
 800dd04:	3d886b35 	.word	0x3d886b35
 800dd08:	3dba2e6e 	.word	0x3dba2e6e
 800dd0c:	3e124925 	.word	0x3e124925
 800dd10:	3eaaaaab 	.word	0x3eaaaaab
 800dd14:	bd15a221 	.word	0xbd15a221
 800dd18:	3d6ef16b 	.word	0x3d6ef16b
 800dd1c:	3d9d8795 	.word	0x3d9d8795
 800dd20:	3de38e38 	.word	0x3de38e38
 800dd24:	3e4ccccd 	.word	0x3e4ccccd
 800dd28:	401bffff 	.word	0x401bffff
 800dd2c:	bf800000 	.word	0xbf800000
 800dd30:	080111f4 	.word	0x080111f4
 800dd34:	080111e4 	.word	0x080111e4
 800dd38:	3fc90fdb 	.word	0x3fc90fdb

0800dd3c <cosf>:
 800dd3c:	b507      	push	{r0, r1, r2, lr}
 800dd3e:	4a18      	ldr	r2, [pc, #96]	; (800dda0 <cosf+0x64>)
 800dd40:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dd44:	4293      	cmp	r3, r2
 800dd46:	4601      	mov	r1, r0
 800dd48:	dc03      	bgt.n	800dd52 <cosf+0x16>
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f001 fc1e 	bl	800f58c <__kernel_cosf>
 800dd50:	e004      	b.n	800dd5c <cosf+0x20>
 800dd52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd56:	db04      	blt.n	800dd62 <cosf+0x26>
 800dd58:	f7f2 ff0a 	bl	8000b70 <__aeabi_fsub>
 800dd5c:	b003      	add	sp, #12
 800dd5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd62:	4669      	mov	r1, sp
 800dd64:	f000 fda4 	bl	800e8b0 <__ieee754_rem_pio2f>
 800dd68:	f000 0203 	and.w	r2, r0, #3
 800dd6c:	2a01      	cmp	r2, #1
 800dd6e:	d005      	beq.n	800dd7c <cosf+0x40>
 800dd70:	2a02      	cmp	r2, #2
 800dd72:	d00a      	beq.n	800dd8a <cosf+0x4e>
 800dd74:	b972      	cbnz	r2, 800dd94 <cosf+0x58>
 800dd76:	9901      	ldr	r1, [sp, #4]
 800dd78:	9800      	ldr	r0, [sp, #0]
 800dd7a:	e7e7      	b.n	800dd4c <cosf+0x10>
 800dd7c:	9901      	ldr	r1, [sp, #4]
 800dd7e:	9800      	ldr	r0, [sp, #0]
 800dd80:	f001 ff3a 	bl	800fbf8 <__kernel_sinf>
 800dd84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dd88:	e7e8      	b.n	800dd5c <cosf+0x20>
 800dd8a:	9901      	ldr	r1, [sp, #4]
 800dd8c:	9800      	ldr	r0, [sp, #0]
 800dd8e:	f001 fbfd 	bl	800f58c <__kernel_cosf>
 800dd92:	e7f7      	b.n	800dd84 <cosf+0x48>
 800dd94:	2201      	movs	r2, #1
 800dd96:	9901      	ldr	r1, [sp, #4]
 800dd98:	9800      	ldr	r0, [sp, #0]
 800dd9a:	f001 ff2d 	bl	800fbf8 <__kernel_sinf>
 800dd9e:	e7dd      	b.n	800dd5c <cosf+0x20>
 800dda0:	3f490fd8 	.word	0x3f490fd8

0800dda4 <fabsf>:
 800dda4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dda8:	4770      	bx	lr
	...

0800ddac <sinf>:
 800ddac:	b507      	push	{r0, r1, r2, lr}
 800ddae:	4a19      	ldr	r2, [pc, #100]	; (800de14 <sinf+0x68>)
 800ddb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	dc04      	bgt.n	800ddc4 <sinf+0x18>
 800ddba:	2200      	movs	r2, #0
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	f001 ff1b 	bl	800fbf8 <__kernel_sinf>
 800ddc2:	e004      	b.n	800ddce <sinf+0x22>
 800ddc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ddc8:	db04      	blt.n	800ddd4 <sinf+0x28>
 800ddca:	f7f2 fed1 	bl	8000b70 <__aeabi_fsub>
 800ddce:	b003      	add	sp, #12
 800ddd0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddd4:	4669      	mov	r1, sp
 800ddd6:	f000 fd6b 	bl	800e8b0 <__ieee754_rem_pio2f>
 800ddda:	f000 0003 	and.w	r0, r0, #3
 800ddde:	2801      	cmp	r0, #1
 800dde0:	d006      	beq.n	800ddf0 <sinf+0x44>
 800dde2:	2802      	cmp	r0, #2
 800dde4:	d009      	beq.n	800ddfa <sinf+0x4e>
 800dde6:	b980      	cbnz	r0, 800de0a <sinf+0x5e>
 800dde8:	2201      	movs	r2, #1
 800ddea:	9901      	ldr	r1, [sp, #4]
 800ddec:	9800      	ldr	r0, [sp, #0]
 800ddee:	e7e6      	b.n	800ddbe <sinf+0x12>
 800ddf0:	9901      	ldr	r1, [sp, #4]
 800ddf2:	9800      	ldr	r0, [sp, #0]
 800ddf4:	f001 fbca 	bl	800f58c <__kernel_cosf>
 800ddf8:	e7e9      	b.n	800ddce <sinf+0x22>
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	9901      	ldr	r1, [sp, #4]
 800ddfe:	9800      	ldr	r0, [sp, #0]
 800de00:	f001 fefa 	bl	800fbf8 <__kernel_sinf>
 800de04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800de08:	e7e1      	b.n	800ddce <sinf+0x22>
 800de0a:	9901      	ldr	r1, [sp, #4]
 800de0c:	9800      	ldr	r0, [sp, #0]
 800de0e:	f001 fbbd 	bl	800f58c <__kernel_cosf>
 800de12:	e7f7      	b.n	800de04 <sinf+0x58>
 800de14:	3f490fd8 	.word	0x3f490fd8

0800de18 <tanf>:
 800de18:	b507      	push	{r0, r1, r2, lr}
 800de1a:	4a0f      	ldr	r2, [pc, #60]	; (800de58 <tanf+0x40>)
 800de1c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800de20:	4293      	cmp	r3, r2
 800de22:	4601      	mov	r1, r0
 800de24:	dc04      	bgt.n	800de30 <tanf+0x18>
 800de26:	2201      	movs	r2, #1
 800de28:	2100      	movs	r1, #0
 800de2a:	f001 ff5b 	bl	800fce4 <__kernel_tanf>
 800de2e:	e004      	b.n	800de3a <tanf+0x22>
 800de30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800de34:	db04      	blt.n	800de40 <tanf+0x28>
 800de36:	f7f2 fe9b 	bl	8000b70 <__aeabi_fsub>
 800de3a:	b003      	add	sp, #12
 800de3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800de40:	4669      	mov	r1, sp
 800de42:	f000 fd35 	bl	800e8b0 <__ieee754_rem_pio2f>
 800de46:	0042      	lsls	r2, r0, #1
 800de48:	f002 0202 	and.w	r2, r2, #2
 800de4c:	9901      	ldr	r1, [sp, #4]
 800de4e:	9800      	ldr	r0, [sp, #0]
 800de50:	f1c2 0201 	rsb	r2, r2, #1
 800de54:	e7e9      	b.n	800de2a <tanf+0x12>
 800de56:	bf00      	nop
 800de58:	3f490fda 	.word	0x3f490fda

0800de5c <atan2>:
 800de5c:	f000 b874 	b.w	800df48 <__ieee754_atan2>

0800de60 <sqrt>:
 800de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de62:	4606      	mov	r6, r0
 800de64:	460f      	mov	r7, r1
 800de66:	f000 fb33 	bl	800e4d0 <__ieee754_sqrt>
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <sqrt+0x54>)
 800de6c:	4604      	mov	r4, r0
 800de6e:	f993 3000 	ldrsb.w	r3, [r3]
 800de72:	460d      	mov	r5, r1
 800de74:	3301      	adds	r3, #1
 800de76:	d019      	beq.n	800deac <sqrt+0x4c>
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	4630      	mov	r0, r6
 800de7e:	4639      	mov	r1, r7
 800de80:	f7f2 fdc4 	bl	8000a0c <__aeabi_dcmpun>
 800de84:	b990      	cbnz	r0, 800deac <sqrt+0x4c>
 800de86:	2200      	movs	r2, #0
 800de88:	2300      	movs	r3, #0
 800de8a:	4630      	mov	r0, r6
 800de8c:	4639      	mov	r1, r7
 800de8e:	f7f2 fd95 	bl	80009bc <__aeabi_dcmplt>
 800de92:	b158      	cbz	r0, 800deac <sqrt+0x4c>
 800de94:	f7fb f96c 	bl	8009170 <__errno>
 800de98:	2321      	movs	r3, #33	; 0x21
 800de9a:	2200      	movs	r2, #0
 800de9c:	6003      	str	r3, [r0, #0]
 800de9e:	2300      	movs	r3, #0
 800dea0:	4610      	mov	r0, r2
 800dea2:	4619      	mov	r1, r3
 800dea4:	f7f2 fc42 	bl	800072c <__aeabi_ddiv>
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	4620      	mov	r0, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb2:	bf00      	nop
 800deb4:	200001e4 	.word	0x200001e4

0800deb8 <asinf>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4604      	mov	r4, r0
 800debc:	f000 fbb4 	bl	800e628 <__ieee754_asinf>
 800dec0:	4b0e      	ldr	r3, [pc, #56]	; (800defc <asinf+0x44>)
 800dec2:	4605      	mov	r5, r0
 800dec4:	f993 3000 	ldrsb.w	r3, [r3]
 800dec8:	3301      	adds	r3, #1
 800deca:	d015      	beq.n	800def8 <asinf+0x40>
 800decc:	4621      	mov	r1, r4
 800dece:	4620      	mov	r0, r4
 800ded0:	f7f3 f91e 	bl	8001110 <__aeabi_fcmpun>
 800ded4:	b980      	cbnz	r0, 800def8 <asinf+0x40>
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff ff64 	bl	800dda4 <fabsf>
 800dedc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dee0:	f7f3 f90c 	bl	80010fc <__aeabi_fcmpgt>
 800dee4:	b140      	cbz	r0, 800def8 <asinf+0x40>
 800dee6:	f7fb f943 	bl	8009170 <__errno>
 800deea:	2321      	movs	r3, #33	; 0x21
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	4804      	ldr	r0, [pc, #16]	; (800df00 <asinf+0x48>)
 800def0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def4:	f7fc ba16 	b.w	800a324 <nanf>
 800def8:	4628      	mov	r0, r5
 800defa:	bd38      	pop	{r3, r4, r5, pc}
 800defc:	200001e4 	.word	0x200001e4
 800df00:	08010d6d 	.word	0x08010d6d

0800df04 <sqrtf>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4605      	mov	r5, r0
 800df08:	f000 fe30 	bl	800eb6c <__ieee754_sqrtf>
 800df0c:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <sqrtf+0x40>)
 800df0e:	4604      	mov	r4, r0
 800df10:	f993 3000 	ldrsb.w	r3, [r3]
 800df14:	3301      	adds	r3, #1
 800df16:	d012      	beq.n	800df3e <sqrtf+0x3a>
 800df18:	4629      	mov	r1, r5
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7f3 f8f8 	bl	8001110 <__aeabi_fcmpun>
 800df20:	b968      	cbnz	r0, 800df3e <sqrtf+0x3a>
 800df22:	2100      	movs	r1, #0
 800df24:	4628      	mov	r0, r5
 800df26:	f7f3 f8cb 	bl	80010c0 <__aeabi_fcmplt>
 800df2a:	b140      	cbz	r0, 800df3e <sqrtf+0x3a>
 800df2c:	f7fb f920 	bl	8009170 <__errno>
 800df30:	2321      	movs	r3, #33	; 0x21
 800df32:	2100      	movs	r1, #0
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	4608      	mov	r0, r1
 800df38:	f7f2 ffd8 	bl	8000eec <__aeabi_fdiv>
 800df3c:	4604      	mov	r4, r0
 800df3e:	4620      	mov	r0, r4
 800df40:	bd38      	pop	{r3, r4, r5, pc}
 800df42:	bf00      	nop
 800df44:	200001e4 	.word	0x200001e4

0800df48 <__ieee754_atan2>:
 800df48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	4692      	mov	sl, r2
 800df4e:	4699      	mov	r9, r3
 800df50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800df54:	461f      	mov	r7, r3
 800df56:	f1ca 0300 	rsb	r3, sl, #0
 800df5a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800e0e8 <__ieee754_atan2+0x1a0>
 800df5e:	ea43 030a 	orr.w	r3, r3, sl
 800df62:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df66:	4573      	cmp	r3, lr
 800df68:	4604      	mov	r4, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	d808      	bhi.n	800df80 <__ieee754_atan2+0x38>
 800df6e:	4246      	negs	r6, r0
 800df70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df74:	4306      	orrs	r6, r0
 800df76:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800df7a:	4576      	cmp	r6, lr
 800df7c:	468c      	mov	ip, r1
 800df7e:	d908      	bls.n	800df92 <__ieee754_atan2+0x4a>
 800df80:	4652      	mov	r2, sl
 800df82:	464b      	mov	r3, r9
 800df84:	4620      	mov	r0, r4
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 f8f0 	bl	800016c <__adddf3>
 800df8c:	4604      	mov	r4, r0
 800df8e:	460d      	mov	r5, r1
 800df90:	e019      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800df92:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800df96:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800df9a:	ea56 060a 	orrs.w	r6, r6, sl
 800df9e:	d103      	bne.n	800dfa8 <__ieee754_atan2+0x60>
 800dfa0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	f001 bfcc 	b.w	800ff40 <atan>
 800dfa8:	17be      	asrs	r6, r7, #30
 800dfaa:	f006 0602 	and.w	r6, r6, #2
 800dfae:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800dfb2:	ea53 0100 	orrs.w	r1, r3, r0
 800dfb6:	d10a      	bne.n	800dfce <__ieee754_atan2+0x86>
 800dfb8:	2e02      	cmp	r6, #2
 800dfba:	d067      	beq.n	800e08c <__ieee754_atan2+0x144>
 800dfbc:	2e03      	cmp	r6, #3
 800dfbe:	d102      	bne.n	800dfc6 <__ieee754_atan2+0x7e>
 800dfc0:	a53b      	add	r5, pc, #236	; (adr r5, 800e0b0 <__ieee754_atan2+0x168>)
 800dfc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4629      	mov	r1, r5
 800dfca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfce:	ea52 010a 	orrs.w	r1, r2, sl
 800dfd2:	d106      	bne.n	800dfe2 <__ieee754_atan2+0x9a>
 800dfd4:	f1bc 0f00 	cmp.w	ip, #0
 800dfd8:	da63      	bge.n	800e0a2 <__ieee754_atan2+0x15a>
 800dfda:	a537      	add	r5, pc, #220	; (adr r5, 800e0b8 <__ieee754_atan2+0x170>)
 800dfdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfe0:	e7f1      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800dfe2:	4572      	cmp	r2, lr
 800dfe4:	d10f      	bne.n	800e006 <__ieee754_atan2+0xbe>
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	f106 36ff 	add.w	r6, r6, #4294967295
 800dfec:	d107      	bne.n	800dffe <__ieee754_atan2+0xb6>
 800dfee:	2e02      	cmp	r6, #2
 800dff0:	d850      	bhi.n	800e094 <__ieee754_atan2+0x14c>
 800dff2:	4b3b      	ldr	r3, [pc, #236]	; (800e0e0 <__ieee754_atan2+0x198>)
 800dff4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dff8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800dffc:	e7e3      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800dffe:	2e02      	cmp	r6, #2
 800e000:	d84c      	bhi.n	800e09c <__ieee754_atan2+0x154>
 800e002:	4b38      	ldr	r3, [pc, #224]	; (800e0e4 <__ieee754_atan2+0x19c>)
 800e004:	e7f6      	b.n	800dff4 <__ieee754_atan2+0xac>
 800e006:	4573      	cmp	r3, lr
 800e008:	d0e4      	beq.n	800dfd4 <__ieee754_atan2+0x8c>
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e010:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e014:	da20      	bge.n	800e058 <__ieee754_atan2+0x110>
 800e016:	2f00      	cmp	r7, #0
 800e018:	da01      	bge.n	800e01e <__ieee754_atan2+0xd6>
 800e01a:	323c      	adds	r2, #60	; 0x3c
 800e01c:	db20      	blt.n	800e060 <__ieee754_atan2+0x118>
 800e01e:	4652      	mov	r2, sl
 800e020:	464b      	mov	r3, r9
 800e022:	4620      	mov	r0, r4
 800e024:	4629      	mov	r1, r5
 800e026:	f7f2 fb81 	bl	800072c <__aeabi_ddiv>
 800e02a:	f002 f913 	bl	8010254 <fabs>
 800e02e:	f001 ff87 	bl	800ff40 <atan>
 800e032:	4604      	mov	r4, r0
 800e034:	460d      	mov	r5, r1
 800e036:	2e01      	cmp	r6, #1
 800e038:	d015      	beq.n	800e066 <__ieee754_atan2+0x11e>
 800e03a:	2e02      	cmp	r6, #2
 800e03c:	d017      	beq.n	800e06e <__ieee754_atan2+0x126>
 800e03e:	2e00      	cmp	r6, #0
 800e040:	d0c1      	beq.n	800dfc6 <__ieee754_atan2+0x7e>
 800e042:	a31f      	add	r3, pc, #124	; (adr r3, 800e0c0 <__ieee754_atan2+0x178>)
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	4620      	mov	r0, r4
 800e04a:	4629      	mov	r1, r5
 800e04c:	f7f2 f88c 	bl	8000168 <__aeabi_dsub>
 800e050:	a31d      	add	r3, pc, #116	; (adr r3, 800e0c8 <__ieee754_atan2+0x180>)
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	e016      	b.n	800e086 <__ieee754_atan2+0x13e>
 800e058:	a51d      	add	r5, pc, #116	; (adr r5, 800e0d0 <__ieee754_atan2+0x188>)
 800e05a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e05e:	e7ea      	b.n	800e036 <__ieee754_atan2+0xee>
 800e060:	2400      	movs	r4, #0
 800e062:	2500      	movs	r5, #0
 800e064:	e7e7      	b.n	800e036 <__ieee754_atan2+0xee>
 800e066:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e06a:	461d      	mov	r5, r3
 800e06c:	e7ab      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800e06e:	a314      	add	r3, pc, #80	; (adr r3, 800e0c0 <__ieee754_atan2+0x178>)
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 f876 	bl	8000168 <__aeabi_dsub>
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	a111      	add	r1, pc, #68	; (adr r1, 800e0c8 <__ieee754_atan2+0x180>)
 800e082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e086:	f7f2 f86f 	bl	8000168 <__aeabi_dsub>
 800e08a:	e77f      	b.n	800df8c <__ieee754_atan2+0x44>
 800e08c:	a50e      	add	r5, pc, #56	; (adr r5, 800e0c8 <__ieee754_atan2+0x180>)
 800e08e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e092:	e798      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800e094:	a510      	add	r5, pc, #64	; (adr r5, 800e0d8 <__ieee754_atan2+0x190>)
 800e096:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e09a:	e794      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800e09c:	2400      	movs	r4, #0
 800e09e:	2500      	movs	r5, #0
 800e0a0:	e791      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800e0a2:	a50b      	add	r5, pc, #44	; (adr r5, 800e0d0 <__ieee754_atan2+0x188>)
 800e0a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0a8:	e78d      	b.n	800dfc6 <__ieee754_atan2+0x7e>
 800e0aa:	bf00      	nop
 800e0ac:	f3af 8000 	nop.w
 800e0b0:	54442d18 	.word	0x54442d18
 800e0b4:	c00921fb 	.word	0xc00921fb
 800e0b8:	54442d18 	.word	0x54442d18
 800e0bc:	bff921fb 	.word	0xbff921fb
 800e0c0:	33145c07 	.word	0x33145c07
 800e0c4:	3ca1a626 	.word	0x3ca1a626
 800e0c8:	54442d18 	.word	0x54442d18
 800e0cc:	400921fb 	.word	0x400921fb
 800e0d0:	54442d18 	.word	0x54442d18
 800e0d4:	3ff921fb 	.word	0x3ff921fb
 800e0d8:	54442d18 	.word	0x54442d18
 800e0dc:	3fe921fb 	.word	0x3fe921fb
 800e0e0:	08011208 	.word	0x08011208
 800e0e4:	08011220 	.word	0x08011220
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	00000000 	.word	0x00000000

0800e0f0 <__ieee754_rem_pio2>:
 800e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	4ac4      	ldr	r2, [pc, #784]	; (800e408 <__ieee754_rem_pio2+0x318>)
 800e0f8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800e0fc:	b08d      	sub	sp, #52	; 0x34
 800e0fe:	4592      	cmp	sl, r2
 800e100:	9104      	str	r1, [sp, #16]
 800e102:	dc07      	bgt.n	800e114 <__ieee754_rem_pio2+0x24>
 800e104:	2200      	movs	r2, #0
 800e106:	2300      	movs	r3, #0
 800e108:	e9c4 0100 	strd	r0, r1, [r4]
 800e10c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e110:	2500      	movs	r5, #0
 800e112:	e024      	b.n	800e15e <__ieee754_rem_pio2+0x6e>
 800e114:	4abd      	ldr	r2, [pc, #756]	; (800e40c <__ieee754_rem_pio2+0x31c>)
 800e116:	4592      	cmp	sl, r2
 800e118:	dc72      	bgt.n	800e200 <__ieee754_rem_pio2+0x110>
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	4dbc      	ldr	r5, [pc, #752]	; (800e410 <__ieee754_rem_pio2+0x320>)
 800e11e:	2b00      	cmp	r3, #0
 800e120:	a3ab      	add	r3, pc, #684	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x2e0>)
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	dd36      	ble.n	800e196 <__ieee754_rem_pio2+0xa6>
 800e128:	f7f2 f81e 	bl	8000168 <__aeabi_dsub>
 800e12c:	45aa      	cmp	sl, r5
 800e12e:	4606      	mov	r6, r0
 800e130:	460f      	mov	r7, r1
 800e132:	d018      	beq.n	800e166 <__ieee754_rem_pio2+0x76>
 800e134:	a3a8      	add	r3, pc, #672	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x2e8>)
 800e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13a:	f7f2 f815 	bl	8000168 <__aeabi_dsub>
 800e13e:	4602      	mov	r2, r0
 800e140:	460b      	mov	r3, r1
 800e142:	4630      	mov	r0, r6
 800e144:	e9c4 2300 	strd	r2, r3, [r4]
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 f80d 	bl	8000168 <__aeabi_dsub>
 800e14e:	a3a2      	add	r3, pc, #648	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x2e8>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f7f2 f808 	bl	8000168 <__aeabi_dsub>
 800e158:	2501      	movs	r5, #1
 800e15a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e15e:	4628      	mov	r0, r5
 800e160:	b00d      	add	sp, #52	; 0x34
 800e162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e166:	a39e      	add	r3, pc, #632	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x2f0>)
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	f7f1 fffc 	bl	8000168 <__aeabi_dsub>
 800e170:	a39d      	add	r3, pc, #628	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x2f8>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	4606      	mov	r6, r0
 800e178:	460f      	mov	r7, r1
 800e17a:	f7f1 fff5 	bl	8000168 <__aeabi_dsub>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4630      	mov	r0, r6
 800e184:	e9c4 2300 	strd	r2, r3, [r4]
 800e188:	4639      	mov	r1, r7
 800e18a:	f7f1 ffed 	bl	8000168 <__aeabi_dsub>
 800e18e:	a396      	add	r3, pc, #600	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x2f8>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	e7de      	b.n	800e154 <__ieee754_rem_pio2+0x64>
 800e196:	f7f1 ffe9 	bl	800016c <__adddf3>
 800e19a:	45aa      	cmp	sl, r5
 800e19c:	4606      	mov	r6, r0
 800e19e:	460f      	mov	r7, r1
 800e1a0:	d016      	beq.n	800e1d0 <__ieee754_rem_pio2+0xe0>
 800e1a2:	a38d      	add	r3, pc, #564	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x2e8>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	f7f1 ffe0 	bl	800016c <__adddf3>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	e9c4 2300 	strd	r2, r3, [r4]
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	f7f1 ffd6 	bl	8000168 <__aeabi_dsub>
 800e1bc:	a386      	add	r3, pc, #536	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x2e8>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f1 ffd3 	bl	800016c <__adddf3>
 800e1c6:	f04f 35ff 	mov.w	r5, #4294967295
 800e1ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1ce:	e7c6      	b.n	800e15e <__ieee754_rem_pio2+0x6e>
 800e1d0:	a383      	add	r3, pc, #524	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x2f0>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f1 ffc9 	bl	800016c <__adddf3>
 800e1da:	a383      	add	r3, pc, #524	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x2f8>)
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	460f      	mov	r7, r1
 800e1e4:	f7f1 ffc2 	bl	800016c <__adddf3>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	e9c4 2300 	strd	r2, r3, [r4]
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	f7f1 ffb8 	bl	8000168 <__aeabi_dsub>
 800e1f8:	a37b      	add	r3, pc, #492	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x2f8>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	e7e0      	b.n	800e1c2 <__ieee754_rem_pio2+0xd2>
 800e200:	4a84      	ldr	r2, [pc, #528]	; (800e414 <__ieee754_rem_pio2+0x324>)
 800e202:	4592      	cmp	sl, r2
 800e204:	f300 80d5 	bgt.w	800e3b2 <__ieee754_rem_pio2+0x2c2>
 800e208:	f002 f824 	bl	8010254 <fabs>
 800e20c:	a378      	add	r3, pc, #480	; (adr r3, 800e3f0 <__ieee754_rem_pio2+0x300>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	f7f2 f95f 	bl	80004d8 <__aeabi_dmul>
 800e21a:	2200      	movs	r2, #0
 800e21c:	4b7e      	ldr	r3, [pc, #504]	; (800e418 <__ieee754_rem_pio2+0x328>)
 800e21e:	f7f1 ffa5 	bl	800016c <__adddf3>
 800e222:	f7f2 fc09 	bl	8000a38 <__aeabi_d2iz>
 800e226:	4605      	mov	r5, r0
 800e228:	f7f2 f8ec 	bl	8000404 <__aeabi_i2d>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e234:	a366      	add	r3, pc, #408	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x2e0>)
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	f7f2 f94d 	bl	80004d8 <__aeabi_dmul>
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4630      	mov	r0, r6
 800e244:	4639      	mov	r1, r7
 800e246:	f7f1 ff8f 	bl	8000168 <__aeabi_dsub>
 800e24a:	a363      	add	r3, pc, #396	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x2e8>)
 800e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e250:	4680      	mov	r8, r0
 800e252:	4689      	mov	r9, r1
 800e254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e258:	f7f2 f93e 	bl	80004d8 <__aeabi_dmul>
 800e25c:	2d1f      	cmp	r5, #31
 800e25e:	4606      	mov	r6, r0
 800e260:	460f      	mov	r7, r1
 800e262:	dc0e      	bgt.n	800e282 <__ieee754_rem_pio2+0x192>
 800e264:	4b6d      	ldr	r3, [pc, #436]	; (800e41c <__ieee754_rem_pio2+0x32c>)
 800e266:	1e6a      	subs	r2, r5, #1
 800e268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26c:	4553      	cmp	r3, sl
 800e26e:	d008      	beq.n	800e282 <__ieee754_rem_pio2+0x192>
 800e270:	4632      	mov	r2, r6
 800e272:	463b      	mov	r3, r7
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f1 ff76 	bl	8000168 <__aeabi_dsub>
 800e27c:	e9c4 0100 	strd	r0, r1, [r4]
 800e280:	e013      	b.n	800e2aa <__ieee754_rem_pio2+0x1ba>
 800e282:	463b      	mov	r3, r7
 800e284:	4632      	mov	r2, r6
 800e286:	4640      	mov	r0, r8
 800e288:	4649      	mov	r1, r9
 800e28a:	f7f1 ff6d 	bl	8000168 <__aeabi_dsub>
 800e28e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800e292:	9305      	str	r3, [sp, #20]
 800e294:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e298:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800e29c:	f1ba 0f10 	cmp.w	sl, #16
 800e2a0:	dc1f      	bgt.n	800e2e2 <__ieee754_rem_pio2+0x1f2>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	e9c4 2300 	strd	r2, r3, [r4]
 800e2aa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	4653      	mov	r3, sl
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f1 ff58 	bl	8000168 <__aeabi_dsub>
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	463b      	mov	r3, r7
 800e2bc:	f7f1 ff54 	bl	8000168 <__aeabi_dsub>
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e2c6:	9904      	ldr	r1, [sp, #16]
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	f6bf af47 	bge.w	800e15e <__ieee754_rem_pio2+0x6e>
 800e2d0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800e2d4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e2d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e2dc:	60e3      	str	r3, [r4, #12]
 800e2de:	426d      	negs	r5, r5
 800e2e0:	e73d      	b.n	800e15e <__ieee754_rem_pio2+0x6e>
 800e2e2:	a33f      	add	r3, pc, #252	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x2f0>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ec:	f7f2 f8f4 	bl	80004d8 <__aeabi_dmul>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	460f      	mov	r7, r1
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	4640      	mov	r0, r8
 800e2fa:	4649      	mov	r1, r9
 800e2fc:	f7f1 ff34 	bl	8000168 <__aeabi_dsub>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4682      	mov	sl, r0
 800e306:	468b      	mov	fp, r1
 800e308:	4640      	mov	r0, r8
 800e30a:	4649      	mov	r1, r9
 800e30c:	f7f1 ff2c 	bl	8000168 <__aeabi_dsub>
 800e310:	4632      	mov	r2, r6
 800e312:	463b      	mov	r3, r7
 800e314:	f7f1 ff28 	bl	8000168 <__aeabi_dsub>
 800e318:	a333      	add	r3, pc, #204	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x2f8>)
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	4606      	mov	r6, r0
 800e320:	460f      	mov	r7, r1
 800e322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e326:	f7f2 f8d7 	bl	80004d8 <__aeabi_dmul>
 800e32a:	4632      	mov	r2, r6
 800e32c:	463b      	mov	r3, r7
 800e32e:	f7f1 ff1b 	bl	8000168 <__aeabi_dsub>
 800e332:	4602      	mov	r2, r0
 800e334:	460b      	mov	r3, r1
 800e336:	4606      	mov	r6, r0
 800e338:	460f      	mov	r7, r1
 800e33a:	4650      	mov	r0, sl
 800e33c:	4659      	mov	r1, fp
 800e33e:	f7f1 ff13 	bl	8000168 <__aeabi_dsub>
 800e342:	9a05      	ldr	r2, [sp, #20]
 800e344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	2b31      	cmp	r3, #49	; 0x31
 800e34c:	dc06      	bgt.n	800e35c <__ieee754_rem_pio2+0x26c>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	46d0      	mov	r8, sl
 800e354:	46d9      	mov	r9, fp
 800e356:	e9c4 2300 	strd	r2, r3, [r4]
 800e35a:	e7a6      	b.n	800e2aa <__ieee754_rem_pio2+0x1ba>
 800e35c:	a326      	add	r3, pc, #152	; (adr r3, 800e3f8 <__ieee754_rem_pio2+0x308>)
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e366:	f7f2 f8b7 	bl	80004d8 <__aeabi_dmul>
 800e36a:	4606      	mov	r6, r0
 800e36c:	460f      	mov	r7, r1
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4650      	mov	r0, sl
 800e374:	4659      	mov	r1, fp
 800e376:	f7f1 fef7 	bl	8000168 <__aeabi_dsub>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	4680      	mov	r8, r0
 800e380:	4689      	mov	r9, r1
 800e382:	4650      	mov	r0, sl
 800e384:	4659      	mov	r1, fp
 800e386:	f7f1 feef 	bl	8000168 <__aeabi_dsub>
 800e38a:	4632      	mov	r2, r6
 800e38c:	463b      	mov	r3, r7
 800e38e:	f7f1 feeb 	bl	8000168 <__aeabi_dsub>
 800e392:	a31b      	add	r3, pc, #108	; (adr r3, 800e400 <__ieee754_rem_pio2+0x310>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	4606      	mov	r6, r0
 800e39a:	460f      	mov	r7, r1
 800e39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a0:	f7f2 f89a 	bl	80004d8 <__aeabi_dmul>
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	f7f1 fede 	bl	8000168 <__aeabi_dsub>
 800e3ac:	4606      	mov	r6, r0
 800e3ae:	460f      	mov	r7, r1
 800e3b0:	e75e      	b.n	800e270 <__ieee754_rem_pio2+0x180>
 800e3b2:	4a1b      	ldr	r2, [pc, #108]	; (800e420 <__ieee754_rem_pio2+0x330>)
 800e3b4:	4592      	cmp	sl, r2
 800e3b6:	dd35      	ble.n	800e424 <__ieee754_rem_pio2+0x334>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	f7f1 fed4 	bl	8000168 <__aeabi_dsub>
 800e3c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3c4:	e9c4 0100 	strd	r0, r1, [r4]
 800e3c8:	e6a2      	b.n	800e110 <__ieee754_rem_pio2+0x20>
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w
 800e3d0:	54400000 	.word	0x54400000
 800e3d4:	3ff921fb 	.word	0x3ff921fb
 800e3d8:	1a626331 	.word	0x1a626331
 800e3dc:	3dd0b461 	.word	0x3dd0b461
 800e3e0:	1a600000 	.word	0x1a600000
 800e3e4:	3dd0b461 	.word	0x3dd0b461
 800e3e8:	2e037073 	.word	0x2e037073
 800e3ec:	3ba3198a 	.word	0x3ba3198a
 800e3f0:	6dc9c883 	.word	0x6dc9c883
 800e3f4:	3fe45f30 	.word	0x3fe45f30
 800e3f8:	2e000000 	.word	0x2e000000
 800e3fc:	3ba3198a 	.word	0x3ba3198a
 800e400:	252049c1 	.word	0x252049c1
 800e404:	397b839a 	.word	0x397b839a
 800e408:	3fe921fb 	.word	0x3fe921fb
 800e40c:	4002d97b 	.word	0x4002d97b
 800e410:	3ff921fb 	.word	0x3ff921fb
 800e414:	413921fb 	.word	0x413921fb
 800e418:	3fe00000 	.word	0x3fe00000
 800e41c:	08011238 	.word	0x08011238
 800e420:	7fefffff 	.word	0x7fefffff
 800e424:	ea4f 552a 	mov.w	r5, sl, asr #20
 800e428:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e42c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800e430:	460f      	mov	r7, r1
 800e432:	4606      	mov	r6, r0
 800e434:	f7f2 fb00 	bl	8000a38 <__aeabi_d2iz>
 800e438:	f7f1 ffe4 	bl	8000404 <__aeabi_i2d>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4630      	mov	r0, r6
 800e442:	4639      	mov	r1, r7
 800e444:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e448:	f7f1 fe8e 	bl	8000168 <__aeabi_dsub>
 800e44c:	2200      	movs	r2, #0
 800e44e:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <__ieee754_rem_pio2+0x3d8>)
 800e450:	f7f2 f842 	bl	80004d8 <__aeabi_dmul>
 800e454:	460f      	mov	r7, r1
 800e456:	4606      	mov	r6, r0
 800e458:	f7f2 faee 	bl	8000a38 <__aeabi_d2iz>
 800e45c:	f7f1 ffd2 	bl	8000404 <__aeabi_i2d>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4630      	mov	r0, r6
 800e466:	4639      	mov	r1, r7
 800e468:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e46c:	f7f1 fe7c 	bl	8000168 <__aeabi_dsub>
 800e470:	2200      	movs	r2, #0
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <__ieee754_rem_pio2+0x3d8>)
 800e474:	f7f2 f830 	bl	80004d8 <__aeabi_dmul>
 800e478:	f04f 0803 	mov.w	r8, #3
 800e47c:	2600      	movs	r6, #0
 800e47e:	2700      	movs	r7, #0
 800e480:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e484:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800e488:	4632      	mov	r2, r6
 800e48a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800e48e:	463b      	mov	r3, r7
 800e490:	46c2      	mov	sl, r8
 800e492:	f108 38ff 	add.w	r8, r8, #4294967295
 800e496:	f7f2 fa87 	bl	80009a8 <__aeabi_dcmpeq>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d1f4      	bne.n	800e488 <__ieee754_rem_pio2+0x398>
 800e49e:	4b0b      	ldr	r3, [pc, #44]	; (800e4cc <__ieee754_rem_pio2+0x3dc>)
 800e4a0:	462a      	mov	r2, r5
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	a806      	add	r0, sp, #24
 800e4ac:	4653      	mov	r3, sl
 800e4ae:	f000 fc6d 	bl	800ed8c <__kernel_rem_pio2>
 800e4b2:	9b04      	ldr	r3, [sp, #16]
 800e4b4:	4605      	mov	r5, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f6bf ae51 	bge.w	800e15e <__ieee754_rem_pio2+0x6e>
 800e4bc:	6863      	ldr	r3, [r4, #4]
 800e4be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4c2:	6063      	str	r3, [r4, #4]
 800e4c4:	68e3      	ldr	r3, [r4, #12]
 800e4c6:	e707      	b.n	800e2d8 <__ieee754_rem_pio2+0x1e8>
 800e4c8:	41700000 	.word	0x41700000
 800e4cc:	080112b8 	.word	0x080112b8

0800e4d0 <__ieee754_sqrt>:
 800e4d0:	f8df c150 	ldr.w	ip, [pc, #336]	; 800e624 <__ieee754_sqrt+0x154>
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	ea3c 0c01 	bics.w	ip, ip, r1
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	460a      	mov	r2, r1
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	d10e      	bne.n	800e508 <__ieee754_sqrt+0x38>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	f7f1 fff4 	bl	80004d8 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f1 fe38 	bl	800016c <__adddf3>
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	460d      	mov	r5, r1
 800e500:	4630      	mov	r0, r6
 800e502:	4629      	mov	r1, r5
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	2900      	cmp	r1, #0
 800e50a:	dc0d      	bgt.n	800e528 <__ieee754_sqrt+0x58>
 800e50c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e510:	ea5c 0707 	orrs.w	r7, ip, r7
 800e514:	d0f4      	beq.n	800e500 <__ieee754_sqrt+0x30>
 800e516:	b139      	cbz	r1, 800e528 <__ieee754_sqrt+0x58>
 800e518:	4602      	mov	r2, r0
 800e51a:	f7f1 fe25 	bl	8000168 <__aeabi_dsub>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	f7f2 f903 	bl	800072c <__aeabi_ddiv>
 800e526:	e7e9      	b.n	800e4fc <__ieee754_sqrt+0x2c>
 800e528:	1512      	asrs	r2, r2, #20
 800e52a:	d074      	beq.n	800e616 <__ieee754_sqrt+0x146>
 800e52c:	2000      	movs	r0, #0
 800e52e:	07d5      	lsls	r5, r2, #31
 800e530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e534:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800e538:	bf5e      	ittt	pl
 800e53a:	0fe3      	lsrpl	r3, r4, #31
 800e53c:	0064      	lslpl	r4, r4, #1
 800e53e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800e542:	0fe3      	lsrs	r3, r4, #31
 800e544:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e548:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800e54c:	2516      	movs	r5, #22
 800e54e:	4601      	mov	r1, r0
 800e550:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e554:	1076      	asrs	r6, r6, #1
 800e556:	0064      	lsls	r4, r4, #1
 800e558:	188f      	adds	r7, r1, r2
 800e55a:	429f      	cmp	r7, r3
 800e55c:	bfde      	ittt	le
 800e55e:	1bdb      	suble	r3, r3, r7
 800e560:	18b9      	addle	r1, r7, r2
 800e562:	1880      	addle	r0, r0, r2
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	3d01      	subs	r5, #1
 800e568:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e56c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e570:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e574:	d1f0      	bne.n	800e558 <__ieee754_sqrt+0x88>
 800e576:	462a      	mov	r2, r5
 800e578:	f04f 0e20 	mov.w	lr, #32
 800e57c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e580:	428b      	cmp	r3, r1
 800e582:	eb07 0c05 	add.w	ip, r7, r5
 800e586:	dc02      	bgt.n	800e58e <__ieee754_sqrt+0xbe>
 800e588:	d113      	bne.n	800e5b2 <__ieee754_sqrt+0xe2>
 800e58a:	45a4      	cmp	ip, r4
 800e58c:	d811      	bhi.n	800e5b2 <__ieee754_sqrt+0xe2>
 800e58e:	f1bc 0f00 	cmp.w	ip, #0
 800e592:	eb0c 0507 	add.w	r5, ip, r7
 800e596:	da43      	bge.n	800e620 <__ieee754_sqrt+0x150>
 800e598:	2d00      	cmp	r5, #0
 800e59a:	db41      	blt.n	800e620 <__ieee754_sqrt+0x150>
 800e59c:	f101 0801 	add.w	r8, r1, #1
 800e5a0:	1a5b      	subs	r3, r3, r1
 800e5a2:	4641      	mov	r1, r8
 800e5a4:	45a4      	cmp	ip, r4
 800e5a6:	bf88      	it	hi
 800e5a8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e5ac:	eba4 040c 	sub.w	r4, r4, ip
 800e5b0:	443a      	add	r2, r7
 800e5b2:	005b      	lsls	r3, r3, #1
 800e5b4:	f1be 0e01 	subs.w	lr, lr, #1
 800e5b8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e5bc:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800e5c0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e5c4:	d1dc      	bne.n	800e580 <__ieee754_sqrt+0xb0>
 800e5c6:	4323      	orrs	r3, r4
 800e5c8:	d006      	beq.n	800e5d8 <__ieee754_sqrt+0x108>
 800e5ca:	1c54      	adds	r4, r2, #1
 800e5cc:	bf0b      	itete	eq
 800e5ce:	4672      	moveq	r2, lr
 800e5d0:	3201      	addne	r2, #1
 800e5d2:	3001      	addeq	r0, #1
 800e5d4:	f022 0201 	bicne.w	r2, r2, #1
 800e5d8:	1043      	asrs	r3, r0, #1
 800e5da:	07c1      	lsls	r1, r0, #31
 800e5dc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e5e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e5e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e5e8:	bf48      	it	mi
 800e5ea:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800e5f4:	e782      	b.n	800e4fc <__ieee754_sqrt+0x2c>
 800e5f6:	0ae3      	lsrs	r3, r4, #11
 800e5f8:	3915      	subs	r1, #21
 800e5fa:	0564      	lsls	r4, r4, #21
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d0fa      	beq.n	800e5f6 <__ieee754_sqrt+0x126>
 800e600:	02de      	lsls	r6, r3, #11
 800e602:	d50a      	bpl.n	800e61a <__ieee754_sqrt+0x14a>
 800e604:	f1c2 0020 	rsb	r0, r2, #32
 800e608:	fa24 f000 	lsr.w	r0, r4, r0
 800e60c:	1e55      	subs	r5, r2, #1
 800e60e:	4094      	lsls	r4, r2
 800e610:	4303      	orrs	r3, r0
 800e612:	1b4a      	subs	r2, r1, r5
 800e614:	e78a      	b.n	800e52c <__ieee754_sqrt+0x5c>
 800e616:	4611      	mov	r1, r2
 800e618:	e7f0      	b.n	800e5fc <__ieee754_sqrt+0x12c>
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	3201      	adds	r2, #1
 800e61e:	e7ef      	b.n	800e600 <__ieee754_sqrt+0x130>
 800e620:	4688      	mov	r8, r1
 800e622:	e7bd      	b.n	800e5a0 <__ieee754_sqrt+0xd0>
 800e624:	7ff00000 	.word	0x7ff00000

0800e628 <__ieee754_asinf>:
 800e628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e62c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800e630:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800e634:	4604      	mov	r4, r0
 800e636:	4605      	mov	r5, r0
 800e638:	d10c      	bne.n	800e654 <__ieee754_asinf+0x2c>
 800e63a:	498d      	ldr	r1, [pc, #564]	; (800e870 <__ieee754_asinf+0x248>)
 800e63c:	f7f2 fba2 	bl	8000d84 <__aeabi_fmul>
 800e640:	498c      	ldr	r1, [pc, #560]	; (800e874 <__ieee754_asinf+0x24c>)
 800e642:	4605      	mov	r5, r0
 800e644:	4620      	mov	r0, r4
 800e646:	f7f2 fb9d 	bl	8000d84 <__aeabi_fmul>
 800e64a:	4601      	mov	r1, r0
 800e64c:	4628      	mov	r0, r5
 800e64e:	f7f2 fa91 	bl	8000b74 <__addsf3>
 800e652:	e006      	b.n	800e662 <__ieee754_asinf+0x3a>
 800e654:	dd07      	ble.n	800e666 <__ieee754_asinf+0x3e>
 800e656:	4601      	mov	r1, r0
 800e658:	f7f2 fa8a 	bl	8000b70 <__aeabi_fsub>
 800e65c:	4601      	mov	r1, r0
 800e65e:	f7f2 fc45 	bl	8000eec <__aeabi_fdiv>
 800e662:	4604      	mov	r4, r0
 800e664:	e00e      	b.n	800e684 <__ieee754_asinf+0x5c>
 800e666:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800e66a:	da58      	bge.n	800e71e <__ieee754_asinf+0xf6>
 800e66c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800e670:	da0b      	bge.n	800e68a <__ieee754_asinf+0x62>
 800e672:	4981      	ldr	r1, [pc, #516]	; (800e878 <__ieee754_asinf+0x250>)
 800e674:	f7f2 fa7e 	bl	8000b74 <__addsf3>
 800e678:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e67c:	f7f2 fd3e 	bl	80010fc <__aeabi_fcmpgt>
 800e680:	2800      	cmp	r0, #0
 800e682:	d04c      	beq.n	800e71e <__ieee754_asinf+0xf6>
 800e684:	4620      	mov	r0, r4
 800e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68a:	4601      	mov	r1, r0
 800e68c:	f7f2 fb7a 	bl	8000d84 <__aeabi_fmul>
 800e690:	4605      	mov	r5, r0
 800e692:	497a      	ldr	r1, [pc, #488]	; (800e87c <__ieee754_asinf+0x254>)
 800e694:	f7f2 fb76 	bl	8000d84 <__aeabi_fmul>
 800e698:	4979      	ldr	r1, [pc, #484]	; (800e880 <__ieee754_asinf+0x258>)
 800e69a:	f7f2 fa6b 	bl	8000b74 <__addsf3>
 800e69e:	4629      	mov	r1, r5
 800e6a0:	f7f2 fb70 	bl	8000d84 <__aeabi_fmul>
 800e6a4:	4977      	ldr	r1, [pc, #476]	; (800e884 <__ieee754_asinf+0x25c>)
 800e6a6:	f7f2 fa63 	bl	8000b70 <__aeabi_fsub>
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	f7f2 fb6a 	bl	8000d84 <__aeabi_fmul>
 800e6b0:	4975      	ldr	r1, [pc, #468]	; (800e888 <__ieee754_asinf+0x260>)
 800e6b2:	f7f2 fa5f 	bl	8000b74 <__addsf3>
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f2 fb64 	bl	8000d84 <__aeabi_fmul>
 800e6bc:	4973      	ldr	r1, [pc, #460]	; (800e88c <__ieee754_asinf+0x264>)
 800e6be:	f7f2 fa57 	bl	8000b70 <__aeabi_fsub>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f7f2 fb5e 	bl	8000d84 <__aeabi_fmul>
 800e6c8:	4971      	ldr	r1, [pc, #452]	; (800e890 <__ieee754_asinf+0x268>)
 800e6ca:	f7f2 fa53 	bl	8000b74 <__addsf3>
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	f7f2 fb58 	bl	8000d84 <__aeabi_fmul>
 800e6d4:	496f      	ldr	r1, [pc, #444]	; (800e894 <__ieee754_asinf+0x26c>)
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f7f2 fb53 	bl	8000d84 <__aeabi_fmul>
 800e6de:	496e      	ldr	r1, [pc, #440]	; (800e898 <__ieee754_asinf+0x270>)
 800e6e0:	f7f2 fa46 	bl	8000b70 <__aeabi_fsub>
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	f7f2 fb4d 	bl	8000d84 <__aeabi_fmul>
 800e6ea:	496c      	ldr	r1, [pc, #432]	; (800e89c <__ieee754_asinf+0x274>)
 800e6ec:	f7f2 fa42 	bl	8000b74 <__addsf3>
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7f2 fb47 	bl	8000d84 <__aeabi_fmul>
 800e6f6:	496a      	ldr	r1, [pc, #424]	; (800e8a0 <__ieee754_asinf+0x278>)
 800e6f8:	f7f2 fa3a 	bl	8000b70 <__aeabi_fsub>
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	f7f2 fb41 	bl	8000d84 <__aeabi_fmul>
 800e702:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e706:	f7f2 fa35 	bl	8000b74 <__addsf3>
 800e70a:	4601      	mov	r1, r0
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7f2 fbed 	bl	8000eec <__aeabi_fdiv>
 800e712:	4621      	mov	r1, r4
 800e714:	f7f2 fb36 	bl	8000d84 <__aeabi_fmul>
 800e718:	4601      	mov	r1, r0
 800e71a:	4620      	mov	r0, r4
 800e71c:	e797      	b.n	800e64e <__ieee754_asinf+0x26>
 800e71e:	4620      	mov	r0, r4
 800e720:	f7ff fb40 	bl	800dda4 <fabsf>
 800e724:	4601      	mov	r1, r0
 800e726:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e72a:	f7f2 fa21 	bl	8000b70 <__aeabi_fsub>
 800e72e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e732:	f7f2 fb27 	bl	8000d84 <__aeabi_fmul>
 800e736:	4606      	mov	r6, r0
 800e738:	4950      	ldr	r1, [pc, #320]	; (800e87c <__ieee754_asinf+0x254>)
 800e73a:	f7f2 fb23 	bl	8000d84 <__aeabi_fmul>
 800e73e:	4950      	ldr	r1, [pc, #320]	; (800e880 <__ieee754_asinf+0x258>)
 800e740:	f7f2 fa18 	bl	8000b74 <__addsf3>
 800e744:	4631      	mov	r1, r6
 800e746:	f7f2 fb1d 	bl	8000d84 <__aeabi_fmul>
 800e74a:	494e      	ldr	r1, [pc, #312]	; (800e884 <__ieee754_asinf+0x25c>)
 800e74c:	f7f2 fa10 	bl	8000b70 <__aeabi_fsub>
 800e750:	4631      	mov	r1, r6
 800e752:	f7f2 fb17 	bl	8000d84 <__aeabi_fmul>
 800e756:	494c      	ldr	r1, [pc, #304]	; (800e888 <__ieee754_asinf+0x260>)
 800e758:	f7f2 fa0c 	bl	8000b74 <__addsf3>
 800e75c:	4631      	mov	r1, r6
 800e75e:	f7f2 fb11 	bl	8000d84 <__aeabi_fmul>
 800e762:	494a      	ldr	r1, [pc, #296]	; (800e88c <__ieee754_asinf+0x264>)
 800e764:	f7f2 fa04 	bl	8000b70 <__aeabi_fsub>
 800e768:	4631      	mov	r1, r6
 800e76a:	f7f2 fb0b 	bl	8000d84 <__aeabi_fmul>
 800e76e:	4948      	ldr	r1, [pc, #288]	; (800e890 <__ieee754_asinf+0x268>)
 800e770:	f7f2 fa00 	bl	8000b74 <__addsf3>
 800e774:	4631      	mov	r1, r6
 800e776:	f7f2 fb05 	bl	8000d84 <__aeabi_fmul>
 800e77a:	4946      	ldr	r1, [pc, #280]	; (800e894 <__ieee754_asinf+0x26c>)
 800e77c:	4681      	mov	r9, r0
 800e77e:	4630      	mov	r0, r6
 800e780:	f7f2 fb00 	bl	8000d84 <__aeabi_fmul>
 800e784:	4944      	ldr	r1, [pc, #272]	; (800e898 <__ieee754_asinf+0x270>)
 800e786:	f7f2 f9f3 	bl	8000b70 <__aeabi_fsub>
 800e78a:	4631      	mov	r1, r6
 800e78c:	f7f2 fafa 	bl	8000d84 <__aeabi_fmul>
 800e790:	4942      	ldr	r1, [pc, #264]	; (800e89c <__ieee754_asinf+0x274>)
 800e792:	f7f2 f9ef 	bl	8000b74 <__addsf3>
 800e796:	4631      	mov	r1, r6
 800e798:	f7f2 faf4 	bl	8000d84 <__aeabi_fmul>
 800e79c:	4940      	ldr	r1, [pc, #256]	; (800e8a0 <__ieee754_asinf+0x278>)
 800e79e:	f7f2 f9e7 	bl	8000b70 <__aeabi_fsub>
 800e7a2:	4631      	mov	r1, r6
 800e7a4:	f7f2 faee 	bl	8000d84 <__aeabi_fmul>
 800e7a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e7ac:	f7f2 f9e2 	bl	8000b74 <__addsf3>
 800e7b0:	4682      	mov	sl, r0
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f000 f9da 	bl	800eb6c <__ieee754_sqrtf>
 800e7b8:	4b3a      	ldr	r3, [pc, #232]	; (800e8a4 <__ieee754_asinf+0x27c>)
 800e7ba:	4607      	mov	r7, r0
 800e7bc:	4598      	cmp	r8, r3
 800e7be:	dd1a      	ble.n	800e7f6 <__ieee754_asinf+0x1ce>
 800e7c0:	4651      	mov	r1, sl
 800e7c2:	4648      	mov	r0, r9
 800e7c4:	f7f2 fb92 	bl	8000eec <__aeabi_fdiv>
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	f7f2 fadb 	bl	8000d84 <__aeabi_fmul>
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	f7f2 f9d0 	bl	8000b74 <__addsf3>
 800e7d4:	4601      	mov	r1, r0
 800e7d6:	f7f2 f9cd 	bl	8000b74 <__addsf3>
 800e7da:	4933      	ldr	r1, [pc, #204]	; (800e8a8 <__ieee754_asinf+0x280>)
 800e7dc:	f7f2 f9ca 	bl	8000b74 <__addsf3>
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	4823      	ldr	r0, [pc, #140]	; (800e870 <__ieee754_asinf+0x248>)
 800e7e4:	f7f2 f9c4 	bl	8000b70 <__aeabi_fsub>
 800e7e8:	2d00      	cmp	r5, #0
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	f73f af4a 	bgt.w	800e684 <__ieee754_asinf+0x5c>
 800e7f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e7f4:	e735      	b.n	800e662 <__ieee754_asinf+0x3a>
 800e7f6:	4601      	mov	r1, r0
 800e7f8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800e7fc:	f7f2 f9ba 	bl	8000b74 <__addsf3>
 800e800:	4651      	mov	r1, sl
 800e802:	4604      	mov	r4, r0
 800e804:	4648      	mov	r0, r9
 800e806:	f7f2 fb71 	bl	8000eec <__aeabi_fdiv>
 800e80a:	4601      	mov	r1, r0
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7f2 fab9 	bl	8000d84 <__aeabi_fmul>
 800e812:	f028 080f 	bic.w	r8, r8, #15
 800e816:	4681      	mov	r9, r0
 800e818:	4641      	mov	r1, r8
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7f2 fab2 	bl	8000d84 <__aeabi_fmul>
 800e820:	4601      	mov	r1, r0
 800e822:	4630      	mov	r0, r6
 800e824:	f7f2 f9a4 	bl	8000b70 <__aeabi_fsub>
 800e828:	4641      	mov	r1, r8
 800e82a:	4604      	mov	r4, r0
 800e82c:	4638      	mov	r0, r7
 800e82e:	f7f2 f9a1 	bl	8000b74 <__addsf3>
 800e832:	4601      	mov	r1, r0
 800e834:	4620      	mov	r0, r4
 800e836:	f7f2 fb59 	bl	8000eec <__aeabi_fdiv>
 800e83a:	4601      	mov	r1, r0
 800e83c:	f7f2 f99a 	bl	8000b74 <__addsf3>
 800e840:	4601      	mov	r1, r0
 800e842:	480c      	ldr	r0, [pc, #48]	; (800e874 <__ieee754_asinf+0x24c>)
 800e844:	f7f2 f994 	bl	8000b70 <__aeabi_fsub>
 800e848:	4601      	mov	r1, r0
 800e84a:	4648      	mov	r0, r9
 800e84c:	f7f2 f990 	bl	8000b70 <__aeabi_fsub>
 800e850:	4641      	mov	r1, r8
 800e852:	4604      	mov	r4, r0
 800e854:	4640      	mov	r0, r8
 800e856:	f7f2 f98d 	bl	8000b74 <__addsf3>
 800e85a:	4601      	mov	r1, r0
 800e85c:	4813      	ldr	r0, [pc, #76]	; (800e8ac <__ieee754_asinf+0x284>)
 800e85e:	f7f2 f987 	bl	8000b70 <__aeabi_fsub>
 800e862:	4601      	mov	r1, r0
 800e864:	4620      	mov	r0, r4
 800e866:	f7f2 f983 	bl	8000b70 <__aeabi_fsub>
 800e86a:	4601      	mov	r1, r0
 800e86c:	480f      	ldr	r0, [pc, #60]	; (800e8ac <__ieee754_asinf+0x284>)
 800e86e:	e7b9      	b.n	800e7e4 <__ieee754_asinf+0x1bc>
 800e870:	3fc90fdb 	.word	0x3fc90fdb
 800e874:	b33bbd2e 	.word	0xb33bbd2e
 800e878:	7149f2ca 	.word	0x7149f2ca
 800e87c:	3811ef08 	.word	0x3811ef08
 800e880:	3a4f7f04 	.word	0x3a4f7f04
 800e884:	3d241146 	.word	0x3d241146
 800e888:	3e4e0aa8 	.word	0x3e4e0aa8
 800e88c:	3ea6b090 	.word	0x3ea6b090
 800e890:	3e2aaaab 	.word	0x3e2aaaab
 800e894:	3d9dc62e 	.word	0x3d9dc62e
 800e898:	3f303361 	.word	0x3f303361
 800e89c:	4001572d 	.word	0x4001572d
 800e8a0:	4019d139 	.word	0x4019d139
 800e8a4:	3f799999 	.word	0x3f799999
 800e8a8:	333bbd2e 	.word	0x333bbd2e
 800e8ac:	3f490fdb 	.word	0x3f490fdb

0800e8b0 <__ieee754_rem_pio2f>:
 800e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b4:	4aa0      	ldr	r2, [pc, #640]	; (800eb38 <__ieee754_rem_pio2f+0x288>)
 800e8b6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800e8ba:	4296      	cmp	r6, r2
 800e8bc:	460c      	mov	r4, r1
 800e8be:	4682      	mov	sl, r0
 800e8c0:	b087      	sub	sp, #28
 800e8c2:	dc04      	bgt.n	800e8ce <__ieee754_rem_pio2f+0x1e>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	6008      	str	r0, [r1, #0]
 800e8c8:	604b      	str	r3, [r1, #4]
 800e8ca:	2500      	movs	r5, #0
 800e8cc:	e01a      	b.n	800e904 <__ieee754_rem_pio2f+0x54>
 800e8ce:	4a9b      	ldr	r2, [pc, #620]	; (800eb3c <__ieee754_rem_pio2f+0x28c>)
 800e8d0:	4296      	cmp	r6, r2
 800e8d2:	dc4b      	bgt.n	800e96c <__ieee754_rem_pio2f+0xbc>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	499a      	ldr	r1, [pc, #616]	; (800eb40 <__ieee754_rem_pio2f+0x290>)
 800e8d8:	4f9a      	ldr	r7, [pc, #616]	; (800eb44 <__ieee754_rem_pio2f+0x294>)
 800e8da:	f026 060f 	bic.w	r6, r6, #15
 800e8de:	dd23      	ble.n	800e928 <__ieee754_rem_pio2f+0x78>
 800e8e0:	f7f2 f946 	bl	8000b70 <__aeabi_fsub>
 800e8e4:	42be      	cmp	r6, r7
 800e8e6:	4605      	mov	r5, r0
 800e8e8:	d010      	beq.n	800e90c <__ieee754_rem_pio2f+0x5c>
 800e8ea:	4997      	ldr	r1, [pc, #604]	; (800eb48 <__ieee754_rem_pio2f+0x298>)
 800e8ec:	f7f2 f940 	bl	8000b70 <__aeabi_fsub>
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	6020      	str	r0, [r4, #0]
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f7f2 f93b 	bl	8000b70 <__aeabi_fsub>
 800e8fa:	4993      	ldr	r1, [pc, #588]	; (800eb48 <__ieee754_rem_pio2f+0x298>)
 800e8fc:	f7f2 f938 	bl	8000b70 <__aeabi_fsub>
 800e900:	2501      	movs	r5, #1
 800e902:	6060      	str	r0, [r4, #4]
 800e904:	4628      	mov	r0, r5
 800e906:	b007      	add	sp, #28
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90c:	498f      	ldr	r1, [pc, #572]	; (800eb4c <__ieee754_rem_pio2f+0x29c>)
 800e90e:	f7f2 f92f 	bl	8000b70 <__aeabi_fsub>
 800e912:	498f      	ldr	r1, [pc, #572]	; (800eb50 <__ieee754_rem_pio2f+0x2a0>)
 800e914:	4605      	mov	r5, r0
 800e916:	f7f2 f92b 	bl	8000b70 <__aeabi_fsub>
 800e91a:	4601      	mov	r1, r0
 800e91c:	6020      	str	r0, [r4, #0]
 800e91e:	4628      	mov	r0, r5
 800e920:	f7f2 f926 	bl	8000b70 <__aeabi_fsub>
 800e924:	498a      	ldr	r1, [pc, #552]	; (800eb50 <__ieee754_rem_pio2f+0x2a0>)
 800e926:	e7e9      	b.n	800e8fc <__ieee754_rem_pio2f+0x4c>
 800e928:	f7f2 f924 	bl	8000b74 <__addsf3>
 800e92c:	42be      	cmp	r6, r7
 800e92e:	4605      	mov	r5, r0
 800e930:	d00e      	beq.n	800e950 <__ieee754_rem_pio2f+0xa0>
 800e932:	4985      	ldr	r1, [pc, #532]	; (800eb48 <__ieee754_rem_pio2f+0x298>)
 800e934:	f7f2 f91e 	bl	8000b74 <__addsf3>
 800e938:	4601      	mov	r1, r0
 800e93a:	6020      	str	r0, [r4, #0]
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7f2 f917 	bl	8000b70 <__aeabi_fsub>
 800e942:	4981      	ldr	r1, [pc, #516]	; (800eb48 <__ieee754_rem_pio2f+0x298>)
 800e944:	f7f2 f916 	bl	8000b74 <__addsf3>
 800e948:	f04f 35ff 	mov.w	r5, #4294967295
 800e94c:	6060      	str	r0, [r4, #4]
 800e94e:	e7d9      	b.n	800e904 <__ieee754_rem_pio2f+0x54>
 800e950:	497e      	ldr	r1, [pc, #504]	; (800eb4c <__ieee754_rem_pio2f+0x29c>)
 800e952:	f7f2 f90f 	bl	8000b74 <__addsf3>
 800e956:	497e      	ldr	r1, [pc, #504]	; (800eb50 <__ieee754_rem_pio2f+0x2a0>)
 800e958:	4605      	mov	r5, r0
 800e95a:	f7f2 f90b 	bl	8000b74 <__addsf3>
 800e95e:	4601      	mov	r1, r0
 800e960:	6020      	str	r0, [r4, #0]
 800e962:	4628      	mov	r0, r5
 800e964:	f7f2 f904 	bl	8000b70 <__aeabi_fsub>
 800e968:	4979      	ldr	r1, [pc, #484]	; (800eb50 <__ieee754_rem_pio2f+0x2a0>)
 800e96a:	e7eb      	b.n	800e944 <__ieee754_rem_pio2f+0x94>
 800e96c:	4a79      	ldr	r2, [pc, #484]	; (800eb54 <__ieee754_rem_pio2f+0x2a4>)
 800e96e:	4296      	cmp	r6, r2
 800e970:	f300 8091 	bgt.w	800ea96 <__ieee754_rem_pio2f+0x1e6>
 800e974:	f7ff fa16 	bl	800dda4 <fabsf>
 800e978:	4977      	ldr	r1, [pc, #476]	; (800eb58 <__ieee754_rem_pio2f+0x2a8>)
 800e97a:	4607      	mov	r7, r0
 800e97c:	f7f2 fa02 	bl	8000d84 <__aeabi_fmul>
 800e980:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e984:	f7f2 f8f6 	bl	8000b74 <__addsf3>
 800e988:	f7f2 fbd8 	bl	800113c <__aeabi_f2iz>
 800e98c:	4605      	mov	r5, r0
 800e98e:	f7f2 f9a5 	bl	8000cdc <__aeabi_i2f>
 800e992:	496b      	ldr	r1, [pc, #428]	; (800eb40 <__ieee754_rem_pio2f+0x290>)
 800e994:	4681      	mov	r9, r0
 800e996:	f7f2 f9f5 	bl	8000d84 <__aeabi_fmul>
 800e99a:	4601      	mov	r1, r0
 800e99c:	4638      	mov	r0, r7
 800e99e:	f7f2 f8e7 	bl	8000b70 <__aeabi_fsub>
 800e9a2:	4969      	ldr	r1, [pc, #420]	; (800eb48 <__ieee754_rem_pio2f+0x298>)
 800e9a4:	4680      	mov	r8, r0
 800e9a6:	4648      	mov	r0, r9
 800e9a8:	f7f2 f9ec 	bl	8000d84 <__aeabi_fmul>
 800e9ac:	2d1f      	cmp	r5, #31
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	dc0c      	bgt.n	800e9cc <__ieee754_rem_pio2f+0x11c>
 800e9b2:	4a6a      	ldr	r2, [pc, #424]	; (800eb5c <__ieee754_rem_pio2f+0x2ac>)
 800e9b4:	1e69      	subs	r1, r5, #1
 800e9b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e9ba:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d004      	beq.n	800e9cc <__ieee754_rem_pio2f+0x11c>
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	f7f2 f8d3 	bl	8000b70 <__aeabi_fsub>
 800e9ca:	e00b      	b.n	800e9e4 <__ieee754_rem_pio2f+0x134>
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f7f2 f8ce 	bl	8000b70 <__aeabi_fsub>
 800e9d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e9d8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800e9dc:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800e9e0:	2e08      	cmp	r6, #8
 800e9e2:	dc01      	bgt.n	800e9e8 <__ieee754_rem_pio2f+0x138>
 800e9e4:	6020      	str	r0, [r4, #0]
 800e9e6:	e026      	b.n	800ea36 <__ieee754_rem_pio2f+0x186>
 800e9e8:	4958      	ldr	r1, [pc, #352]	; (800eb4c <__ieee754_rem_pio2f+0x29c>)
 800e9ea:	4648      	mov	r0, r9
 800e9ec:	f7f2 f9ca 	bl	8000d84 <__aeabi_fmul>
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	f7f2 f8bb 	bl	8000b70 <__aeabi_fsub>
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	4640      	mov	r0, r8
 800ea00:	f7f2 f8b6 	bl	8000b70 <__aeabi_fsub>
 800ea04:	4639      	mov	r1, r7
 800ea06:	f7f2 f8b3 	bl	8000b70 <__aeabi_fsub>
 800ea0a:	4607      	mov	r7, r0
 800ea0c:	4950      	ldr	r1, [pc, #320]	; (800eb50 <__ieee754_rem_pio2f+0x2a0>)
 800ea0e:	4648      	mov	r0, r9
 800ea10:	f7f2 f9b8 	bl	8000d84 <__aeabi_fmul>
 800ea14:	4639      	mov	r1, r7
 800ea16:	f7f2 f8ab 	bl	8000b70 <__aeabi_fsub>
 800ea1a:	4601      	mov	r1, r0
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f7f2 f8a6 	bl	8000b70 <__aeabi_fsub>
 800ea24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ea28:	ebab 0b03 	sub.w	fp, fp, r3
 800ea2c:	f1bb 0f19 	cmp.w	fp, #25
 800ea30:	dc16      	bgt.n	800ea60 <__ieee754_rem_pio2f+0x1b0>
 800ea32:	46b0      	mov	r8, r6
 800ea34:	6020      	str	r0, [r4, #0]
 800ea36:	6826      	ldr	r6, [r4, #0]
 800ea38:	4640      	mov	r0, r8
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	f7f2 f898 	bl	8000b70 <__aeabi_fsub>
 800ea40:	4639      	mov	r1, r7
 800ea42:	f7f2 f895 	bl	8000b70 <__aeabi_fsub>
 800ea46:	f1ba 0f00 	cmp.w	sl, #0
 800ea4a:	6060      	str	r0, [r4, #4]
 800ea4c:	f6bf af5a 	bge.w	800e904 <__ieee754_rem_pio2f+0x54>
 800ea50:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ea54:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ea58:	6026      	str	r6, [r4, #0]
 800ea5a:	6060      	str	r0, [r4, #4]
 800ea5c:	426d      	negs	r5, r5
 800ea5e:	e751      	b.n	800e904 <__ieee754_rem_pio2f+0x54>
 800ea60:	493f      	ldr	r1, [pc, #252]	; (800eb60 <__ieee754_rem_pio2f+0x2b0>)
 800ea62:	4648      	mov	r0, r9
 800ea64:	f7f2 f98e 	bl	8000d84 <__aeabi_fmul>
 800ea68:	4607      	mov	r7, r0
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	f7f2 f87f 	bl	8000b70 <__aeabi_fsub>
 800ea72:	4601      	mov	r1, r0
 800ea74:	4680      	mov	r8, r0
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7f2 f87a 	bl	8000b70 <__aeabi_fsub>
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	f7f2 f877 	bl	8000b70 <__aeabi_fsub>
 800ea82:	4606      	mov	r6, r0
 800ea84:	4937      	ldr	r1, [pc, #220]	; (800eb64 <__ieee754_rem_pio2f+0x2b4>)
 800ea86:	4648      	mov	r0, r9
 800ea88:	f7f2 f97c 	bl	8000d84 <__aeabi_fmul>
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	f7f2 f86f 	bl	8000b70 <__aeabi_fsub>
 800ea92:	4607      	mov	r7, r0
 800ea94:	e795      	b.n	800e9c2 <__ieee754_rem_pio2f+0x112>
 800ea96:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ea9a:	db05      	blt.n	800eaa8 <__ieee754_rem_pio2f+0x1f8>
 800ea9c:	4601      	mov	r1, r0
 800ea9e:	f7f2 f867 	bl	8000b70 <__aeabi_fsub>
 800eaa2:	6060      	str	r0, [r4, #4]
 800eaa4:	6020      	str	r0, [r4, #0]
 800eaa6:	e710      	b.n	800e8ca <__ieee754_rem_pio2f+0x1a>
 800eaa8:	15f7      	asrs	r7, r6, #23
 800eaaa:	3f86      	subs	r7, #134	; 0x86
 800eaac:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7f2 fb43 	bl	800113c <__aeabi_f2iz>
 800eab6:	f7f2 f911 	bl	8000cdc <__aeabi_i2f>
 800eaba:	4601      	mov	r1, r0
 800eabc:	9003      	str	r0, [sp, #12]
 800eabe:	4630      	mov	r0, r6
 800eac0:	f7f2 f856 	bl	8000b70 <__aeabi_fsub>
 800eac4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800eac8:	f7f2 f95c 	bl	8000d84 <__aeabi_fmul>
 800eacc:	4606      	mov	r6, r0
 800eace:	f7f2 fb35 	bl	800113c <__aeabi_f2iz>
 800ead2:	f7f2 f903 	bl	8000cdc <__aeabi_i2f>
 800ead6:	4601      	mov	r1, r0
 800ead8:	9004      	str	r0, [sp, #16]
 800eada:	4605      	mov	r5, r0
 800eadc:	4630      	mov	r0, r6
 800eade:	f7f2 f847 	bl	8000b70 <__aeabi_fsub>
 800eae2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800eae6:	f7f2 f94d 	bl	8000d84 <__aeabi_fmul>
 800eaea:	2100      	movs	r1, #0
 800eaec:	9005      	str	r0, [sp, #20]
 800eaee:	f7f2 fadd 	bl	80010ac <__aeabi_fcmpeq>
 800eaf2:	b1f0      	cbz	r0, 800eb32 <__ieee754_rem_pio2f+0x282>
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7f2 fad8 	bl	80010ac <__aeabi_fcmpeq>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	bf14      	ite	ne
 800eb00:	2301      	movne	r3, #1
 800eb02:	2302      	moveq	r3, #2
 800eb04:	4a18      	ldr	r2, [pc, #96]	; (800eb68 <__ieee754_rem_pio2f+0x2b8>)
 800eb06:	4621      	mov	r1, r4
 800eb08:	9201      	str	r2, [sp, #4]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	a803      	add	r0, sp, #12
 800eb0e:	9200      	str	r2, [sp, #0]
 800eb10:	463a      	mov	r2, r7
 800eb12:	f000 fdbb 	bl	800f68c <__kernel_rem_pio2f>
 800eb16:	f1ba 0f00 	cmp.w	sl, #0
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	f6bf aef2 	bge.w	800e904 <__ieee754_rem_pio2f+0x54>
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb26:	6023      	str	r3, [r4, #0]
 800eb28:	6863      	ldr	r3, [r4, #4]
 800eb2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb2e:	6063      	str	r3, [r4, #4]
 800eb30:	e794      	b.n	800ea5c <__ieee754_rem_pio2f+0x1ac>
 800eb32:	2303      	movs	r3, #3
 800eb34:	e7e6      	b.n	800eb04 <__ieee754_rem_pio2f+0x254>
 800eb36:	bf00      	nop
 800eb38:	3f490fd8 	.word	0x3f490fd8
 800eb3c:	4016cbe3 	.word	0x4016cbe3
 800eb40:	3fc90f80 	.word	0x3fc90f80
 800eb44:	3fc90fd0 	.word	0x3fc90fd0
 800eb48:	37354443 	.word	0x37354443
 800eb4c:	37354400 	.word	0x37354400
 800eb50:	2e85a308 	.word	0x2e85a308
 800eb54:	43490f80 	.word	0x43490f80
 800eb58:	3f22f984 	.word	0x3f22f984
 800eb5c:	080113c0 	.word	0x080113c0
 800eb60:	2e85a300 	.word	0x2e85a300
 800eb64:	248d3132 	.word	0x248d3132
 800eb68:	08011440 	.word	0x08011440

0800eb6c <__ieee754_sqrtf>:
 800eb6c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800eb70:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	4603      	mov	r3, r0
 800eb78:	4604      	mov	r4, r0
 800eb7a:	d309      	bcc.n	800eb90 <__ieee754_sqrtf+0x24>
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	f7f2 f901 	bl	8000d84 <__aeabi_fmul>
 800eb82:	4601      	mov	r1, r0
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7f1 fff5 	bl	8000b74 <__addsf3>
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}
 800eb90:	2a00      	cmp	r2, #0
 800eb92:	d0fb      	beq.n	800eb8c <__ieee754_sqrtf+0x20>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	da06      	bge.n	800eba6 <__ieee754_sqrtf+0x3a>
 800eb98:	4601      	mov	r1, r0
 800eb9a:	f7f1 ffe9 	bl	8000b70 <__aeabi_fsub>
 800eb9e:	4601      	mov	r1, r0
 800eba0:	f7f2 f9a4 	bl	8000eec <__aeabi_fdiv>
 800eba4:	e7f1      	b.n	800eb8a <__ieee754_sqrtf+0x1e>
 800eba6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ebaa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ebae:	d029      	beq.n	800ec04 <__ieee754_sqrtf+0x98>
 800ebb0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ebb4:	07cb      	lsls	r3, r1, #31
 800ebb6:	f04f 0300 	mov.w	r3, #0
 800ebba:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800ebbe:	f04f 0419 	mov.w	r4, #25
 800ebc2:	461e      	mov	r6, r3
 800ebc4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ebc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ebcc:	bf58      	it	pl
 800ebce:	0052      	lslpl	r2, r2, #1
 800ebd0:	1040      	asrs	r0, r0, #1
 800ebd2:	0052      	lsls	r2, r2, #1
 800ebd4:	1875      	adds	r5, r6, r1
 800ebd6:	4295      	cmp	r5, r2
 800ebd8:	bfde      	ittt	le
 800ebda:	186e      	addle	r6, r5, r1
 800ebdc:	1b52      	suble	r2, r2, r5
 800ebde:	185b      	addle	r3, r3, r1
 800ebe0:	3c01      	subs	r4, #1
 800ebe2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ebe6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ebea:	d1f3      	bne.n	800ebd4 <__ieee754_sqrtf+0x68>
 800ebec:	b112      	cbz	r2, 800ebf4 <__ieee754_sqrtf+0x88>
 800ebee:	3301      	adds	r3, #1
 800ebf0:	f023 0301 	bic.w	r3, r3, #1
 800ebf4:	105c      	asrs	r4, r3, #1
 800ebf6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ebfa:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800ebfe:	e7c5      	b.n	800eb8c <__ieee754_sqrtf+0x20>
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	3201      	adds	r2, #1
 800ec04:	0218      	lsls	r0, r3, #8
 800ec06:	d5fb      	bpl.n	800ec00 <__ieee754_sqrtf+0x94>
 800ec08:	3a01      	subs	r2, #1
 800ec0a:	1a89      	subs	r1, r1, r2
 800ec0c:	e7d0      	b.n	800ebb0 <__ieee754_sqrtf+0x44>
	...

0800ec10 <__kernel_cos>:
 800ec10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ec18:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ec1c:	4680      	mov	r8, r0
 800ec1e:	460f      	mov	r7, r1
 800ec20:	e9cd 2300 	strd	r2, r3, [sp]
 800ec24:	da04      	bge.n	800ec30 <__kernel_cos+0x20>
 800ec26:	f7f1 ff07 	bl	8000a38 <__aeabi_d2iz>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	f000 8086 	beq.w	800ed3c <__kernel_cos+0x12c>
 800ec30:	4642      	mov	r2, r8
 800ec32:	463b      	mov	r3, r7
 800ec34:	4640      	mov	r0, r8
 800ec36:	4639      	mov	r1, r7
 800ec38:	f7f1 fc4e 	bl	80004d8 <__aeabi_dmul>
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4b4e      	ldr	r3, [pc, #312]	; (800ed78 <__kernel_cos+0x168>)
 800ec40:	4604      	mov	r4, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	f7f1 fc48 	bl	80004d8 <__aeabi_dmul>
 800ec48:	a33f      	add	r3, pc, #252	; (adr r3, 800ed48 <__kernel_cos+0x138>)
 800ec4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4e:	4682      	mov	sl, r0
 800ec50:	468b      	mov	fp, r1
 800ec52:	4620      	mov	r0, r4
 800ec54:	4629      	mov	r1, r5
 800ec56:	f7f1 fc3f 	bl	80004d8 <__aeabi_dmul>
 800ec5a:	a33d      	add	r3, pc, #244	; (adr r3, 800ed50 <__kernel_cos+0x140>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fa84 	bl	800016c <__adddf3>
 800ec64:	4622      	mov	r2, r4
 800ec66:	462b      	mov	r3, r5
 800ec68:	f7f1 fc36 	bl	80004d8 <__aeabi_dmul>
 800ec6c:	a33a      	add	r3, pc, #232	; (adr r3, 800ed58 <__kernel_cos+0x148>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f7f1 fa79 	bl	8000168 <__aeabi_dsub>
 800ec76:	4622      	mov	r2, r4
 800ec78:	462b      	mov	r3, r5
 800ec7a:	f7f1 fc2d 	bl	80004d8 <__aeabi_dmul>
 800ec7e:	a338      	add	r3, pc, #224	; (adr r3, 800ed60 <__kernel_cos+0x150>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	f7f1 fa72 	bl	800016c <__adddf3>
 800ec88:	4622      	mov	r2, r4
 800ec8a:	462b      	mov	r3, r5
 800ec8c:	f7f1 fc24 	bl	80004d8 <__aeabi_dmul>
 800ec90:	a335      	add	r3, pc, #212	; (adr r3, 800ed68 <__kernel_cos+0x158>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	f7f1 fa67 	bl	8000168 <__aeabi_dsub>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 fc1b 	bl	80004d8 <__aeabi_dmul>
 800eca2:	a333      	add	r3, pc, #204	; (adr r3, 800ed70 <__kernel_cos+0x160>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	f7f1 fa60 	bl	800016c <__adddf3>
 800ecac:	4622      	mov	r2, r4
 800ecae:	462b      	mov	r3, r5
 800ecb0:	f7f1 fc12 	bl	80004d8 <__aeabi_dmul>
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	462b      	mov	r3, r5
 800ecb8:	f7f1 fc0e 	bl	80004d8 <__aeabi_dmul>
 800ecbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	460d      	mov	r5, r1
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f7f1 fc06 	bl	80004d8 <__aeabi_dmul>
 800eccc:	460b      	mov	r3, r1
 800ecce:	4602      	mov	r2, r0
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f7f1 fa48 	bl	8000168 <__aeabi_dsub>
 800ecd8:	4b28      	ldr	r3, [pc, #160]	; (800ed7c <__kernel_cos+0x16c>)
 800ecda:	4680      	mov	r8, r0
 800ecdc:	429e      	cmp	r6, r3
 800ecde:	4689      	mov	r9, r1
 800ece0:	dc0e      	bgt.n	800ed00 <__kernel_cos+0xf0>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4650      	mov	r0, sl
 800ece8:	4659      	mov	r1, fp
 800ecea:	f7f1 fa3d 	bl	8000168 <__aeabi_dsub>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4922      	ldr	r1, [pc, #136]	; (800ed80 <__kernel_cos+0x170>)
 800ecf6:	f7f1 fa37 	bl	8000168 <__aeabi_dsub>
 800ecfa:	b003      	add	sp, #12
 800ecfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed00:	2400      	movs	r4, #0
 800ed02:	4b20      	ldr	r3, [pc, #128]	; (800ed84 <__kernel_cos+0x174>)
 800ed04:	4622      	mov	r2, r4
 800ed06:	429e      	cmp	r6, r3
 800ed08:	bfcc      	ite	gt
 800ed0a:	4d1f      	ldrgt	r5, [pc, #124]	; (800ed88 <__kernel_cos+0x178>)
 800ed0c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ed10:	462b      	mov	r3, r5
 800ed12:	2000      	movs	r0, #0
 800ed14:	491a      	ldr	r1, [pc, #104]	; (800ed80 <__kernel_cos+0x170>)
 800ed16:	f7f1 fa27 	bl	8000168 <__aeabi_dsub>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	462b      	mov	r3, r5
 800ed22:	4650      	mov	r0, sl
 800ed24:	4659      	mov	r1, fp
 800ed26:	f7f1 fa1f 	bl	8000168 <__aeabi_dsub>
 800ed2a:	4642      	mov	r2, r8
 800ed2c:	464b      	mov	r3, r9
 800ed2e:	f7f1 fa1b 	bl	8000168 <__aeabi_dsub>
 800ed32:	4602      	mov	r2, r0
 800ed34:	460b      	mov	r3, r1
 800ed36:	4630      	mov	r0, r6
 800ed38:	4639      	mov	r1, r7
 800ed3a:	e7dc      	b.n	800ecf6 <__kernel_cos+0xe6>
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4910      	ldr	r1, [pc, #64]	; (800ed80 <__kernel_cos+0x170>)
 800ed40:	e7db      	b.n	800ecfa <__kernel_cos+0xea>
 800ed42:	bf00      	nop
 800ed44:	f3af 8000 	nop.w
 800ed48:	be8838d4 	.word	0xbe8838d4
 800ed4c:	bda8fae9 	.word	0xbda8fae9
 800ed50:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed54:	3e21ee9e 	.word	0x3e21ee9e
 800ed58:	809c52ad 	.word	0x809c52ad
 800ed5c:	3e927e4f 	.word	0x3e927e4f
 800ed60:	19cb1590 	.word	0x19cb1590
 800ed64:	3efa01a0 	.word	0x3efa01a0
 800ed68:	16c15177 	.word	0x16c15177
 800ed6c:	3f56c16c 	.word	0x3f56c16c
 800ed70:	5555554c 	.word	0x5555554c
 800ed74:	3fa55555 	.word	0x3fa55555
 800ed78:	3fe00000 	.word	0x3fe00000
 800ed7c:	3fd33332 	.word	0x3fd33332
 800ed80:	3ff00000 	.word	0x3ff00000
 800ed84:	3fe90000 	.word	0x3fe90000
 800ed88:	3fd20000 	.word	0x3fd20000

0800ed8c <__kernel_rem_pio2>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ed94:	9308      	str	r3, [sp, #32]
 800ed96:	9101      	str	r1, [sp, #4]
 800ed98:	4bc0      	ldr	r3, [pc, #768]	; (800f09c <__kernel_rem_pio2+0x310>)
 800ed9a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ed9c:	f112 0f14 	cmn.w	r2, #20
 800eda0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda4:	bfa8      	it	ge
 800eda6:	1ed4      	subge	r4, r2, #3
 800eda8:	9304      	str	r3, [sp, #16]
 800edaa:	9b08      	ldr	r3, [sp, #32]
 800edac:	bfb8      	it	lt
 800edae:	2400      	movlt	r4, #0
 800edb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800edb4:	9306      	str	r3, [sp, #24]
 800edb6:	bfa4      	itt	ge
 800edb8:	2318      	movge	r3, #24
 800edba:	fb94 f4f3 	sdivge	r4, r4, r3
 800edbe:	f06f 0317 	mvn.w	r3, #23
 800edc2:	fb04 3303 	mla	r3, r4, r3, r3
 800edc6:	eb03 0a02 	add.w	sl, r3, r2
 800edca:	9a06      	ldr	r2, [sp, #24]
 800edcc:	9b04      	ldr	r3, [sp, #16]
 800edce:	1aa7      	subs	r7, r4, r2
 800edd0:	eb03 0802 	add.w	r8, r3, r2
 800edd4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800edd6:	2500      	movs	r5, #0
 800edd8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eddc:	2200      	movs	r2, #0
 800edde:	2300      	movs	r3, #0
 800ede0:	9009      	str	r0, [sp, #36]	; 0x24
 800ede2:	ae20      	add	r6, sp, #128	; 0x80
 800ede4:	4545      	cmp	r5, r8
 800ede6:	dd19      	ble.n	800ee1c <__kernel_rem_pio2+0x90>
 800ede8:	9b08      	ldr	r3, [sp, #32]
 800edea:	aa20      	add	r2, sp, #128	; 0x80
 800edec:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800edf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800edf4:	f1c3 0301 	rsb	r3, r3, #1
 800edf8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800edfc:	9307      	str	r3, [sp, #28]
 800edfe:	9b07      	ldr	r3, [sp, #28]
 800ee00:	9a04      	ldr	r2, [sp, #16]
 800ee02:	4443      	add	r3, r8
 800ee04:	429a      	cmp	r2, r3
 800ee06:	db35      	blt.n	800ee74 <__kernel_rem_pio2+0xe8>
 800ee08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f1a3 0908 	sub.w	r9, r3, #8
 800ee10:	2300      	movs	r3, #0
 800ee12:	462f      	mov	r7, r5
 800ee14:	2600      	movs	r6, #0
 800ee16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee1a:	e01f      	b.n	800ee5c <__kernel_rem_pio2+0xd0>
 800ee1c:	42ef      	cmn	r7, r5
 800ee1e:	d40b      	bmi.n	800ee38 <__kernel_rem_pio2+0xac>
 800ee20:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee28:	f7f1 faec 	bl	8000404 <__aeabi_i2d>
 800ee2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee30:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee34:	3501      	adds	r5, #1
 800ee36:	e7d5      	b.n	800ede4 <__kernel_rem_pio2+0x58>
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	e7f8      	b.n	800ee30 <__kernel_rem_pio2+0xa4>
 800ee3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee42:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ee46:	f7f1 fb47 	bl	80004d8 <__aeabi_dmul>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee52:	f7f1 f98b 	bl	800016c <__adddf3>
 800ee56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee5a:	3601      	adds	r6, #1
 800ee5c:	9b06      	ldr	r3, [sp, #24]
 800ee5e:	3f08      	subs	r7, #8
 800ee60:	429e      	cmp	r6, r3
 800ee62:	ddec      	ble.n	800ee3e <__kernel_rem_pio2+0xb2>
 800ee64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee68:	3508      	adds	r5, #8
 800ee6a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800ee6e:	f108 0801 	add.w	r8, r8, #1
 800ee72:	e7c4      	b.n	800edfe <__kernel_rem_pio2+0x72>
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	aa0c      	add	r2, sp, #48	; 0x30
 800ee78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee7e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ee80:	9f04      	ldr	r7, [sp, #16]
 800ee82:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee86:	930a      	str	r3, [sp, #40]	; 0x28
 800ee88:	463e      	mov	r6, r7
 800ee8a:	ab98      	add	r3, sp, #608	; 0x260
 800ee8c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ee90:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee94:	f8cd b008 	str.w	fp, [sp, #8]
 800ee98:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	dc71      	bgt.n	800ef84 <__kernel_rem_pio2+0x1f8>
 800eea0:	4652      	mov	r2, sl
 800eea2:	4620      	mov	r0, r4
 800eea4:	4629      	mov	r1, r5
 800eea6:	f001 fa5b 	bl	8010360 <scalbn>
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	460d      	mov	r5, r1
 800eeb4:	f7f1 fb10 	bl	80004d8 <__aeabi_dmul>
 800eeb8:	f001 f9d2 	bl	8010260 <floor>
 800eebc:	2200      	movs	r2, #0
 800eebe:	4b78      	ldr	r3, [pc, #480]	; (800f0a0 <__kernel_rem_pio2+0x314>)
 800eec0:	f7f1 fb0a 	bl	80004d8 <__aeabi_dmul>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4620      	mov	r0, r4
 800eeca:	4629      	mov	r1, r5
 800eecc:	f7f1 f94c 	bl	8000168 <__aeabi_dsub>
 800eed0:	460d      	mov	r5, r1
 800eed2:	4604      	mov	r4, r0
 800eed4:	f7f1 fdb0 	bl	8000a38 <__aeabi_d2iz>
 800eed8:	9007      	str	r0, [sp, #28]
 800eeda:	f7f1 fa93 	bl	8000404 <__aeabi_i2d>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f1 f93f 	bl	8000168 <__aeabi_dsub>
 800eeea:	f1ba 0f00 	cmp.w	sl, #0
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	dd70      	ble.n	800efd6 <__kernel_rem_pio2+0x24a>
 800eef4:	1e7a      	subs	r2, r7, #1
 800eef6:	ab0c      	add	r3, sp, #48	; 0x30
 800eef8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eefc:	9c07      	ldr	r4, [sp, #28]
 800eefe:	f1ca 0118 	rsb	r1, sl, #24
 800ef02:	fa40 f301 	asr.w	r3, r0, r1
 800ef06:	441c      	add	r4, r3
 800ef08:	408b      	lsls	r3, r1
 800ef0a:	1ac0      	subs	r0, r0, r3
 800ef0c:	ab0c      	add	r3, sp, #48	; 0x30
 800ef0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ef12:	f1ca 0317 	rsb	r3, sl, #23
 800ef16:	9407      	str	r4, [sp, #28]
 800ef18:	fa40 f303 	asr.w	r3, r0, r3
 800ef1c:	9302      	str	r3, [sp, #8]
 800ef1e:	9b02      	ldr	r3, [sp, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	dd66      	ble.n	800eff2 <__kernel_rem_pio2+0x266>
 800ef24:	2200      	movs	r2, #0
 800ef26:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef2a:	4614      	mov	r4, r2
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	9307      	str	r3, [sp, #28]
 800ef32:	4297      	cmp	r7, r2
 800ef34:	f300 809f 	bgt.w	800f076 <__kernel_rem_pio2+0x2ea>
 800ef38:	f1ba 0f00 	cmp.w	sl, #0
 800ef3c:	dd07      	ble.n	800ef4e <__kernel_rem_pio2+0x1c2>
 800ef3e:	f1ba 0f01 	cmp.w	sl, #1
 800ef42:	f000 80b9 	beq.w	800f0b8 <__kernel_rem_pio2+0x32c>
 800ef46:	f1ba 0f02 	cmp.w	sl, #2
 800ef4a:	f000 80bf 	beq.w	800f0cc <__kernel_rem_pio2+0x340>
 800ef4e:	9b02      	ldr	r3, [sp, #8]
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d14e      	bne.n	800eff2 <__kernel_rem_pio2+0x266>
 800ef54:	4642      	mov	r2, r8
 800ef56:	464b      	mov	r3, r9
 800ef58:	2000      	movs	r0, #0
 800ef5a:	4952      	ldr	r1, [pc, #328]	; (800f0a4 <__kernel_rem_pio2+0x318>)
 800ef5c:	f7f1 f904 	bl	8000168 <__aeabi_dsub>
 800ef60:	4680      	mov	r8, r0
 800ef62:	4689      	mov	r9, r1
 800ef64:	2c00      	cmp	r4, #0
 800ef66:	d044      	beq.n	800eff2 <__kernel_rem_pio2+0x266>
 800ef68:	4652      	mov	r2, sl
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	494d      	ldr	r1, [pc, #308]	; (800f0a4 <__kernel_rem_pio2+0x318>)
 800ef6e:	f001 f9f7 	bl	8010360 <scalbn>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4640      	mov	r0, r8
 800ef78:	4649      	mov	r1, r9
 800ef7a:	f7f1 f8f5 	bl	8000168 <__aeabi_dsub>
 800ef7e:	4680      	mov	r8, r0
 800ef80:	4689      	mov	r9, r1
 800ef82:	e036      	b.n	800eff2 <__kernel_rem_pio2+0x266>
 800ef84:	2200      	movs	r2, #0
 800ef86:	4b48      	ldr	r3, [pc, #288]	; (800f0a8 <__kernel_rem_pio2+0x31c>)
 800ef88:	4620      	mov	r0, r4
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	f7f1 faa4 	bl	80004d8 <__aeabi_dmul>
 800ef90:	f7f1 fd52 	bl	8000a38 <__aeabi_d2iz>
 800ef94:	f7f1 fa36 	bl	8000404 <__aeabi_i2d>
 800ef98:	2200      	movs	r2, #0
 800ef9a:	4b44      	ldr	r3, [pc, #272]	; (800f0ac <__kernel_rem_pio2+0x320>)
 800ef9c:	4680      	mov	r8, r0
 800ef9e:	4689      	mov	r9, r1
 800efa0:	f7f1 fa9a 	bl	80004d8 <__aeabi_dmul>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4620      	mov	r0, r4
 800efaa:	4629      	mov	r1, r5
 800efac:	f7f1 f8dc 	bl	8000168 <__aeabi_dsub>
 800efb0:	f7f1 fd42 	bl	8000a38 <__aeabi_d2iz>
 800efb4:	9b02      	ldr	r3, [sp, #8]
 800efb6:	3e01      	subs	r6, #1
 800efb8:	f843 0b04 	str.w	r0, [r3], #4
 800efbc:	9302      	str	r3, [sp, #8]
 800efbe:	ab70      	add	r3, sp, #448	; 0x1c0
 800efc0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800efc4:	4640      	mov	r0, r8
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	4649      	mov	r1, r9
 800efcc:	f7f1 f8ce 	bl	800016c <__adddf3>
 800efd0:	4604      	mov	r4, r0
 800efd2:	460d      	mov	r5, r1
 800efd4:	e762      	b.n	800ee9c <__kernel_rem_pio2+0x110>
 800efd6:	d105      	bne.n	800efe4 <__kernel_rem_pio2+0x258>
 800efd8:	1e7b      	subs	r3, r7, #1
 800efda:	aa0c      	add	r2, sp, #48	; 0x30
 800efdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800efe0:	15c3      	asrs	r3, r0, #23
 800efe2:	e79b      	b.n	800ef1c <__kernel_rem_pio2+0x190>
 800efe4:	2200      	movs	r2, #0
 800efe6:	4b32      	ldr	r3, [pc, #200]	; (800f0b0 <__kernel_rem_pio2+0x324>)
 800efe8:	f7f1 fcfc 	bl	80009e4 <__aeabi_dcmpge>
 800efec:	2800      	cmp	r0, #0
 800efee:	d13f      	bne.n	800f070 <__kernel_rem_pio2+0x2e4>
 800eff0:	9002      	str	r0, [sp, #8]
 800eff2:	2200      	movs	r2, #0
 800eff4:	2300      	movs	r3, #0
 800eff6:	4640      	mov	r0, r8
 800eff8:	4649      	mov	r1, r9
 800effa:	f7f1 fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 800effe:	2800      	cmp	r0, #0
 800f000:	f000 80b5 	beq.w	800f16e <__kernel_rem_pio2+0x3e2>
 800f004:	1e7c      	subs	r4, r7, #1
 800f006:	4623      	mov	r3, r4
 800f008:	2200      	movs	r2, #0
 800f00a:	9904      	ldr	r1, [sp, #16]
 800f00c:	428b      	cmp	r3, r1
 800f00e:	da64      	bge.n	800f0da <__kernel_rem_pio2+0x34e>
 800f010:	2a00      	cmp	r2, #0
 800f012:	d078      	beq.n	800f106 <__kernel_rem_pio2+0x37a>
 800f014:	ab0c      	add	r3, sp, #48	; 0x30
 800f016:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f01a:	f1aa 0a18 	sub.w	sl, sl, #24
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f000 80a3 	beq.w	800f16a <__kernel_rem_pio2+0x3de>
 800f024:	4652      	mov	r2, sl
 800f026:	2000      	movs	r0, #0
 800f028:	491e      	ldr	r1, [pc, #120]	; (800f0a4 <__kernel_rem_pio2+0x318>)
 800f02a:	f001 f999 	bl	8010360 <scalbn>
 800f02e:	46a2      	mov	sl, r4
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	f04f 0800 	mov.w	r8, #0
 800f038:	00e3      	lsls	r3, r4, #3
 800f03a:	9306      	str	r3, [sp, #24]
 800f03c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800f0a8 <__kernel_rem_pio2+0x31c>
 800f040:	ab70      	add	r3, sp, #448	; 0x1c0
 800f042:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800f046:	f1ba 0f00 	cmp.w	sl, #0
 800f04a:	f280 80c6 	bge.w	800f1da <__kernel_rem_pio2+0x44e>
 800f04e:	4627      	mov	r7, r4
 800f050:	f04f 0800 	mov.w	r8, #0
 800f054:	2f00      	cmp	r7, #0
 800f056:	f2c0 80f3 	blt.w	800f240 <__kernel_rem_pio2+0x4b4>
 800f05a:	4b16      	ldr	r3, [pc, #88]	; (800f0b4 <__kernel_rem_pio2+0x328>)
 800f05c:	f04f 0a00 	mov.w	sl, #0
 800f060:	461d      	mov	r5, r3
 800f062:	ab70      	add	r3, sp, #448	; 0x1c0
 800f064:	f04f 0b00 	mov.w	fp, #0
 800f068:	2600      	movs	r6, #0
 800f06a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f06e:	e0d9      	b.n	800f224 <__kernel_rem_pio2+0x498>
 800f070:	2302      	movs	r3, #2
 800f072:	9302      	str	r3, [sp, #8]
 800f074:	e756      	b.n	800ef24 <__kernel_rem_pio2+0x198>
 800f076:	f8db 3000 	ldr.w	r3, [fp]
 800f07a:	b954      	cbnz	r4, 800f092 <__kernel_rem_pio2+0x306>
 800f07c:	b123      	cbz	r3, 800f088 <__kernel_rem_pio2+0x2fc>
 800f07e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f082:	f8cb 3000 	str.w	r3, [fp]
 800f086:	2301      	movs	r3, #1
 800f088:	461c      	mov	r4, r3
 800f08a:	3201      	adds	r2, #1
 800f08c:	f10b 0b04 	add.w	fp, fp, #4
 800f090:	e74f      	b.n	800ef32 <__kernel_rem_pio2+0x1a6>
 800f092:	1acb      	subs	r3, r1, r3
 800f094:	f8cb 3000 	str.w	r3, [fp]
 800f098:	4623      	mov	r3, r4
 800f09a:	e7f5      	b.n	800f088 <__kernel_rem_pio2+0x2fc>
 800f09c:	08011798 	.word	0x08011798
 800f0a0:	40200000 	.word	0x40200000
 800f0a4:	3ff00000 	.word	0x3ff00000
 800f0a8:	3e700000 	.word	0x3e700000
 800f0ac:	41700000 	.word	0x41700000
 800f0b0:	3fe00000 	.word	0x3fe00000
 800f0b4:	08011758 	.word	0x08011758
 800f0b8:	1e7a      	subs	r2, r7, #1
 800f0ba:	ab0c      	add	r3, sp, #48	; 0x30
 800f0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0c4:	a90c      	add	r1, sp, #48	; 0x30
 800f0c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0ca:	e740      	b.n	800ef4e <__kernel_rem_pio2+0x1c2>
 800f0cc:	1e7a      	subs	r2, r7, #1
 800f0ce:	ab0c      	add	r3, sp, #48	; 0x30
 800f0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0d8:	e7f4      	b.n	800f0c4 <__kernel_rem_pio2+0x338>
 800f0da:	a90c      	add	r1, sp, #48	; 0x30
 800f0dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	e791      	b.n	800f00a <__kernel_rem_pio2+0x27e>
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f0ec:	2a00      	cmp	r2, #0
 800f0ee:	d0fa      	beq.n	800f0e6 <__kernel_rem_pio2+0x35a>
 800f0f0:	9b08      	ldr	r3, [sp, #32]
 800f0f2:	1c7e      	adds	r6, r7, #1
 800f0f4:	18fd      	adds	r5, r7, r3
 800f0f6:	ab20      	add	r3, sp, #128	; 0x80
 800f0f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f0fc:	443c      	add	r4, r7
 800f0fe:	42b4      	cmp	r4, r6
 800f100:	da04      	bge.n	800f10c <__kernel_rem_pio2+0x380>
 800f102:	4627      	mov	r7, r4
 800f104:	e6c0      	b.n	800ee88 <__kernel_rem_pio2+0xfc>
 800f106:	2401      	movs	r4, #1
 800f108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f10a:	e7ed      	b.n	800f0e8 <__kernel_rem_pio2+0x35c>
 800f10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10e:	462f      	mov	r7, r5
 800f110:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f114:	f7f1 f976 	bl	8000404 <__aeabi_i2d>
 800f118:	f04f 0b00 	mov.w	fp, #0
 800f11c:	f04f 0800 	mov.w	r8, #0
 800f120:	f04f 0900 	mov.w	r9, #0
 800f124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f126:	e8e7 0102 	strd	r0, r1, [r7], #8
 800f12a:	3b08      	subs	r3, #8
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	9b06      	ldr	r3, [sp, #24]
 800f130:	459b      	cmp	fp, r3
 800f132:	dd07      	ble.n	800f144 <__kernel_rem_pio2+0x3b8>
 800f134:	ab70      	add	r3, sp, #448	; 0x1c0
 800f136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f13a:	463d      	mov	r5, r7
 800f13c:	e9c3 8900 	strd	r8, r9, [r3]
 800f140:	3601      	adds	r6, #1
 800f142:	e7dc      	b.n	800f0fe <__kernel_rem_pio2+0x372>
 800f144:	9902      	ldr	r1, [sp, #8]
 800f146:	f10b 0b01 	add.w	fp, fp, #1
 800f14a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800f14e:	9102      	str	r1, [sp, #8]
 800f150:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800f154:	f7f1 f9c0 	bl	80004d8 <__aeabi_dmul>
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	4640      	mov	r0, r8
 800f15e:	4649      	mov	r1, r9
 800f160:	f7f1 f804 	bl	800016c <__adddf3>
 800f164:	4680      	mov	r8, r0
 800f166:	4689      	mov	r9, r1
 800f168:	e7e1      	b.n	800f12e <__kernel_rem_pio2+0x3a2>
 800f16a:	3c01      	subs	r4, #1
 800f16c:	e752      	b.n	800f014 <__kernel_rem_pio2+0x288>
 800f16e:	f1ca 0200 	rsb	r2, sl, #0
 800f172:	4640      	mov	r0, r8
 800f174:	4649      	mov	r1, r9
 800f176:	f001 f8f3 	bl	8010360 <scalbn>
 800f17a:	2200      	movs	r2, #0
 800f17c:	4ba5      	ldr	r3, [pc, #660]	; (800f414 <__kernel_rem_pio2+0x688>)
 800f17e:	4604      	mov	r4, r0
 800f180:	460d      	mov	r5, r1
 800f182:	f7f1 fc2f 	bl	80009e4 <__aeabi_dcmpge>
 800f186:	b1f8      	cbz	r0, 800f1c8 <__kernel_rem_pio2+0x43c>
 800f188:	2200      	movs	r2, #0
 800f18a:	4ba3      	ldr	r3, [pc, #652]	; (800f418 <__kernel_rem_pio2+0x68c>)
 800f18c:	4620      	mov	r0, r4
 800f18e:	4629      	mov	r1, r5
 800f190:	f7f1 f9a2 	bl	80004d8 <__aeabi_dmul>
 800f194:	f7f1 fc50 	bl	8000a38 <__aeabi_d2iz>
 800f198:	4606      	mov	r6, r0
 800f19a:	f7f1 f933 	bl	8000404 <__aeabi_i2d>
 800f19e:	2200      	movs	r2, #0
 800f1a0:	4b9c      	ldr	r3, [pc, #624]	; (800f414 <__kernel_rem_pio2+0x688>)
 800f1a2:	f7f1 f999 	bl	80004d8 <__aeabi_dmul>
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7f0 ffdb 	bl	8000168 <__aeabi_dsub>
 800f1b2:	f7f1 fc41 	bl	8000a38 <__aeabi_d2iz>
 800f1b6:	1c7c      	adds	r4, r7, #1
 800f1b8:	ab0c      	add	r3, sp, #48	; 0x30
 800f1ba:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f1be:	f10a 0a18 	add.w	sl, sl, #24
 800f1c2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800f1c6:	e72d      	b.n	800f024 <__kernel_rem_pio2+0x298>
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	4629      	mov	r1, r5
 800f1cc:	f7f1 fc34 	bl	8000a38 <__aeabi_d2iz>
 800f1d0:	ab0c      	add	r3, sp, #48	; 0x30
 800f1d2:	463c      	mov	r4, r7
 800f1d4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f1d8:	e724      	b.n	800f024 <__kernel_rem_pio2+0x298>
 800f1da:	ab0c      	add	r3, sp, #48	; 0x30
 800f1dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f1e0:	f7f1 f910 	bl	8000404 <__aeabi_i2d>
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	463b      	mov	r3, r7
 800f1e8:	f7f1 f976 	bl	80004d8 <__aeabi_dmul>
 800f1ec:	4642      	mov	r2, r8
 800f1ee:	e86b 0102 	strd	r0, r1, [fp], #-8
 800f1f2:	464b      	mov	r3, r9
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	f7f1 f96e 	bl	80004d8 <__aeabi_dmul>
 800f1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f200:	4606      	mov	r6, r0
 800f202:	460f      	mov	r7, r1
 800f204:	e71f      	b.n	800f046 <__kernel_rem_pio2+0x2ba>
 800f206:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f20a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f20e:	f7f1 f963 	bl	80004d8 <__aeabi_dmul>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4650      	mov	r0, sl
 800f218:	4659      	mov	r1, fp
 800f21a:	f7f0 ffa7 	bl	800016c <__adddf3>
 800f21e:	4682      	mov	sl, r0
 800f220:	468b      	mov	fp, r1
 800f222:	3601      	adds	r6, #1
 800f224:	9b04      	ldr	r3, [sp, #16]
 800f226:	429e      	cmp	r6, r3
 800f228:	dc01      	bgt.n	800f22e <__kernel_rem_pio2+0x4a2>
 800f22a:	45b0      	cmp	r8, r6
 800f22c:	daeb      	bge.n	800f206 <__kernel_rem_pio2+0x47a>
 800f22e:	ab48      	add	r3, sp, #288	; 0x120
 800f230:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f234:	e9c3 ab00 	strd	sl, fp, [r3]
 800f238:	3f01      	subs	r7, #1
 800f23a:	f108 0801 	add.w	r8, r8, #1
 800f23e:	e709      	b.n	800f054 <__kernel_rem_pio2+0x2c8>
 800f240:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f242:	2b02      	cmp	r3, #2
 800f244:	dc09      	bgt.n	800f25a <__kernel_rem_pio2+0x4ce>
 800f246:	2b00      	cmp	r3, #0
 800f248:	dc34      	bgt.n	800f2b4 <__kernel_rem_pio2+0x528>
 800f24a:	d05e      	beq.n	800f30a <__kernel_rem_pio2+0x57e>
 800f24c:	9b07      	ldr	r3, [sp, #28]
 800f24e:	f003 0007 	and.w	r0, r3, #7
 800f252:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f25c:	2b03      	cmp	r3, #3
 800f25e:	d1f5      	bne.n	800f24c <__kernel_rem_pio2+0x4c0>
 800f260:	9a06      	ldr	r2, [sp, #24]
 800f262:	ab48      	add	r3, sp, #288	; 0x120
 800f264:	441a      	add	r2, r3
 800f266:	4615      	mov	r5, r2
 800f268:	4692      	mov	sl, r2
 800f26a:	46a3      	mov	fp, r4
 800f26c:	f1bb 0f00 	cmp.w	fp, #0
 800f270:	dc7a      	bgt.n	800f368 <__kernel_rem_pio2+0x5dc>
 800f272:	46aa      	mov	sl, r5
 800f274:	46a3      	mov	fp, r4
 800f276:	f1bb 0f01 	cmp.w	fp, #1
 800f27a:	f300 8094 	bgt.w	800f3a6 <__kernel_rem_pio2+0x61a>
 800f27e:	2700      	movs	r7, #0
 800f280:	463e      	mov	r6, r7
 800f282:	2c01      	cmp	r4, #1
 800f284:	f300 80ae 	bgt.w	800f3e4 <__kernel_rem_pio2+0x658>
 800f288:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800f28c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800f290:	9b02      	ldr	r3, [sp, #8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f040 80b0 	bne.w	800f3f8 <__kernel_rem_pio2+0x66c>
 800f298:	4603      	mov	r3, r0
 800f29a:	462a      	mov	r2, r5
 800f29c:	9801      	ldr	r0, [sp, #4]
 800f29e:	e9c0 2300 	strd	r2, r3, [r0]
 800f2a2:	4622      	mov	r2, r4
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f2aa:	463a      	mov	r2, r7
 800f2ac:	4633      	mov	r3, r6
 800f2ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f2b2:	e7cb      	b.n	800f24c <__kernel_rem_pio2+0x4c0>
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	9a06      	ldr	r2, [sp, #24]
 800f2b8:	ab48      	add	r3, sp, #288	; 0x120
 800f2ba:	441a      	add	r2, r3
 800f2bc:	4615      	mov	r5, r2
 800f2be:	46a0      	mov	r8, r4
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	f1b8 0f00 	cmp.w	r8, #0
 800f2c6:	da3c      	bge.n	800f342 <__kernel_rem_pio2+0x5b6>
 800f2c8:	9b02      	ldr	r3, [sp, #8]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d040      	beq.n	800f350 <__kernel_rem_pio2+0x5c4>
 800f2ce:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	9d01      	ldr	r5, [sp, #4]
 800f2d8:	2601      	movs	r6, #1
 800f2da:	e9c5 2300 	strd	r2, r3, [r5]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f2e4:	f7f0 ff40 	bl	8000168 <__aeabi_dsub>
 800f2e8:	4684      	mov	ip, r0
 800f2ea:	460f      	mov	r7, r1
 800f2ec:	ad48      	add	r5, sp, #288	; 0x120
 800f2ee:	42b4      	cmp	r4, r6
 800f2f0:	f105 0508 	add.w	r5, r5, #8
 800f2f4:	da2e      	bge.n	800f354 <__kernel_rem_pio2+0x5c8>
 800f2f6:	9b02      	ldr	r3, [sp, #8]
 800f2f8:	b10b      	cbz	r3, 800f2fe <__kernel_rem_pio2+0x572>
 800f2fa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f2fe:	4662      	mov	r2, ip
 800f300:	463b      	mov	r3, r7
 800f302:	9901      	ldr	r1, [sp, #4]
 800f304:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f308:	e7a0      	b.n	800f24c <__kernel_rem_pio2+0x4c0>
 800f30a:	9a06      	ldr	r2, [sp, #24]
 800f30c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800f30e:	ab48      	add	r3, sp, #288	; 0x120
 800f310:	441a      	add	r2, r3
 800f312:	4615      	mov	r5, r2
 800f314:	4637      	mov	r7, r6
 800f316:	2c00      	cmp	r4, #0
 800f318:	da09      	bge.n	800f32e <__kernel_rem_pio2+0x5a2>
 800f31a:	9b02      	ldr	r3, [sp, #8]
 800f31c:	b10b      	cbz	r3, 800f322 <__kernel_rem_pio2+0x596>
 800f31e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800f322:	4632      	mov	r2, r6
 800f324:	463b      	mov	r3, r7
 800f326:	9901      	ldr	r1, [sp, #4]
 800f328:	e9c1 2300 	strd	r2, r3, [r1]
 800f32c:	e78e      	b.n	800f24c <__kernel_rem_pio2+0x4c0>
 800f32e:	4630      	mov	r0, r6
 800f330:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f334:	4639      	mov	r1, r7
 800f336:	f7f0 ff19 	bl	800016c <__adddf3>
 800f33a:	3c01      	subs	r4, #1
 800f33c:	4606      	mov	r6, r0
 800f33e:	460f      	mov	r7, r1
 800f340:	e7e9      	b.n	800f316 <__kernel_rem_pio2+0x58a>
 800f342:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f346:	f7f0 ff11 	bl	800016c <__adddf3>
 800f34a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f34e:	e7b8      	b.n	800f2c2 <__kernel_rem_pio2+0x536>
 800f350:	460d      	mov	r5, r1
 800f352:	e7be      	b.n	800f2d2 <__kernel_rem_pio2+0x546>
 800f354:	4660      	mov	r0, ip
 800f356:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f0 ff06 	bl	800016c <__adddf3>
 800f360:	3601      	adds	r6, #1
 800f362:	4684      	mov	ip, r0
 800f364:	460f      	mov	r7, r1
 800f366:	e7c2      	b.n	800f2ee <__kernel_rem_pio2+0x562>
 800f368:	e9da 6700 	ldrd	r6, r7, [sl]
 800f36c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800f370:	4632      	mov	r2, r6
 800f372:	463b      	mov	r3, r7
 800f374:	4640      	mov	r0, r8
 800f376:	4649      	mov	r1, r9
 800f378:	f7f0 fef8 	bl	800016c <__adddf3>
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f384:	4640      	mov	r0, r8
 800f386:	4649      	mov	r1, r9
 800f388:	f7f0 feee 	bl	8000168 <__aeabi_dsub>
 800f38c:	4632      	mov	r2, r6
 800f38e:	463b      	mov	r3, r7
 800f390:	f7f0 feec 	bl	800016c <__adddf3>
 800f394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f398:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f39c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3a0:	e9ca 2300 	strd	r2, r3, [sl]
 800f3a4:	e762      	b.n	800f26c <__kernel_rem_pio2+0x4e0>
 800f3a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3aa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800f3ae:	4642      	mov	r2, r8
 800f3b0:	464b      	mov	r3, r9
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	f7f0 fed9 	bl	800016c <__adddf3>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	460b      	mov	r3, r1
 800f3be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	f7f0 fecf 	bl	8000168 <__aeabi_dsub>
 800f3ca:	4642      	mov	r2, r8
 800f3cc:	464b      	mov	r3, r9
 800f3ce:	f7f0 fecd 	bl	800016c <__adddf3>
 800f3d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3d6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800f3da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3de:	e9ca 2300 	strd	r2, r3, [sl]
 800f3e2:	e748      	b.n	800f276 <__kernel_rem_pio2+0x4ea>
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	f7f0 febe 	bl	800016c <__adddf3>
 800f3f0:	3c01      	subs	r4, #1
 800f3f2:	4607      	mov	r7, r0
 800f3f4:	460e      	mov	r6, r1
 800f3f6:	e744      	b.n	800f282 <__kernel_rem_pio2+0x4f6>
 800f3f8:	9b01      	ldr	r3, [sp, #4]
 800f3fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f3fe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800f402:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800f406:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800f40a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800f40e:	601d      	str	r5, [r3, #0]
 800f410:	615e      	str	r6, [r3, #20]
 800f412:	e71b      	b.n	800f24c <__kernel_rem_pio2+0x4c0>
 800f414:	41700000 	.word	0x41700000
 800f418:	3e700000 	.word	0x3e700000
 800f41c:	00000000 	.word	0x00000000

0800f420 <__kernel_sin>:
 800f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	b086      	sub	sp, #24
 800f426:	e9cd 2300 	strd	r2, r3, [sp]
 800f42a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f42e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f432:	4682      	mov	sl, r0
 800f434:	460c      	mov	r4, r1
 800f436:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f438:	da03      	bge.n	800f442 <__kernel_sin+0x22>
 800f43a:	f7f1 fafd 	bl	8000a38 <__aeabi_d2iz>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d050      	beq.n	800f4e4 <__kernel_sin+0xc4>
 800f442:	4652      	mov	r2, sl
 800f444:	4623      	mov	r3, r4
 800f446:	4650      	mov	r0, sl
 800f448:	4621      	mov	r1, r4
 800f44a:	f7f1 f845 	bl	80004d8 <__aeabi_dmul>
 800f44e:	4606      	mov	r6, r0
 800f450:	460f      	mov	r7, r1
 800f452:	4602      	mov	r2, r0
 800f454:	460b      	mov	r3, r1
 800f456:	4650      	mov	r0, sl
 800f458:	4621      	mov	r1, r4
 800f45a:	f7f1 f83d 	bl	80004d8 <__aeabi_dmul>
 800f45e:	a33e      	add	r3, pc, #248	; (adr r3, 800f558 <__kernel_sin+0x138>)
 800f460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f464:	4680      	mov	r8, r0
 800f466:	4689      	mov	r9, r1
 800f468:	4630      	mov	r0, r6
 800f46a:	4639      	mov	r1, r7
 800f46c:	f7f1 f834 	bl	80004d8 <__aeabi_dmul>
 800f470:	a33b      	add	r3, pc, #236	; (adr r3, 800f560 <__kernel_sin+0x140>)
 800f472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f476:	f7f0 fe77 	bl	8000168 <__aeabi_dsub>
 800f47a:	4632      	mov	r2, r6
 800f47c:	463b      	mov	r3, r7
 800f47e:	f7f1 f82b 	bl	80004d8 <__aeabi_dmul>
 800f482:	a339      	add	r3, pc, #228	; (adr r3, 800f568 <__kernel_sin+0x148>)
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f7f0 fe70 	bl	800016c <__adddf3>
 800f48c:	4632      	mov	r2, r6
 800f48e:	463b      	mov	r3, r7
 800f490:	f7f1 f822 	bl	80004d8 <__aeabi_dmul>
 800f494:	a336      	add	r3, pc, #216	; (adr r3, 800f570 <__kernel_sin+0x150>)
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	f7f0 fe65 	bl	8000168 <__aeabi_dsub>
 800f49e:	4632      	mov	r2, r6
 800f4a0:	463b      	mov	r3, r7
 800f4a2:	f7f1 f819 	bl	80004d8 <__aeabi_dmul>
 800f4a6:	a334      	add	r3, pc, #208	; (adr r3, 800f578 <__kernel_sin+0x158>)
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	f7f0 fe5e 	bl	800016c <__adddf3>
 800f4b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4b4:	b9dd      	cbnz	r5, 800f4ee <__kernel_sin+0xce>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	4639      	mov	r1, r7
 800f4be:	f7f1 f80b 	bl	80004d8 <__aeabi_dmul>
 800f4c2:	a32f      	add	r3, pc, #188	; (adr r3, 800f580 <__kernel_sin+0x160>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f7f0 fe4e 	bl	8000168 <__aeabi_dsub>
 800f4cc:	4642      	mov	r2, r8
 800f4ce:	464b      	mov	r3, r9
 800f4d0:	f7f1 f802 	bl	80004d8 <__aeabi_dmul>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4650      	mov	r0, sl
 800f4da:	4621      	mov	r1, r4
 800f4dc:	f7f0 fe46 	bl	800016c <__adddf3>
 800f4e0:	4682      	mov	sl, r0
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	4650      	mov	r0, sl
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	b006      	add	sp, #24
 800f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4f4:	4b24      	ldr	r3, [pc, #144]	; (800f588 <__kernel_sin+0x168>)
 800f4f6:	f7f0 ffef 	bl	80004d8 <__aeabi_dmul>
 800f4fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f502:	4640      	mov	r0, r8
 800f504:	4649      	mov	r1, r9
 800f506:	f7f0 ffe7 	bl	80004d8 <__aeabi_dmul>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f512:	f7f0 fe29 	bl	8000168 <__aeabi_dsub>
 800f516:	4632      	mov	r2, r6
 800f518:	463b      	mov	r3, r7
 800f51a:	f7f0 ffdd 	bl	80004d8 <__aeabi_dmul>
 800f51e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f522:	f7f0 fe21 	bl	8000168 <__aeabi_dsub>
 800f526:	a316      	add	r3, pc, #88	; (adr r3, 800f580 <__kernel_sin+0x160>)
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	4606      	mov	r6, r0
 800f52e:	460f      	mov	r7, r1
 800f530:	4640      	mov	r0, r8
 800f532:	4649      	mov	r1, r9
 800f534:	f7f0 ffd0 	bl	80004d8 <__aeabi_dmul>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4630      	mov	r0, r6
 800f53e:	4639      	mov	r1, r7
 800f540:	f7f0 fe14 	bl	800016c <__adddf3>
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	4650      	mov	r0, sl
 800f54a:	4621      	mov	r1, r4
 800f54c:	f7f0 fe0c 	bl	8000168 <__aeabi_dsub>
 800f550:	e7c6      	b.n	800f4e0 <__kernel_sin+0xc0>
 800f552:	bf00      	nop
 800f554:	f3af 8000 	nop.w
 800f558:	5acfd57c 	.word	0x5acfd57c
 800f55c:	3de5d93a 	.word	0x3de5d93a
 800f560:	8a2b9ceb 	.word	0x8a2b9ceb
 800f564:	3e5ae5e6 	.word	0x3e5ae5e6
 800f568:	57b1fe7d 	.word	0x57b1fe7d
 800f56c:	3ec71de3 	.word	0x3ec71de3
 800f570:	19c161d5 	.word	0x19c161d5
 800f574:	3f2a01a0 	.word	0x3f2a01a0
 800f578:	1110f8a6 	.word	0x1110f8a6
 800f57c:	3f811111 	.word	0x3f811111
 800f580:	55555549 	.word	0x55555549
 800f584:	3fc55555 	.word	0x3fc55555
 800f588:	3fe00000 	.word	0x3fe00000

0800f58c <__kernel_cosf>:
 800f58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f590:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800f594:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f598:	4606      	mov	r6, r0
 800f59a:	4688      	mov	r8, r1
 800f59c:	da03      	bge.n	800f5a6 <__kernel_cosf+0x1a>
 800f59e:	f7f1 fdcd 	bl	800113c <__aeabi_f2iz>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d05c      	beq.n	800f660 <__kernel_cosf+0xd4>
 800f5a6:	4631      	mov	r1, r6
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7f1 fbeb 	bl	8000d84 <__aeabi_fmul>
 800f5ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	f7f1 fbe6 	bl	8000d84 <__aeabi_fmul>
 800f5b8:	492b      	ldr	r1, [pc, #172]	; (800f668 <__kernel_cosf+0xdc>)
 800f5ba:	4607      	mov	r7, r0
 800f5bc:	4628      	mov	r0, r5
 800f5be:	f7f1 fbe1 	bl	8000d84 <__aeabi_fmul>
 800f5c2:	492a      	ldr	r1, [pc, #168]	; (800f66c <__kernel_cosf+0xe0>)
 800f5c4:	f7f1 fad6 	bl	8000b74 <__addsf3>
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	f7f1 fbdb 	bl	8000d84 <__aeabi_fmul>
 800f5ce:	4928      	ldr	r1, [pc, #160]	; (800f670 <__kernel_cosf+0xe4>)
 800f5d0:	f7f1 face 	bl	8000b70 <__aeabi_fsub>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	f7f1 fbd5 	bl	8000d84 <__aeabi_fmul>
 800f5da:	4926      	ldr	r1, [pc, #152]	; (800f674 <__kernel_cosf+0xe8>)
 800f5dc:	f7f1 faca 	bl	8000b74 <__addsf3>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 fbcf 	bl	8000d84 <__aeabi_fmul>
 800f5e6:	4924      	ldr	r1, [pc, #144]	; (800f678 <__kernel_cosf+0xec>)
 800f5e8:	f7f1 fac2 	bl	8000b70 <__aeabi_fsub>
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f7f1 fbc9 	bl	8000d84 <__aeabi_fmul>
 800f5f2:	4922      	ldr	r1, [pc, #136]	; (800f67c <__kernel_cosf+0xf0>)
 800f5f4:	f7f1 fabe 	bl	8000b74 <__addsf3>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7f1 fbc3 	bl	8000d84 <__aeabi_fmul>
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f1 fbc0 	bl	8000d84 <__aeabi_fmul>
 800f604:	4641      	mov	r1, r8
 800f606:	4605      	mov	r5, r0
 800f608:	4630      	mov	r0, r6
 800f60a:	f7f1 fbbb 	bl	8000d84 <__aeabi_fmul>
 800f60e:	4601      	mov	r1, r0
 800f610:	4628      	mov	r0, r5
 800f612:	f7f1 faad 	bl	8000b70 <__aeabi_fsub>
 800f616:	4b1a      	ldr	r3, [pc, #104]	; (800f680 <__kernel_cosf+0xf4>)
 800f618:	4605      	mov	r5, r0
 800f61a:	429c      	cmp	r4, r3
 800f61c:	dc0a      	bgt.n	800f634 <__kernel_cosf+0xa8>
 800f61e:	4601      	mov	r1, r0
 800f620:	4638      	mov	r0, r7
 800f622:	f7f1 faa5 	bl	8000b70 <__aeabi_fsub>
 800f626:	4601      	mov	r1, r0
 800f628:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f62c:	f7f1 faa0 	bl	8000b70 <__aeabi_fsub>
 800f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f634:	4b13      	ldr	r3, [pc, #76]	; (800f684 <__kernel_cosf+0xf8>)
 800f636:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f63a:	429c      	cmp	r4, r3
 800f63c:	bfcc      	ite	gt
 800f63e:	4c12      	ldrgt	r4, [pc, #72]	; (800f688 <__kernel_cosf+0xfc>)
 800f640:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800f644:	4621      	mov	r1, r4
 800f646:	f7f1 fa93 	bl	8000b70 <__aeabi_fsub>
 800f64a:	4621      	mov	r1, r4
 800f64c:	4606      	mov	r6, r0
 800f64e:	4638      	mov	r0, r7
 800f650:	f7f1 fa8e 	bl	8000b70 <__aeabi_fsub>
 800f654:	4629      	mov	r1, r5
 800f656:	f7f1 fa8b 	bl	8000b70 <__aeabi_fsub>
 800f65a:	4601      	mov	r1, r0
 800f65c:	4630      	mov	r0, r6
 800f65e:	e7e5      	b.n	800f62c <__kernel_cosf+0xa0>
 800f660:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f664:	e7e4      	b.n	800f630 <__kernel_cosf+0xa4>
 800f666:	bf00      	nop
 800f668:	ad47d74e 	.word	0xad47d74e
 800f66c:	310f74f6 	.word	0x310f74f6
 800f670:	3493f27c 	.word	0x3493f27c
 800f674:	37d00d01 	.word	0x37d00d01
 800f678:	3ab60b61 	.word	0x3ab60b61
 800f67c:	3d2aaaab 	.word	0x3d2aaaab
 800f680:	3e999999 	.word	0x3e999999
 800f684:	3f480000 	.word	0x3f480000
 800f688:	3e900000 	.word	0x3e900000

0800f68c <__kernel_rem_pio2f>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	b0db      	sub	sp, #364	; 0x16c
 800f692:	9202      	str	r2, [sp, #8]
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f698:	4bc5      	ldr	r3, [pc, #788]	; (800f9b0 <__kernel_rem_pio2f+0x324>)
 800f69a:	9005      	str	r0, [sp, #20]
 800f69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a0:	9100      	str	r1, [sp, #0]
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	9b04      	ldr	r3, [sp, #16]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	9303      	str	r3, [sp, #12]
 800f6aa:	9b02      	ldr	r3, [sp, #8]
 800f6ac:	1d1a      	adds	r2, r3, #4
 800f6ae:	f2c0 809b 	blt.w	800f7e8 <__kernel_rem_pio2f+0x15c>
 800f6b2:	1edc      	subs	r4, r3, #3
 800f6b4:	bf48      	it	mi
 800f6b6:	1d1c      	addmi	r4, r3, #4
 800f6b8:	10e4      	asrs	r4, r4, #3
 800f6ba:	2500      	movs	r5, #0
 800f6bc:	f04f 0a00 	mov.w	sl, #0
 800f6c0:	1c67      	adds	r7, r4, #1
 800f6c2:	00fb      	lsls	r3, r7, #3
 800f6c4:	9306      	str	r3, [sp, #24]
 800f6c6:	9b02      	ldr	r3, [sp, #8]
 800f6c8:	9a03      	ldr	r2, [sp, #12]
 800f6ca:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	1aa6      	subs	r6, r4, r2
 800f6d2:	eb03 0802 	add.w	r8, r3, r2
 800f6d6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f6d8:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800f6dc:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800f6e0:	4545      	cmp	r5, r8
 800f6e2:	f340 8083 	ble.w	800f7ec <__kernel_rem_pio2f+0x160>
 800f6e6:	f04f 0800 	mov.w	r8, #0
 800f6ea:	f04f 0b00 	mov.w	fp, #0
 800f6ee:	9b04      	ldr	r3, [sp, #16]
 800f6f0:	aa1e      	add	r2, sp, #120	; 0x78
 800f6f2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f6f6:	ab46      	add	r3, sp, #280	; 0x118
 800f6f8:	9a01      	ldr	r2, [sp, #4]
 800f6fa:	4590      	cmp	r8, r2
 800f6fc:	f340 809c 	ble.w	800f838 <__kernel_rem_pio2f+0x1ac>
 800f700:	4613      	mov	r3, r2
 800f702:	aa0a      	add	r2, sp, #40	; 0x28
 800f704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f708:	9308      	str	r3, [sp, #32]
 800f70a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800f70c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f710:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f714:	9307      	str	r3, [sp, #28]
 800f716:	ad0a      	add	r5, sp, #40	; 0x28
 800f718:	462e      	mov	r6, r5
 800f71a:	46c3      	mov	fp, r8
 800f71c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800f720:	ab5a      	add	r3, sp, #360	; 0x168
 800f722:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800f726:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f72a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800f72e:	f1bb 0f00 	cmp.w	fp, #0
 800f732:	f300 8086 	bgt.w	800f842 <__kernel_rem_pio2f+0x1b6>
 800f736:	4639      	mov	r1, r7
 800f738:	4620      	mov	r0, r4
 800f73a:	f000 fed9 	bl	80104f0 <scalbnf>
 800f73e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f742:	4604      	mov	r4, r0
 800f744:	f7f1 fb1e 	bl	8000d84 <__aeabi_fmul>
 800f748:	f000 fe90 	bl	801046c <floorf>
 800f74c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f750:	f7f1 fb18 	bl	8000d84 <__aeabi_fmul>
 800f754:	4601      	mov	r1, r0
 800f756:	4620      	mov	r0, r4
 800f758:	f7f1 fa0a 	bl	8000b70 <__aeabi_fsub>
 800f75c:	4604      	mov	r4, r0
 800f75e:	f7f1 fced 	bl	800113c <__aeabi_f2iz>
 800f762:	4606      	mov	r6, r0
 800f764:	f7f1 faba 	bl	8000cdc <__aeabi_i2f>
 800f768:	4601      	mov	r1, r0
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7f1 fa00 	bl	8000b70 <__aeabi_fsub>
 800f770:	2f00      	cmp	r7, #0
 800f772:	4681      	mov	r9, r0
 800f774:	f340 8084 	ble.w	800f880 <__kernel_rem_pio2f+0x1f4>
 800f778:	f108 32ff 	add.w	r2, r8, #4294967295
 800f77c:	ab0a      	add	r3, sp, #40	; 0x28
 800f77e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800f782:	f1c7 0108 	rsb	r1, r7, #8
 800f786:	fa44 f301 	asr.w	r3, r4, r1
 800f78a:	441e      	add	r6, r3
 800f78c:	408b      	lsls	r3, r1
 800f78e:	1ae4      	subs	r4, r4, r3
 800f790:	f1c7 0007 	rsb	r0, r7, #7
 800f794:	ab0a      	add	r3, sp, #40	; 0x28
 800f796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f79a:	4104      	asrs	r4, r0
 800f79c:	2c00      	cmp	r4, #0
 800f79e:	dd7e      	ble.n	800f89e <__kernel_rem_pio2f+0x212>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	4692      	mov	sl, r2
 800f7a4:	3601      	adds	r6, #1
 800f7a6:	4590      	cmp	r8, r2
 800f7a8:	f300 80b0 	bgt.w	800f90c <__kernel_rem_pio2f+0x280>
 800f7ac:	2f00      	cmp	r7, #0
 800f7ae:	dd05      	ble.n	800f7bc <__kernel_rem_pio2f+0x130>
 800f7b0:	2f01      	cmp	r7, #1
 800f7b2:	f000 80bd 	beq.w	800f930 <__kernel_rem_pio2f+0x2a4>
 800f7b6:	2f02      	cmp	r7, #2
 800f7b8:	f000 80c5 	beq.w	800f946 <__kernel_rem_pio2f+0x2ba>
 800f7bc:	2c02      	cmp	r4, #2
 800f7be:	d16e      	bne.n	800f89e <__kernel_rem_pio2f+0x212>
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f7c6:	f7f1 f9d3 	bl	8000b70 <__aeabi_fsub>
 800f7ca:	4681      	mov	r9, r0
 800f7cc:	f1ba 0f00 	cmp.w	sl, #0
 800f7d0:	d065      	beq.n	800f89e <__kernel_rem_pio2f+0x212>
 800f7d2:	4639      	mov	r1, r7
 800f7d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f7d8:	f000 fe8a 	bl	80104f0 <scalbnf>
 800f7dc:	4601      	mov	r1, r0
 800f7de:	4648      	mov	r0, r9
 800f7e0:	f7f1 f9c6 	bl	8000b70 <__aeabi_fsub>
 800f7e4:	4681      	mov	r9, r0
 800f7e6:	e05a      	b.n	800f89e <__kernel_rem_pio2f+0x212>
 800f7e8:	2400      	movs	r4, #0
 800f7ea:	e766      	b.n	800f6ba <__kernel_rem_pio2f+0x2e>
 800f7ec:	42ee      	cmn	r6, r5
 800f7ee:	d407      	bmi.n	800f800 <__kernel_rem_pio2f+0x174>
 800f7f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f7f4:	f7f1 fa72 	bl	8000cdc <__aeabi_i2f>
 800f7f8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f7fc:	3501      	adds	r5, #1
 800f7fe:	e76f      	b.n	800f6e0 <__kernel_rem_pio2f+0x54>
 800f800:	4650      	mov	r0, sl
 800f802:	e7f9      	b.n	800f7f8 <__kernel_rem_pio2f+0x16c>
 800f804:	9b05      	ldr	r3, [sp, #20]
 800f806:	f8da 1000 	ldr.w	r1, [sl]
 800f80a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800f80e:	f7f1 fab9 	bl	8000d84 <__aeabi_fmul>
 800f812:	4601      	mov	r1, r0
 800f814:	4630      	mov	r0, r6
 800f816:	f7f1 f9ad 	bl	8000b74 <__addsf3>
 800f81a:	4606      	mov	r6, r0
 800f81c:	f109 0901 	add.w	r9, r9, #1
 800f820:	ab46      	add	r3, sp, #280	; 0x118
 800f822:	9a03      	ldr	r2, [sp, #12]
 800f824:	f1aa 0a04 	sub.w	sl, sl, #4
 800f828:	4591      	cmp	r9, r2
 800f82a:	ddeb      	ble.n	800f804 <__kernel_rem_pio2f+0x178>
 800f82c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f830:	3504      	adds	r5, #4
 800f832:	f108 0801 	add.w	r8, r8, #1
 800f836:	e75f      	b.n	800f6f8 <__kernel_rem_pio2f+0x6c>
 800f838:	46aa      	mov	sl, r5
 800f83a:	465e      	mov	r6, fp
 800f83c:	f04f 0900 	mov.w	r9, #0
 800f840:	e7ef      	b.n	800f822 <__kernel_rem_pio2f+0x196>
 800f842:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f846:	4620      	mov	r0, r4
 800f848:	f7f1 fa9c 	bl	8000d84 <__aeabi_fmul>
 800f84c:	f7f1 fc76 	bl	800113c <__aeabi_f2iz>
 800f850:	f7f1 fa44 	bl	8000cdc <__aeabi_i2f>
 800f854:	4649      	mov	r1, r9
 800f856:	9009      	str	r0, [sp, #36]	; 0x24
 800f858:	f7f1 fa94 	bl	8000d84 <__aeabi_fmul>
 800f85c:	4601      	mov	r1, r0
 800f85e:	4620      	mov	r0, r4
 800f860:	f7f1 f986 	bl	8000b70 <__aeabi_fsub>
 800f864:	f7f1 fc6a 	bl	800113c <__aeabi_f2iz>
 800f868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f86a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f86e:	f846 0b04 	str.w	r0, [r6], #4
 800f872:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800f876:	4618      	mov	r0, r3
 800f878:	f7f1 f97c 	bl	8000b74 <__addsf3>
 800f87c:	4604      	mov	r4, r0
 800f87e:	e756      	b.n	800f72e <__kernel_rem_pio2f+0xa2>
 800f880:	d106      	bne.n	800f890 <__kernel_rem_pio2f+0x204>
 800f882:	f108 33ff 	add.w	r3, r8, #4294967295
 800f886:	aa0a      	add	r2, sp, #40	; 0x28
 800f888:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f88c:	1224      	asrs	r4, r4, #8
 800f88e:	e785      	b.n	800f79c <__kernel_rem_pio2f+0x110>
 800f890:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f894:	f7f1 fc28 	bl	80010e8 <__aeabi_fcmpge>
 800f898:	4604      	mov	r4, r0
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d134      	bne.n	800f908 <__kernel_rem_pio2f+0x27c>
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4648      	mov	r0, r9
 800f8a2:	f7f1 fc03 	bl	80010ac <__aeabi_fcmpeq>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	f000 809a 	beq.w	800f9e0 <__kernel_rem_pio2f+0x354>
 800f8ac:	f108 35ff 	add.w	r5, r8, #4294967295
 800f8b0:	462b      	mov	r3, r5
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	9901      	ldr	r1, [sp, #4]
 800f8b6:	428b      	cmp	r3, r1
 800f8b8:	da4d      	bge.n	800f956 <__kernel_rem_pio2f+0x2ca>
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	d07c      	beq.n	800f9b8 <__kernel_rem_pio2f+0x32c>
 800f8be:	ab0a      	add	r3, sp, #40	; 0x28
 800f8c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f8c4:	3f08      	subs	r7, #8
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f000 8088 	beq.w	800f9dc <__kernel_rem_pio2f+0x350>
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f8d2:	f000 fe0d 	bl	80104f0 <scalbnf>
 800f8d6:	46aa      	mov	sl, r5
 800f8d8:	4681      	mov	r9, r0
 800f8da:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800f8de:	af46      	add	r7, sp, #280	; 0x118
 800f8e0:	f1ba 0f00 	cmp.w	sl, #0
 800f8e4:	f280 80b1 	bge.w	800fa4a <__kernel_rem_pio2f+0x3be>
 800f8e8:	46a9      	mov	r9, r5
 800f8ea:	f04f 0a00 	mov.w	sl, #0
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f1b9 0f00 	cmp.w	r9, #0
 800f8f4:	f2c0 80db 	blt.w	800faae <__kernel_rem_pio2f+0x422>
 800f8f8:	a946      	add	r1, sp, #280	; 0x118
 800f8fa:	4617      	mov	r7, r2
 800f8fc:	f04f 0800 	mov.w	r8, #0
 800f900:	4b2c      	ldr	r3, [pc, #176]	; (800f9b4 <__kernel_rem_pio2f+0x328>)
 800f902:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800f906:	e0c3      	b.n	800fa90 <__kernel_rem_pio2f+0x404>
 800f908:	2402      	movs	r4, #2
 800f90a:	e749      	b.n	800f7a0 <__kernel_rem_pio2f+0x114>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	f1ba 0f00 	cmp.w	sl, #0
 800f912:	d108      	bne.n	800f926 <__kernel_rem_pio2f+0x29a>
 800f914:	b11b      	cbz	r3, 800f91e <__kernel_rem_pio2f+0x292>
 800f916:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f91a:	602b      	str	r3, [r5, #0]
 800f91c:	2301      	movs	r3, #1
 800f91e:	469a      	mov	sl, r3
 800f920:	3201      	adds	r2, #1
 800f922:	3504      	adds	r5, #4
 800f924:	e73f      	b.n	800f7a6 <__kernel_rem_pio2f+0x11a>
 800f926:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f92a:	602b      	str	r3, [r5, #0]
 800f92c:	4653      	mov	r3, sl
 800f92e:	e7f6      	b.n	800f91e <__kernel_rem_pio2f+0x292>
 800f930:	f108 32ff 	add.w	r2, r8, #4294967295
 800f934:	ab0a      	add	r3, sp, #40	; 0x28
 800f936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f93e:	a90a      	add	r1, sp, #40	; 0x28
 800f940:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f944:	e73a      	b.n	800f7bc <__kernel_rem_pio2f+0x130>
 800f946:	f108 32ff 	add.w	r2, r8, #4294967295
 800f94a:	ab0a      	add	r3, sp, #40	; 0x28
 800f94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f954:	e7f3      	b.n	800f93e <__kernel_rem_pio2f+0x2b2>
 800f956:	a90a      	add	r1, sp, #40	; 0x28
 800f958:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f95c:	3b01      	subs	r3, #1
 800f95e:	430a      	orrs	r2, r1
 800f960:	e7a8      	b.n	800f8b4 <__kernel_rem_pio2f+0x228>
 800f962:	3301      	adds	r3, #1
 800f964:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f968:	2900      	cmp	r1, #0
 800f96a:	d0fa      	beq.n	800f962 <__kernel_rem_pio2f+0x2d6>
 800f96c:	9a04      	ldr	r2, [sp, #16]
 800f96e:	f108 0501 	add.w	r5, r8, #1
 800f972:	eb08 0402 	add.w	r4, r8, r2
 800f976:	aa1e      	add	r2, sp, #120	; 0x78
 800f978:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f97c:	4498      	add	r8, r3
 800f97e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800f982:	45a8      	cmp	r8, r5
 800f984:	f6ff aec7 	blt.w	800f716 <__kernel_rem_pio2f+0x8a>
 800f988:	9b07      	ldr	r3, [sp, #28]
 800f98a:	46a3      	mov	fp, r4
 800f98c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f990:	f7f1 f9a4 	bl	8000cdc <__aeabi_i2f>
 800f994:	f04f 0a00 	mov.w	sl, #0
 800f998:	2600      	movs	r6, #0
 800f99a:	f84b 0b04 	str.w	r0, [fp], #4
 800f99e:	9b03      	ldr	r3, [sp, #12]
 800f9a0:	459a      	cmp	sl, r3
 800f9a2:	dd0c      	ble.n	800f9be <__kernel_rem_pio2f+0x332>
 800f9a4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800f9a8:	465c      	mov	r4, fp
 800f9aa:	3501      	adds	r5, #1
 800f9ac:	e7e9      	b.n	800f982 <__kernel_rem_pio2f+0x2f6>
 800f9ae:	bf00      	nop
 800f9b0:	080117d4 	.word	0x080117d4
 800f9b4:	080117a8 	.word	0x080117a8
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	9a08      	ldr	r2, [sp, #32]
 800f9bc:	e7d2      	b.n	800f964 <__kernel_rem_pio2f+0x2d8>
 800f9be:	9b05      	ldr	r3, [sp, #20]
 800f9c0:	f854 0904 	ldr.w	r0, [r4], #-4
 800f9c4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800f9c8:	f7f1 f9dc 	bl	8000d84 <__aeabi_fmul>
 800f9cc:	4601      	mov	r1, r0
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f7f1 f8d0 	bl	8000b74 <__addsf3>
 800f9d4:	f10a 0a01 	add.w	sl, sl, #1
 800f9d8:	4606      	mov	r6, r0
 800f9da:	e7e0      	b.n	800f99e <__kernel_rem_pio2f+0x312>
 800f9dc:	3d01      	subs	r5, #1
 800f9de:	e76e      	b.n	800f8be <__kernel_rem_pio2f+0x232>
 800f9e0:	9b06      	ldr	r3, [sp, #24]
 800f9e2:	9a02      	ldr	r2, [sp, #8]
 800f9e4:	4648      	mov	r0, r9
 800f9e6:	1a99      	subs	r1, r3, r2
 800f9e8:	f000 fd82 	bl	80104f0 <scalbnf>
 800f9ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	f7f1 fb79 	bl	80010e8 <__aeabi_fcmpge>
 800f9f6:	b300      	cbz	r0, 800fa3a <__kernel_rem_pio2f+0x3ae>
 800f9f8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f7f1 f9c1 	bl	8000d84 <__aeabi_fmul>
 800fa02:	f7f1 fb9b 	bl	800113c <__aeabi_f2iz>
 800fa06:	f7f1 f969 	bl	8000cdc <__aeabi_i2f>
 800fa0a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fa0e:	4681      	mov	r9, r0
 800fa10:	f7f1 f9b8 	bl	8000d84 <__aeabi_fmul>
 800fa14:	4601      	mov	r1, r0
 800fa16:	4628      	mov	r0, r5
 800fa18:	f7f1 f8aa 	bl	8000b70 <__aeabi_fsub>
 800fa1c:	f7f1 fb8e 	bl	800113c <__aeabi_f2iz>
 800fa20:	ab0a      	add	r3, sp, #40	; 0x28
 800fa22:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fa26:	4648      	mov	r0, r9
 800fa28:	f7f1 fb88 	bl	800113c <__aeabi_f2iz>
 800fa2c:	f108 0501 	add.w	r5, r8, #1
 800fa30:	ab0a      	add	r3, sp, #40	; 0x28
 800fa32:	3708      	adds	r7, #8
 800fa34:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800fa38:	e748      	b.n	800f8cc <__kernel_rem_pio2f+0x240>
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f7f1 fb7e 	bl	800113c <__aeabi_f2iz>
 800fa40:	ab0a      	add	r3, sp, #40	; 0x28
 800fa42:	4645      	mov	r5, r8
 800fa44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fa48:	e740      	b.n	800f8cc <__kernel_rem_pio2f+0x240>
 800fa4a:	ab0a      	add	r3, sp, #40	; 0x28
 800fa4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fa50:	f7f1 f944 	bl	8000cdc <__aeabi_i2f>
 800fa54:	4649      	mov	r1, r9
 800fa56:	f7f1 f995 	bl	8000d84 <__aeabi_fmul>
 800fa5a:	4641      	mov	r1, r8
 800fa5c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800fa60:	4648      	mov	r0, r9
 800fa62:	f7f1 f98f 	bl	8000d84 <__aeabi_fmul>
 800fa66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa6a:	4681      	mov	r9, r0
 800fa6c:	e738      	b.n	800f8e0 <__kernel_rem_pio2f+0x254>
 800fa6e:	f853 0b04 	ldr.w	r0, [r3], #4
 800fa72:	f85b 1b04 	ldr.w	r1, [fp], #4
 800fa76:	9203      	str	r2, [sp, #12]
 800fa78:	9302      	str	r3, [sp, #8]
 800fa7a:	f7f1 f983 	bl	8000d84 <__aeabi_fmul>
 800fa7e:	4601      	mov	r1, r0
 800fa80:	4638      	mov	r0, r7
 800fa82:	f7f1 f877 	bl	8000b74 <__addsf3>
 800fa86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	f108 0801 	add.w	r8, r8, #1
 800fa90:	9901      	ldr	r1, [sp, #4]
 800fa92:	4588      	cmp	r8, r1
 800fa94:	dc01      	bgt.n	800fa9a <__kernel_rem_pio2f+0x40e>
 800fa96:	45c2      	cmp	sl, r8
 800fa98:	dae9      	bge.n	800fa6e <__kernel_rem_pio2f+0x3e2>
 800fa9a:	ab5a      	add	r3, sp, #360	; 0x168
 800fa9c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800faa0:	f843 7ca0 	str.w	r7, [r3, #-160]
 800faa4:	f109 39ff 	add.w	r9, r9, #4294967295
 800faa8:	f10a 0a01 	add.w	sl, sl, #1
 800faac:	e720      	b.n	800f8f0 <__kernel_rem_pio2f+0x264>
 800faae:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	dc07      	bgt.n	800fac4 <__kernel_rem_pio2f+0x438>
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	dc4d      	bgt.n	800fb54 <__kernel_rem_pio2f+0x4c8>
 800fab8:	d02e      	beq.n	800fb18 <__kernel_rem_pio2f+0x48c>
 800faba:	f006 0007 	and.w	r0, r6, #7
 800fabe:	b05b      	add	sp, #364	; 0x16c
 800fac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fac6:	2b03      	cmp	r3, #3
 800fac8:	d1f7      	bne.n	800faba <__kernel_rem_pio2f+0x42e>
 800faca:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800face:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800fad2:	46b8      	mov	r8, r7
 800fad4:	46aa      	mov	sl, r5
 800fad6:	f1ba 0f00 	cmp.w	sl, #0
 800fada:	dc48      	bgt.n	800fb6e <__kernel_rem_pio2f+0x4e2>
 800fadc:	46a9      	mov	r9, r5
 800fade:	f1b9 0f01 	cmp.w	r9, #1
 800fae2:	dc5f      	bgt.n	800fba4 <__kernel_rem_pio2f+0x518>
 800fae4:	2000      	movs	r0, #0
 800fae6:	2d01      	cmp	r5, #1
 800fae8:	dc75      	bgt.n	800fbd6 <__kernel_rem_pio2f+0x54a>
 800faea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800faec:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800faee:	2c00      	cmp	r4, #0
 800faf0:	d177      	bne.n	800fbe2 <__kernel_rem_pio2f+0x556>
 800faf2:	9900      	ldr	r1, [sp, #0]
 800faf4:	600a      	str	r2, [r1, #0]
 800faf6:	460a      	mov	r2, r1
 800faf8:	604b      	str	r3, [r1, #4]
 800fafa:	6090      	str	r0, [r2, #8]
 800fafc:	e7dd      	b.n	800faba <__kernel_rem_pio2f+0x42e>
 800fafe:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800fb02:	f7f1 f837 	bl	8000b74 <__addsf3>
 800fb06:	3d01      	subs	r5, #1
 800fb08:	2d00      	cmp	r5, #0
 800fb0a:	daf8      	bge.n	800fafe <__kernel_rem_pio2f+0x472>
 800fb0c:	b10c      	cbz	r4, 800fb12 <__kernel_rem_pio2f+0x486>
 800fb0e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fb12:	9b00      	ldr	r3, [sp, #0]
 800fb14:	6018      	str	r0, [r3, #0]
 800fb16:	e7d0      	b.n	800faba <__kernel_rem_pio2f+0x42e>
 800fb18:	2000      	movs	r0, #0
 800fb1a:	af32      	add	r7, sp, #200	; 0xc8
 800fb1c:	e7f4      	b.n	800fb08 <__kernel_rem_pio2f+0x47c>
 800fb1e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fb22:	f7f1 f827 	bl	8000b74 <__addsf3>
 800fb26:	3f01      	subs	r7, #1
 800fb28:	2f00      	cmp	r7, #0
 800fb2a:	daf8      	bge.n	800fb1e <__kernel_rem_pio2f+0x492>
 800fb2c:	b1bc      	cbz	r4, 800fb5e <__kernel_rem_pio2f+0x4d2>
 800fb2e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800fb32:	9a00      	ldr	r2, [sp, #0]
 800fb34:	4601      	mov	r1, r0
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800fb3a:	f7f1 f819 	bl	8000b70 <__aeabi_fsub>
 800fb3e:	2701      	movs	r7, #1
 800fb40:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fb44:	42bd      	cmp	r5, r7
 800fb46:	da0c      	bge.n	800fb62 <__kernel_rem_pio2f+0x4d6>
 800fb48:	b10c      	cbz	r4, 800fb4e <__kernel_rem_pio2f+0x4c2>
 800fb4a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fb4e:	9b00      	ldr	r3, [sp, #0]
 800fb50:	6058      	str	r0, [r3, #4]
 800fb52:	e7b2      	b.n	800faba <__kernel_rem_pio2f+0x42e>
 800fb54:	462f      	mov	r7, r5
 800fb56:	2000      	movs	r0, #0
 800fb58:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800fb5c:	e7e4      	b.n	800fb28 <__kernel_rem_pio2f+0x49c>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	e7e7      	b.n	800fb32 <__kernel_rem_pio2f+0x4a6>
 800fb62:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800fb66:	f7f1 f805 	bl	8000b74 <__addsf3>
 800fb6a:	3701      	adds	r7, #1
 800fb6c:	e7ea      	b.n	800fb44 <__kernel_rem_pio2f+0x4b8>
 800fb6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb72:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fb76:	4619      	mov	r1, r3
 800fb78:	4610      	mov	r0, r2
 800fb7a:	9302      	str	r3, [sp, #8]
 800fb7c:	9201      	str	r2, [sp, #4]
 800fb7e:	f7f0 fff9 	bl	8000b74 <__addsf3>
 800fb82:	9a01      	ldr	r2, [sp, #4]
 800fb84:	4601      	mov	r1, r0
 800fb86:	4681      	mov	r9, r0
 800fb88:	4610      	mov	r0, r2
 800fb8a:	f7f0 fff1 	bl	8000b70 <__aeabi_fsub>
 800fb8e:	9b02      	ldr	r3, [sp, #8]
 800fb90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7f0 ffed 	bl	8000b74 <__addsf3>
 800fb9a:	f848 0904 	str.w	r0, [r8], #-4
 800fb9e:	f8c8 9000 	str.w	r9, [r8]
 800fba2:	e798      	b.n	800fad6 <__kernel_rem_pio2f+0x44a>
 800fba4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800fba8:	f8d7 a000 	ldr.w	sl, [r7]
 800fbac:	4618      	mov	r0, r3
 800fbae:	4651      	mov	r1, sl
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	f7f0 ffdf 	bl	8000b74 <__addsf3>
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	4601      	mov	r1, r0
 800fbba:	4680      	mov	r8, r0
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f0 ffd7 	bl	8000b70 <__aeabi_fsub>
 800fbc2:	4651      	mov	r1, sl
 800fbc4:	f7f0 ffd6 	bl	8000b74 <__addsf3>
 800fbc8:	f847 0904 	str.w	r0, [r7], #-4
 800fbcc:	f109 39ff 	add.w	r9, r9, #4294967295
 800fbd0:	f8c7 8000 	str.w	r8, [r7]
 800fbd4:	e783      	b.n	800fade <__kernel_rem_pio2f+0x452>
 800fbd6:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800fbda:	f7f0 ffcb 	bl	8000b74 <__addsf3>
 800fbde:	3d01      	subs	r5, #1
 800fbe0:	e781      	b.n	800fae6 <__kernel_rem_pio2f+0x45a>
 800fbe2:	9900      	ldr	r1, [sp, #0]
 800fbe4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800fbe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbec:	600a      	str	r2, [r1, #0]
 800fbee:	604b      	str	r3, [r1, #4]
 800fbf0:	460a      	mov	r2, r1
 800fbf2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fbf6:	e780      	b.n	800fafa <__kernel_rem_pio2f+0x46e>

0800fbf8 <__kernel_sinf>:
 800fbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fc00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fc04:	4604      	mov	r4, r0
 800fc06:	460f      	mov	r7, r1
 800fc08:	4691      	mov	r9, r2
 800fc0a:	da03      	bge.n	800fc14 <__kernel_sinf+0x1c>
 800fc0c:	f7f1 fa96 	bl	800113c <__aeabi_f2iz>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d035      	beq.n	800fc80 <__kernel_sinf+0x88>
 800fc14:	4621      	mov	r1, r4
 800fc16:	4620      	mov	r0, r4
 800fc18:	f7f1 f8b4 	bl	8000d84 <__aeabi_fmul>
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	4601      	mov	r1, r0
 800fc20:	4620      	mov	r0, r4
 800fc22:	f7f1 f8af 	bl	8000d84 <__aeabi_fmul>
 800fc26:	4929      	ldr	r1, [pc, #164]	; (800fccc <__kernel_sinf+0xd4>)
 800fc28:	4606      	mov	r6, r0
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f7f1 f8aa 	bl	8000d84 <__aeabi_fmul>
 800fc30:	4927      	ldr	r1, [pc, #156]	; (800fcd0 <__kernel_sinf+0xd8>)
 800fc32:	f7f0 ff9d 	bl	8000b70 <__aeabi_fsub>
 800fc36:	4629      	mov	r1, r5
 800fc38:	f7f1 f8a4 	bl	8000d84 <__aeabi_fmul>
 800fc3c:	4925      	ldr	r1, [pc, #148]	; (800fcd4 <__kernel_sinf+0xdc>)
 800fc3e:	f7f0 ff99 	bl	8000b74 <__addsf3>
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7f1 f89e 	bl	8000d84 <__aeabi_fmul>
 800fc48:	4923      	ldr	r1, [pc, #140]	; (800fcd8 <__kernel_sinf+0xe0>)
 800fc4a:	f7f0 ff91 	bl	8000b70 <__aeabi_fsub>
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f1 f898 	bl	8000d84 <__aeabi_fmul>
 800fc54:	4921      	ldr	r1, [pc, #132]	; (800fcdc <__kernel_sinf+0xe4>)
 800fc56:	f7f0 ff8d 	bl	8000b74 <__addsf3>
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	f1b9 0f00 	cmp.w	r9, #0
 800fc60:	d111      	bne.n	800fc86 <__kernel_sinf+0x8e>
 800fc62:	4601      	mov	r1, r0
 800fc64:	4628      	mov	r0, r5
 800fc66:	f7f1 f88d 	bl	8000d84 <__aeabi_fmul>
 800fc6a:	491d      	ldr	r1, [pc, #116]	; (800fce0 <__kernel_sinf+0xe8>)
 800fc6c:	f7f0 ff80 	bl	8000b70 <__aeabi_fsub>
 800fc70:	4631      	mov	r1, r6
 800fc72:	f7f1 f887 	bl	8000d84 <__aeabi_fmul>
 800fc76:	4601      	mov	r1, r0
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7f0 ff7b 	bl	8000b74 <__addsf3>
 800fc7e:	4604      	mov	r4, r0
 800fc80:	4620      	mov	r0, r4
 800fc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	f7f1 f87a 	bl	8000d84 <__aeabi_fmul>
 800fc90:	4641      	mov	r1, r8
 800fc92:	4681      	mov	r9, r0
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7f1 f875 	bl	8000d84 <__aeabi_fmul>
 800fc9a:	4601      	mov	r1, r0
 800fc9c:	4648      	mov	r0, r9
 800fc9e:	f7f0 ff67 	bl	8000b70 <__aeabi_fsub>
 800fca2:	4629      	mov	r1, r5
 800fca4:	f7f1 f86e 	bl	8000d84 <__aeabi_fmul>
 800fca8:	4639      	mov	r1, r7
 800fcaa:	f7f0 ff61 	bl	8000b70 <__aeabi_fsub>
 800fcae:	490c      	ldr	r1, [pc, #48]	; (800fce0 <__kernel_sinf+0xe8>)
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7f1 f866 	bl	8000d84 <__aeabi_fmul>
 800fcb8:	4601      	mov	r1, r0
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7f0 ff5a 	bl	8000b74 <__addsf3>
 800fcc0:	4601      	mov	r1, r0
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f7f0 ff54 	bl	8000b70 <__aeabi_fsub>
 800fcc8:	e7d9      	b.n	800fc7e <__kernel_sinf+0x86>
 800fcca:	bf00      	nop
 800fccc:	2f2ec9d3 	.word	0x2f2ec9d3
 800fcd0:	32d72f34 	.word	0x32d72f34
 800fcd4:	3638ef1b 	.word	0x3638ef1b
 800fcd8:	39500d01 	.word	0x39500d01
 800fcdc:	3c088889 	.word	0x3c088889
 800fce0:	3e2aaaab 	.word	0x3e2aaaab

0800fce4 <__kernel_tanf>:
 800fce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce8:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800fcec:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	460e      	mov	r6, r1
 800fcf4:	4690      	mov	r8, r2
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	da1b      	bge.n	800fd32 <__kernel_tanf+0x4e>
 800fcfa:	f7f1 fa1f 	bl	800113c <__aeabi_f2iz>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d12f      	bne.n	800fd62 <__kernel_tanf+0x7e>
 800fd02:	f108 0301 	add.w	r3, r8, #1
 800fd06:	ea53 030a 	orrs.w	r3, r3, sl
 800fd0a:	d10c      	bne.n	800fd26 <__kernel_tanf+0x42>
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7fe f849 	bl	800dda4 <fabsf>
 800fd12:	4601      	mov	r1, r0
 800fd14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fd18:	f7f1 f8e8 	bl	8000eec <__aeabi_fdiv>
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	4620      	mov	r0, r4
 800fd20:	b003      	add	sp, #12
 800fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd26:	f1b8 0f01 	cmp.w	r8, #1
 800fd2a:	d0f8      	beq.n	800fd1e <__kernel_tanf+0x3a>
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	4872      	ldr	r0, [pc, #456]	; (800fef8 <__kernel_tanf+0x214>)
 800fd30:	e7f2      	b.n	800fd18 <__kernel_tanf+0x34>
 800fd32:	4b72      	ldr	r3, [pc, #456]	; (800fefc <__kernel_tanf+0x218>)
 800fd34:	459a      	cmp	sl, r3
 800fd36:	db14      	blt.n	800fd62 <__kernel_tanf+0x7e>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	bfbe      	ittt	lt
 800fd3c:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 800fd40:	4604      	movlt	r4, r0
 800fd42:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800fd46:	486e      	ldr	r0, [pc, #440]	; (800ff00 <__kernel_tanf+0x21c>)
 800fd48:	4621      	mov	r1, r4
 800fd4a:	f7f0 ff11 	bl	8000b70 <__aeabi_fsub>
 800fd4e:	4604      	mov	r4, r0
 800fd50:	4631      	mov	r1, r6
 800fd52:	486c      	ldr	r0, [pc, #432]	; (800ff04 <__kernel_tanf+0x220>)
 800fd54:	f7f0 ff0c 	bl	8000b70 <__aeabi_fsub>
 800fd58:	4621      	mov	r1, r4
 800fd5a:	f7f0 ff0b 	bl	8000b74 <__addsf3>
 800fd5e:	2600      	movs	r6, #0
 800fd60:	4604      	mov	r4, r0
 800fd62:	4621      	mov	r1, r4
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7f1 f80d 	bl	8000d84 <__aeabi_fmul>
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	4681      	mov	r9, r0
 800fd6e:	f7f1 f809 	bl	8000d84 <__aeabi_fmul>
 800fd72:	4649      	mov	r1, r9
 800fd74:	4605      	mov	r5, r0
 800fd76:	4620      	mov	r0, r4
 800fd78:	f7f1 f804 	bl	8000d84 <__aeabi_fmul>
 800fd7c:	4962      	ldr	r1, [pc, #392]	; (800ff08 <__kernel_tanf+0x224>)
 800fd7e:	4683      	mov	fp, r0
 800fd80:	4628      	mov	r0, r5
 800fd82:	f7f0 ffff 	bl	8000d84 <__aeabi_fmul>
 800fd86:	4961      	ldr	r1, [pc, #388]	; (800ff0c <__kernel_tanf+0x228>)
 800fd88:	f7f0 fef4 	bl	8000b74 <__addsf3>
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7f0 fff9 	bl	8000d84 <__aeabi_fmul>
 800fd92:	495f      	ldr	r1, [pc, #380]	; (800ff10 <__kernel_tanf+0x22c>)
 800fd94:	f7f0 feee 	bl	8000b74 <__addsf3>
 800fd98:	4629      	mov	r1, r5
 800fd9a:	f7f0 fff3 	bl	8000d84 <__aeabi_fmul>
 800fd9e:	495d      	ldr	r1, [pc, #372]	; (800ff14 <__kernel_tanf+0x230>)
 800fda0:	f7f0 fee8 	bl	8000b74 <__addsf3>
 800fda4:	4629      	mov	r1, r5
 800fda6:	f7f0 ffed 	bl	8000d84 <__aeabi_fmul>
 800fdaa:	495b      	ldr	r1, [pc, #364]	; (800ff18 <__kernel_tanf+0x234>)
 800fdac:	f7f0 fee2 	bl	8000b74 <__addsf3>
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	f7f0 ffe7 	bl	8000d84 <__aeabi_fmul>
 800fdb6:	4959      	ldr	r1, [pc, #356]	; (800ff1c <__kernel_tanf+0x238>)
 800fdb8:	f7f0 fedc 	bl	8000b74 <__addsf3>
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 ffe1 	bl	8000d84 <__aeabi_fmul>
 800fdc2:	4957      	ldr	r1, [pc, #348]	; (800ff20 <__kernel_tanf+0x23c>)
 800fdc4:	9001      	str	r0, [sp, #4]
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7f0 ffdc 	bl	8000d84 <__aeabi_fmul>
 800fdcc:	4955      	ldr	r1, [pc, #340]	; (800ff24 <__kernel_tanf+0x240>)
 800fdce:	f7f0 fed1 	bl	8000b74 <__addsf3>
 800fdd2:	4629      	mov	r1, r5
 800fdd4:	f7f0 ffd6 	bl	8000d84 <__aeabi_fmul>
 800fdd8:	4953      	ldr	r1, [pc, #332]	; (800ff28 <__kernel_tanf+0x244>)
 800fdda:	f7f0 fecb 	bl	8000b74 <__addsf3>
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 ffd0 	bl	8000d84 <__aeabi_fmul>
 800fde4:	4951      	ldr	r1, [pc, #324]	; (800ff2c <__kernel_tanf+0x248>)
 800fde6:	f7f0 fec5 	bl	8000b74 <__addsf3>
 800fdea:	4629      	mov	r1, r5
 800fdec:	f7f0 ffca 	bl	8000d84 <__aeabi_fmul>
 800fdf0:	494f      	ldr	r1, [pc, #316]	; (800ff30 <__kernel_tanf+0x24c>)
 800fdf2:	f7f0 febf 	bl	8000b74 <__addsf3>
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f7f0 ffc4 	bl	8000d84 <__aeabi_fmul>
 800fdfc:	494d      	ldr	r1, [pc, #308]	; (800ff34 <__kernel_tanf+0x250>)
 800fdfe:	f7f0 feb9 	bl	8000b74 <__addsf3>
 800fe02:	9b01      	ldr	r3, [sp, #4]
 800fe04:	4601      	mov	r1, r0
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7f0 feb4 	bl	8000b74 <__addsf3>
 800fe0c:	4659      	mov	r1, fp
 800fe0e:	f7f0 ffb9 	bl	8000d84 <__aeabi_fmul>
 800fe12:	4631      	mov	r1, r6
 800fe14:	f7f0 feae 	bl	8000b74 <__addsf3>
 800fe18:	4649      	mov	r1, r9
 800fe1a:	f7f0 ffb3 	bl	8000d84 <__aeabi_fmul>
 800fe1e:	4631      	mov	r1, r6
 800fe20:	f7f0 fea8 	bl	8000b74 <__addsf3>
 800fe24:	4605      	mov	r5, r0
 800fe26:	4944      	ldr	r1, [pc, #272]	; (800ff38 <__kernel_tanf+0x254>)
 800fe28:	4658      	mov	r0, fp
 800fe2a:	f7f0 ffab 	bl	8000d84 <__aeabi_fmul>
 800fe2e:	4629      	mov	r1, r5
 800fe30:	f7f0 fea0 	bl	8000b74 <__addsf3>
 800fe34:	4601      	mov	r1, r0
 800fe36:	4681      	mov	r9, r0
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f7f0 fe9b 	bl	8000b74 <__addsf3>
 800fe3e:	4b2f      	ldr	r3, [pc, #188]	; (800fefc <__kernel_tanf+0x218>)
 800fe40:	4605      	mov	r5, r0
 800fe42:	459a      	cmp	sl, r3
 800fe44:	db2b      	blt.n	800fe9e <__kernel_tanf+0x1ba>
 800fe46:	4640      	mov	r0, r8
 800fe48:	f7f0 ff48 	bl	8000cdc <__aeabi_i2f>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4606      	mov	r6, r0
 800fe50:	4628      	mov	r0, r5
 800fe52:	f7f0 ff97 	bl	8000d84 <__aeabi_fmul>
 800fe56:	4631      	mov	r1, r6
 800fe58:	4680      	mov	r8, r0
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f7f0 fe8a 	bl	8000b74 <__addsf3>
 800fe60:	4601      	mov	r1, r0
 800fe62:	4640      	mov	r0, r8
 800fe64:	f7f1 f842 	bl	8000eec <__aeabi_fdiv>
 800fe68:	4649      	mov	r1, r9
 800fe6a:	f7f0 fe81 	bl	8000b70 <__aeabi_fsub>
 800fe6e:	4601      	mov	r1, r0
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7f0 fe7d 	bl	8000b70 <__aeabi_fsub>
 800fe76:	4601      	mov	r1, r0
 800fe78:	f7f0 fe7c 	bl	8000b74 <__addsf3>
 800fe7c:	4601      	mov	r1, r0
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f7f0 fe76 	bl	8000b70 <__aeabi_fsub>
 800fe84:	17bf      	asrs	r7, r7, #30
 800fe86:	f007 0702 	and.w	r7, r7, #2
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	f1c7 0001 	rsb	r0, r7, #1
 800fe90:	f7f0 ff24 	bl	8000cdc <__aeabi_i2f>
 800fe94:	4601      	mov	r1, r0
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7f0 ff74 	bl	8000d84 <__aeabi_fmul>
 800fe9c:	e73e      	b.n	800fd1c <__kernel_tanf+0x38>
 800fe9e:	f1b8 0f01 	cmp.w	r8, #1
 800fea2:	d027      	beq.n	800fef4 <__kernel_tanf+0x210>
 800fea4:	4e25      	ldr	r6, [pc, #148]	; (800ff3c <__kernel_tanf+0x258>)
 800fea6:	4601      	mov	r1, r0
 800fea8:	ea06 0800 	and.w	r8, r6, r0
 800feac:	4812      	ldr	r0, [pc, #72]	; (800fef8 <__kernel_tanf+0x214>)
 800feae:	f7f1 f81d 	bl	8000eec <__aeabi_fdiv>
 800feb2:	4621      	mov	r1, r4
 800feb4:	4006      	ands	r6, r0
 800feb6:	4607      	mov	r7, r0
 800feb8:	4640      	mov	r0, r8
 800feba:	f7f0 fe59 	bl	8000b70 <__aeabi_fsub>
 800febe:	4601      	mov	r1, r0
 800fec0:	4648      	mov	r0, r9
 800fec2:	f7f0 fe55 	bl	8000b70 <__aeabi_fsub>
 800fec6:	4631      	mov	r1, r6
 800fec8:	f7f0 ff5c 	bl	8000d84 <__aeabi_fmul>
 800fecc:	4631      	mov	r1, r6
 800fece:	4604      	mov	r4, r0
 800fed0:	4640      	mov	r0, r8
 800fed2:	f7f0 ff57 	bl	8000d84 <__aeabi_fmul>
 800fed6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800feda:	f7f0 fe4b 	bl	8000b74 <__addsf3>
 800fede:	4601      	mov	r1, r0
 800fee0:	4620      	mov	r0, r4
 800fee2:	f7f0 fe47 	bl	8000b74 <__addsf3>
 800fee6:	4639      	mov	r1, r7
 800fee8:	f7f0 ff4c 	bl	8000d84 <__aeabi_fmul>
 800feec:	4631      	mov	r1, r6
 800feee:	f7f0 fe41 	bl	8000b74 <__addsf3>
 800fef2:	e713      	b.n	800fd1c <__kernel_tanf+0x38>
 800fef4:	4604      	mov	r4, r0
 800fef6:	e712      	b.n	800fd1e <__kernel_tanf+0x3a>
 800fef8:	bf800000 	.word	0xbf800000
 800fefc:	3f2ca140 	.word	0x3f2ca140
 800ff00:	3f490fda 	.word	0x3f490fda
 800ff04:	33222168 	.word	0x33222168
 800ff08:	37d95384 	.word	0x37d95384
 800ff0c:	3895c07a 	.word	0x3895c07a
 800ff10:	398137b9 	.word	0x398137b9
 800ff14:	3abede48 	.word	0x3abede48
 800ff18:	3c11371f 	.word	0x3c11371f
 800ff1c:	3d5d0dd1 	.word	0x3d5d0dd1
 800ff20:	b79bae5f 	.word	0xb79bae5f
 800ff24:	38a3f445 	.word	0x38a3f445
 800ff28:	3a1a26c8 	.word	0x3a1a26c8
 800ff2c:	3b6b6916 	.word	0x3b6b6916
 800ff30:	3cb327a4 	.word	0x3cb327a4
 800ff34:	3e088889 	.word	0x3e088889
 800ff38:	3eaaaaab 	.word	0x3eaaaaab
 800ff3c:	fffff000 	.word	0xfffff000

0800ff40 <atan>:
 800ff40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	4bb6      	ldr	r3, [pc, #728]	; (8010220 <atan+0x2e0>)
 800ff46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ff4a:	429e      	cmp	r6, r3
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	460d      	mov	r5, r1
 800ff50:	468b      	mov	fp, r1
 800ff52:	dd17      	ble.n	800ff84 <atan+0x44>
 800ff54:	4bb3      	ldr	r3, [pc, #716]	; (8010224 <atan+0x2e4>)
 800ff56:	429e      	cmp	r6, r3
 800ff58:	dc01      	bgt.n	800ff5e <atan+0x1e>
 800ff5a:	d109      	bne.n	800ff70 <atan+0x30>
 800ff5c:	b140      	cbz	r0, 800ff70 <atan+0x30>
 800ff5e:	4622      	mov	r2, r4
 800ff60:	462b      	mov	r3, r5
 800ff62:	4620      	mov	r0, r4
 800ff64:	4629      	mov	r1, r5
 800ff66:	f7f0 f901 	bl	800016c <__adddf3>
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	460d      	mov	r5, r1
 800ff6e:	e005      	b.n	800ff7c <atan+0x3c>
 800ff70:	f1bb 0f00 	cmp.w	fp, #0
 800ff74:	4cac      	ldr	r4, [pc, #688]	; (8010228 <atan+0x2e8>)
 800ff76:	f300 8121 	bgt.w	80101bc <atan+0x27c>
 800ff7a:	4dac      	ldr	r5, [pc, #688]	; (801022c <atan+0x2ec>)
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	4629      	mov	r1, r5
 800ff80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff84:	4baa      	ldr	r3, [pc, #680]	; (8010230 <atan+0x2f0>)
 800ff86:	429e      	cmp	r6, r3
 800ff88:	dc11      	bgt.n	800ffae <atan+0x6e>
 800ff8a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ff8e:	429e      	cmp	r6, r3
 800ff90:	dc0a      	bgt.n	800ffa8 <atan+0x68>
 800ff92:	a38b      	add	r3, pc, #556	; (adr r3, 80101c0 <atan+0x280>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	f7f0 f8e8 	bl	800016c <__adddf3>
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4ba5      	ldr	r3, [pc, #660]	; (8010234 <atan+0x2f4>)
 800ffa0:	f7f0 fd2a 	bl	80009f8 <__aeabi_dcmpgt>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d1e9      	bne.n	800ff7c <atan+0x3c>
 800ffa8:	f04f 3aff 	mov.w	sl, #4294967295
 800ffac:	e027      	b.n	800fffe <atan+0xbe>
 800ffae:	f000 f951 	bl	8010254 <fabs>
 800ffb2:	4ba1      	ldr	r3, [pc, #644]	; (8010238 <atan+0x2f8>)
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	429e      	cmp	r6, r3
 800ffb8:	460d      	mov	r5, r1
 800ffba:	f300 80b8 	bgt.w	801012e <atan+0x1ee>
 800ffbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ffc2:	429e      	cmp	r6, r3
 800ffc4:	f300 809c 	bgt.w	8010100 <atan+0x1c0>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	f7f0 f8ce 	bl	800016c <__adddf3>
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	4b98      	ldr	r3, [pc, #608]	; (8010234 <atan+0x2f4>)
 800ffd4:	f7f0 f8c8 	bl	8000168 <__aeabi_dsub>
 800ffd8:	2200      	movs	r2, #0
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460f      	mov	r7, r1
 800ffde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	4629      	mov	r1, r5
 800ffe6:	f7f0 f8c1 	bl	800016c <__adddf3>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4630      	mov	r0, r6
 800fff0:	4639      	mov	r1, r7
 800fff2:	f7f0 fb9b 	bl	800072c <__aeabi_ddiv>
 800fff6:	f04f 0a00 	mov.w	sl, #0
 800fffa:	4604      	mov	r4, r0
 800fffc:	460d      	mov	r5, r1
 800fffe:	4622      	mov	r2, r4
 8010000:	462b      	mov	r3, r5
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7f0 fa67 	bl	80004d8 <__aeabi_dmul>
 801000a:	4602      	mov	r2, r0
 801000c:	460b      	mov	r3, r1
 801000e:	4680      	mov	r8, r0
 8010010:	4689      	mov	r9, r1
 8010012:	f7f0 fa61 	bl	80004d8 <__aeabi_dmul>
 8010016:	a36c      	add	r3, pc, #432	; (adr r3, 80101c8 <atan+0x288>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	4606      	mov	r6, r0
 801001e:	460f      	mov	r7, r1
 8010020:	f7f0 fa5a 	bl	80004d8 <__aeabi_dmul>
 8010024:	a36a      	add	r3, pc, #424	; (adr r3, 80101d0 <atan+0x290>)
 8010026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002a:	f7f0 f89f 	bl	800016c <__adddf3>
 801002e:	4632      	mov	r2, r6
 8010030:	463b      	mov	r3, r7
 8010032:	f7f0 fa51 	bl	80004d8 <__aeabi_dmul>
 8010036:	a368      	add	r3, pc, #416	; (adr r3, 80101d8 <atan+0x298>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	f7f0 f896 	bl	800016c <__adddf3>
 8010040:	4632      	mov	r2, r6
 8010042:	463b      	mov	r3, r7
 8010044:	f7f0 fa48 	bl	80004d8 <__aeabi_dmul>
 8010048:	a365      	add	r3, pc, #404	; (adr r3, 80101e0 <atan+0x2a0>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	f7f0 f88d 	bl	800016c <__adddf3>
 8010052:	4632      	mov	r2, r6
 8010054:	463b      	mov	r3, r7
 8010056:	f7f0 fa3f 	bl	80004d8 <__aeabi_dmul>
 801005a:	a363      	add	r3, pc, #396	; (adr r3, 80101e8 <atan+0x2a8>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f7f0 f884 	bl	800016c <__adddf3>
 8010064:	4632      	mov	r2, r6
 8010066:	463b      	mov	r3, r7
 8010068:	f7f0 fa36 	bl	80004d8 <__aeabi_dmul>
 801006c:	a360      	add	r3, pc, #384	; (adr r3, 80101f0 <atan+0x2b0>)
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f0 f87b 	bl	800016c <__adddf3>
 8010076:	4642      	mov	r2, r8
 8010078:	464b      	mov	r3, r9
 801007a:	f7f0 fa2d 	bl	80004d8 <__aeabi_dmul>
 801007e:	a35e      	add	r3, pc, #376	; (adr r3, 80101f8 <atan+0x2b8>)
 8010080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010084:	4680      	mov	r8, r0
 8010086:	4689      	mov	r9, r1
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	f7f0 fa24 	bl	80004d8 <__aeabi_dmul>
 8010090:	a35b      	add	r3, pc, #364	; (adr r3, 8010200 <atan+0x2c0>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	f7f0 f867 	bl	8000168 <__aeabi_dsub>
 801009a:	4632      	mov	r2, r6
 801009c:	463b      	mov	r3, r7
 801009e:	f7f0 fa1b 	bl	80004d8 <__aeabi_dmul>
 80100a2:	a359      	add	r3, pc, #356	; (adr r3, 8010208 <atan+0x2c8>)
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	f7f0 f85e 	bl	8000168 <__aeabi_dsub>
 80100ac:	4632      	mov	r2, r6
 80100ae:	463b      	mov	r3, r7
 80100b0:	f7f0 fa12 	bl	80004d8 <__aeabi_dmul>
 80100b4:	a356      	add	r3, pc, #344	; (adr r3, 8010210 <atan+0x2d0>)
 80100b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ba:	f7f0 f855 	bl	8000168 <__aeabi_dsub>
 80100be:	4632      	mov	r2, r6
 80100c0:	463b      	mov	r3, r7
 80100c2:	f7f0 fa09 	bl	80004d8 <__aeabi_dmul>
 80100c6:	a354      	add	r3, pc, #336	; (adr r3, 8010218 <atan+0x2d8>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f7f0 f84c 	bl	8000168 <__aeabi_dsub>
 80100d0:	4632      	mov	r2, r6
 80100d2:	463b      	mov	r3, r7
 80100d4:	f7f0 fa00 	bl	80004d8 <__aeabi_dmul>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	4640      	mov	r0, r8
 80100de:	4649      	mov	r1, r9
 80100e0:	f7f0 f844 	bl	800016c <__adddf3>
 80100e4:	4622      	mov	r2, r4
 80100e6:	462b      	mov	r3, r5
 80100e8:	f7f0 f9f6 	bl	80004d8 <__aeabi_dmul>
 80100ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	d144      	bne.n	8010180 <atan+0x240>
 80100f6:	4620      	mov	r0, r4
 80100f8:	4629      	mov	r1, r5
 80100fa:	f7f0 f835 	bl	8000168 <__aeabi_dsub>
 80100fe:	e734      	b.n	800ff6a <atan+0x2a>
 8010100:	2200      	movs	r2, #0
 8010102:	4b4c      	ldr	r3, [pc, #304]	; (8010234 <atan+0x2f4>)
 8010104:	f7f0 f830 	bl	8000168 <__aeabi_dsub>
 8010108:	2200      	movs	r2, #0
 801010a:	4606      	mov	r6, r0
 801010c:	460f      	mov	r7, r1
 801010e:	4620      	mov	r0, r4
 8010110:	4629      	mov	r1, r5
 8010112:	4b48      	ldr	r3, [pc, #288]	; (8010234 <atan+0x2f4>)
 8010114:	f7f0 f82a 	bl	800016c <__adddf3>
 8010118:	4602      	mov	r2, r0
 801011a:	460b      	mov	r3, r1
 801011c:	4630      	mov	r0, r6
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 fb04 	bl	800072c <__aeabi_ddiv>
 8010124:	f04f 0a01 	mov.w	sl, #1
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	e767      	b.n	800fffe <atan+0xbe>
 801012e:	4b43      	ldr	r3, [pc, #268]	; (801023c <atan+0x2fc>)
 8010130:	429e      	cmp	r6, r3
 8010132:	da1a      	bge.n	801016a <atan+0x22a>
 8010134:	2200      	movs	r2, #0
 8010136:	4b42      	ldr	r3, [pc, #264]	; (8010240 <atan+0x300>)
 8010138:	f7f0 f816 	bl	8000168 <__aeabi_dsub>
 801013c:	2200      	movs	r2, #0
 801013e:	4606      	mov	r6, r0
 8010140:	460f      	mov	r7, r1
 8010142:	4620      	mov	r0, r4
 8010144:	4629      	mov	r1, r5
 8010146:	4b3e      	ldr	r3, [pc, #248]	; (8010240 <atan+0x300>)
 8010148:	f7f0 f9c6 	bl	80004d8 <__aeabi_dmul>
 801014c:	2200      	movs	r2, #0
 801014e:	4b39      	ldr	r3, [pc, #228]	; (8010234 <atan+0x2f4>)
 8010150:	f7f0 f80c 	bl	800016c <__adddf3>
 8010154:	4602      	mov	r2, r0
 8010156:	460b      	mov	r3, r1
 8010158:	4630      	mov	r0, r6
 801015a:	4639      	mov	r1, r7
 801015c:	f7f0 fae6 	bl	800072c <__aeabi_ddiv>
 8010160:	f04f 0a02 	mov.w	sl, #2
 8010164:	4604      	mov	r4, r0
 8010166:	460d      	mov	r5, r1
 8010168:	e749      	b.n	800fffe <atan+0xbe>
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	2000      	movs	r0, #0
 8010170:	4934      	ldr	r1, [pc, #208]	; (8010244 <atan+0x304>)
 8010172:	f7f0 fadb 	bl	800072c <__aeabi_ddiv>
 8010176:	f04f 0a03 	mov.w	sl, #3
 801017a:	4604      	mov	r4, r0
 801017c:	460d      	mov	r5, r1
 801017e:	e73e      	b.n	800fffe <atan+0xbe>
 8010180:	4b31      	ldr	r3, [pc, #196]	; (8010248 <atan+0x308>)
 8010182:	4e32      	ldr	r6, [pc, #200]	; (801024c <atan+0x30c>)
 8010184:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010188:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801018c:	e9da 2300 	ldrd	r2, r3, [sl]
 8010190:	f7ef ffea 	bl	8000168 <__aeabi_dsub>
 8010194:	4622      	mov	r2, r4
 8010196:	462b      	mov	r3, r5
 8010198:	f7ef ffe6 	bl	8000168 <__aeabi_dsub>
 801019c:	4602      	mov	r2, r0
 801019e:	460b      	mov	r3, r1
 80101a0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80101a4:	f7ef ffe0 	bl	8000168 <__aeabi_dsub>
 80101a8:	f1bb 0f00 	cmp.w	fp, #0
 80101ac:	4604      	mov	r4, r0
 80101ae:	460d      	mov	r5, r1
 80101b0:	f6bf aee4 	bge.w	800ff7c <atan+0x3c>
 80101b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101b8:	461d      	mov	r5, r3
 80101ba:	e6df      	b.n	800ff7c <atan+0x3c>
 80101bc:	4d24      	ldr	r5, [pc, #144]	; (8010250 <atan+0x310>)
 80101be:	e6dd      	b.n	800ff7c <atan+0x3c>
 80101c0:	8800759c 	.word	0x8800759c
 80101c4:	7e37e43c 	.word	0x7e37e43c
 80101c8:	e322da11 	.word	0xe322da11
 80101cc:	3f90ad3a 	.word	0x3f90ad3a
 80101d0:	24760deb 	.word	0x24760deb
 80101d4:	3fa97b4b 	.word	0x3fa97b4b
 80101d8:	a0d03d51 	.word	0xa0d03d51
 80101dc:	3fb10d66 	.word	0x3fb10d66
 80101e0:	c54c206e 	.word	0xc54c206e
 80101e4:	3fb745cd 	.word	0x3fb745cd
 80101e8:	920083ff 	.word	0x920083ff
 80101ec:	3fc24924 	.word	0x3fc24924
 80101f0:	5555550d 	.word	0x5555550d
 80101f4:	3fd55555 	.word	0x3fd55555
 80101f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80101fc:	bfa2b444 	.word	0xbfa2b444
 8010200:	52defd9a 	.word	0x52defd9a
 8010204:	3fadde2d 	.word	0x3fadde2d
 8010208:	af749a6d 	.word	0xaf749a6d
 801020c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010210:	fe231671 	.word	0xfe231671
 8010214:	3fbc71c6 	.word	0x3fbc71c6
 8010218:	9998ebc4 	.word	0x9998ebc4
 801021c:	3fc99999 	.word	0x3fc99999
 8010220:	440fffff 	.word	0x440fffff
 8010224:	7ff00000 	.word	0x7ff00000
 8010228:	54442d18 	.word	0x54442d18
 801022c:	bff921fb 	.word	0xbff921fb
 8010230:	3fdbffff 	.word	0x3fdbffff
 8010234:	3ff00000 	.word	0x3ff00000
 8010238:	3ff2ffff 	.word	0x3ff2ffff
 801023c:	40038000 	.word	0x40038000
 8010240:	3ff80000 	.word	0x3ff80000
 8010244:	bff00000 	.word	0xbff00000
 8010248:	08011800 	.word	0x08011800
 801024c:	080117e0 	.word	0x080117e0
 8010250:	3ff921fb 	.word	0x3ff921fb

08010254 <fabs>:
 8010254:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010258:	4770      	bx	lr
 801025a:	0000      	movs	r0, r0
 801025c:	0000      	movs	r0, r0
	...

08010260 <floor>:
 8010260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010264:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010268:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801026c:	2e13      	cmp	r6, #19
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4607      	mov	r7, r0
 8010274:	460c      	mov	r4, r1
 8010276:	4605      	mov	r5, r0
 8010278:	dc34      	bgt.n	80102e4 <floor+0x84>
 801027a:	2e00      	cmp	r6, #0
 801027c:	da15      	bge.n	80102aa <floor+0x4a>
 801027e:	a334      	add	r3, pc, #208	; (adr r3, 8010350 <floor+0xf0>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f7ef ff72 	bl	800016c <__adddf3>
 8010288:	2200      	movs	r2, #0
 801028a:	2300      	movs	r3, #0
 801028c:	f7f0 fbb4 	bl	80009f8 <__aeabi_dcmpgt>
 8010290:	b140      	cbz	r0, 80102a4 <floor+0x44>
 8010292:	2c00      	cmp	r4, #0
 8010294:	da59      	bge.n	801034a <floor+0xea>
 8010296:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801029a:	ea57 0503 	orrs.w	r5, r7, r3
 801029e:	d001      	beq.n	80102a4 <floor+0x44>
 80102a0:	2500      	movs	r5, #0
 80102a2:	4c2d      	ldr	r4, [pc, #180]	; (8010358 <floor+0xf8>)
 80102a4:	4623      	mov	r3, r4
 80102a6:	462f      	mov	r7, r5
 80102a8:	e025      	b.n	80102f6 <floor+0x96>
 80102aa:	4a2c      	ldr	r2, [pc, #176]	; (801035c <floor+0xfc>)
 80102ac:	fa42 f806 	asr.w	r8, r2, r6
 80102b0:	ea01 0208 	and.w	r2, r1, r8
 80102b4:	4302      	orrs	r2, r0
 80102b6:	d01e      	beq.n	80102f6 <floor+0x96>
 80102b8:	a325      	add	r3, pc, #148	; (adr r3, 8010350 <floor+0xf0>)
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	f7ef ff55 	bl	800016c <__adddf3>
 80102c2:	2200      	movs	r2, #0
 80102c4:	2300      	movs	r3, #0
 80102c6:	f7f0 fb97 	bl	80009f8 <__aeabi_dcmpgt>
 80102ca:	2800      	cmp	r0, #0
 80102cc:	d0ea      	beq.n	80102a4 <floor+0x44>
 80102ce:	2c00      	cmp	r4, #0
 80102d0:	bfbe      	ittt	lt
 80102d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80102d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80102da:	19a4      	addlt	r4, r4, r6
 80102dc:	2500      	movs	r5, #0
 80102de:	ea24 0408 	bic.w	r4, r4, r8
 80102e2:	e7df      	b.n	80102a4 <floor+0x44>
 80102e4:	2e33      	cmp	r6, #51	; 0x33
 80102e6:	dd0a      	ble.n	80102fe <floor+0x9e>
 80102e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80102ec:	d103      	bne.n	80102f6 <floor+0x96>
 80102ee:	f7ef ff3d 	bl	800016c <__adddf3>
 80102f2:	4607      	mov	r7, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	4638      	mov	r0, r7
 80102f8:	4619      	mov	r1, r3
 80102fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010302:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8010306:	fa22 f808 	lsr.w	r8, r2, r8
 801030a:	ea18 0f00 	tst.w	r8, r0
 801030e:	d0f2      	beq.n	80102f6 <floor+0x96>
 8010310:	a30f      	add	r3, pc, #60	; (adr r3, 8010350 <floor+0xf0>)
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	f7ef ff29 	bl	800016c <__adddf3>
 801031a:	2200      	movs	r2, #0
 801031c:	2300      	movs	r3, #0
 801031e:	f7f0 fb6b 	bl	80009f8 <__aeabi_dcmpgt>
 8010322:	2800      	cmp	r0, #0
 8010324:	d0be      	beq.n	80102a4 <floor+0x44>
 8010326:	2c00      	cmp	r4, #0
 8010328:	da02      	bge.n	8010330 <floor+0xd0>
 801032a:	2e14      	cmp	r6, #20
 801032c:	d103      	bne.n	8010336 <floor+0xd6>
 801032e:	3401      	adds	r4, #1
 8010330:	ea25 0508 	bic.w	r5, r5, r8
 8010334:	e7b6      	b.n	80102a4 <floor+0x44>
 8010336:	2301      	movs	r3, #1
 8010338:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801033c:	fa03 f606 	lsl.w	r6, r3, r6
 8010340:	4435      	add	r5, r6
 8010342:	42bd      	cmp	r5, r7
 8010344:	bf38      	it	cc
 8010346:	18e4      	addcc	r4, r4, r3
 8010348:	e7f2      	b.n	8010330 <floor+0xd0>
 801034a:	2500      	movs	r5, #0
 801034c:	462c      	mov	r4, r5
 801034e:	e7a9      	b.n	80102a4 <floor+0x44>
 8010350:	8800759c 	.word	0x8800759c
 8010354:	7e37e43c 	.word	0x7e37e43c
 8010358:	bff00000 	.word	0xbff00000
 801035c:	000fffff 	.word	0x000fffff

08010360 <scalbn>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8010366:	4604      	mov	r4, r0
 8010368:	460d      	mov	r5, r1
 801036a:	4617      	mov	r7, r2
 801036c:	460b      	mov	r3, r1
 801036e:	b996      	cbnz	r6, 8010396 <scalbn+0x36>
 8010370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010374:	4303      	orrs	r3, r0
 8010376:	d039      	beq.n	80103ec <scalbn+0x8c>
 8010378:	4b35      	ldr	r3, [pc, #212]	; (8010450 <scalbn+0xf0>)
 801037a:	2200      	movs	r2, #0
 801037c:	f7f0 f8ac 	bl	80004d8 <__aeabi_dmul>
 8010380:	4b34      	ldr	r3, [pc, #208]	; (8010454 <scalbn+0xf4>)
 8010382:	4604      	mov	r4, r0
 8010384:	429f      	cmp	r7, r3
 8010386:	460d      	mov	r5, r1
 8010388:	da0f      	bge.n	80103aa <scalbn+0x4a>
 801038a:	a32d      	add	r3, pc, #180	; (adr r3, 8010440 <scalbn+0xe0>)
 801038c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010390:	f7f0 f8a2 	bl	80004d8 <__aeabi_dmul>
 8010394:	e006      	b.n	80103a4 <scalbn+0x44>
 8010396:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801039a:	4296      	cmp	r6, r2
 801039c:	d10a      	bne.n	80103b4 <scalbn+0x54>
 801039e:	4602      	mov	r2, r0
 80103a0:	f7ef fee4 	bl	800016c <__adddf3>
 80103a4:	4604      	mov	r4, r0
 80103a6:	460d      	mov	r5, r1
 80103a8:	e020      	b.n	80103ec <scalbn+0x8c>
 80103aa:	460b      	mov	r3, r1
 80103ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80103b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80103b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80103b8:	19b9      	adds	r1, r7, r6
 80103ba:	4291      	cmp	r1, r2
 80103bc:	dd0e      	ble.n	80103dc <scalbn+0x7c>
 80103be:	a322      	add	r3, pc, #136	; (adr r3, 8010448 <scalbn+0xe8>)
 80103c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80103c8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80103cc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80103d0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80103d4:	4820      	ldr	r0, [pc, #128]	; (8010458 <scalbn+0xf8>)
 80103d6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80103da:	e7d9      	b.n	8010390 <scalbn+0x30>
 80103dc:	2900      	cmp	r1, #0
 80103de:	dd08      	ble.n	80103f2 <scalbn+0x92>
 80103e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80103e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80103e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80103ec:	4620      	mov	r0, r4
 80103ee:	4629      	mov	r1, r5
 80103f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80103f6:	da16      	bge.n	8010426 <scalbn+0xc6>
 80103f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80103fc:	429f      	cmp	r7, r3
 80103fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8010402:	dd08      	ble.n	8010416 <scalbn+0xb6>
 8010404:	4c15      	ldr	r4, [pc, #84]	; (801045c <scalbn+0xfc>)
 8010406:	4814      	ldr	r0, [pc, #80]	; (8010458 <scalbn+0xf8>)
 8010408:	f363 74df 	bfi	r4, r3, #31, #1
 801040c:	a30e      	add	r3, pc, #56	; (adr r3, 8010448 <scalbn+0xe8>)
 801040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010412:	4621      	mov	r1, r4
 8010414:	e7bc      	b.n	8010390 <scalbn+0x30>
 8010416:	4c12      	ldr	r4, [pc, #72]	; (8010460 <scalbn+0x100>)
 8010418:	4812      	ldr	r0, [pc, #72]	; (8010464 <scalbn+0x104>)
 801041a:	f363 74df 	bfi	r4, r3, #31, #1
 801041e:	a308      	add	r3, pc, #32	; (adr r3, 8010440 <scalbn+0xe0>)
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	e7f5      	b.n	8010412 <scalbn+0xb2>
 8010426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801042a:	3136      	adds	r1, #54	; 0x36
 801042c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010430:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8010434:	4620      	mov	r0, r4
 8010436:	4629      	mov	r1, r5
 8010438:	2200      	movs	r2, #0
 801043a:	4b0b      	ldr	r3, [pc, #44]	; (8010468 <scalbn+0x108>)
 801043c:	e7a8      	b.n	8010390 <scalbn+0x30>
 801043e:	bf00      	nop
 8010440:	c2f8f359 	.word	0xc2f8f359
 8010444:	01a56e1f 	.word	0x01a56e1f
 8010448:	8800759c 	.word	0x8800759c
 801044c:	7e37e43c 	.word	0x7e37e43c
 8010450:	43500000 	.word	0x43500000
 8010454:	ffff3cb0 	.word	0xffff3cb0
 8010458:	8800759c 	.word	0x8800759c
 801045c:	7e37e43c 	.word	0x7e37e43c
 8010460:	01a56e1f 	.word	0x01a56e1f
 8010464:	c2f8f359 	.word	0xc2f8f359
 8010468:	3c900000 	.word	0x3c900000

0801046c <floorf>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010472:	3d7f      	subs	r5, #127	; 0x7f
 8010474:	2d16      	cmp	r5, #22
 8010476:	4601      	mov	r1, r0
 8010478:	4604      	mov	r4, r0
 801047a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801047e:	dc26      	bgt.n	80104ce <floorf+0x62>
 8010480:	2d00      	cmp	r5, #0
 8010482:	da0e      	bge.n	80104a2 <floorf+0x36>
 8010484:	4917      	ldr	r1, [pc, #92]	; (80104e4 <floorf+0x78>)
 8010486:	f7f0 fb75 	bl	8000b74 <__addsf3>
 801048a:	2100      	movs	r1, #0
 801048c:	f7f0 fe36 	bl	80010fc <__aeabi_fcmpgt>
 8010490:	b128      	cbz	r0, 801049e <floorf+0x32>
 8010492:	2c00      	cmp	r4, #0
 8010494:	da23      	bge.n	80104de <floorf+0x72>
 8010496:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <floorf+0x7c>)
 8010498:	2e00      	cmp	r6, #0
 801049a:	bf18      	it	ne
 801049c:	461c      	movne	r4, r3
 801049e:	4621      	mov	r1, r4
 80104a0:	e01b      	b.n	80104da <floorf+0x6e>
 80104a2:	4e12      	ldr	r6, [pc, #72]	; (80104ec <floorf+0x80>)
 80104a4:	412e      	asrs	r6, r5
 80104a6:	4230      	tst	r0, r6
 80104a8:	d017      	beq.n	80104da <floorf+0x6e>
 80104aa:	490e      	ldr	r1, [pc, #56]	; (80104e4 <floorf+0x78>)
 80104ac:	f7f0 fb62 	bl	8000b74 <__addsf3>
 80104b0:	2100      	movs	r1, #0
 80104b2:	f7f0 fe23 	bl	80010fc <__aeabi_fcmpgt>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d0f1      	beq.n	801049e <floorf+0x32>
 80104ba:	2c00      	cmp	r4, #0
 80104bc:	bfbe      	ittt	lt
 80104be:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80104c2:	fa43 f505 	asrlt.w	r5, r3, r5
 80104c6:	1964      	addlt	r4, r4, r5
 80104c8:	ea24 0406 	bic.w	r4, r4, r6
 80104cc:	e7e7      	b.n	801049e <floorf+0x32>
 80104ce:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80104d2:	d302      	bcc.n	80104da <floorf+0x6e>
 80104d4:	f7f0 fb4e 	bl	8000b74 <__addsf3>
 80104d8:	4601      	mov	r1, r0
 80104da:	4608      	mov	r0, r1
 80104dc:	bd70      	pop	{r4, r5, r6, pc}
 80104de:	2400      	movs	r4, #0
 80104e0:	e7dd      	b.n	801049e <floorf+0x32>
 80104e2:	bf00      	nop
 80104e4:	7149f2ca 	.word	0x7149f2ca
 80104e8:	bf800000 	.word	0xbf800000
 80104ec:	007fffff 	.word	0x007fffff

080104f0 <scalbnf>:
 80104f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	4603      	mov	r3, r0
 80104f8:	460d      	mov	r5, r1
 80104fa:	4604      	mov	r4, r0
 80104fc:	d02a      	beq.n	8010554 <scalbnf+0x64>
 80104fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010502:	d304      	bcc.n	801050e <scalbnf+0x1e>
 8010504:	4601      	mov	r1, r0
 8010506:	f7f0 fb35 	bl	8000b74 <__addsf3>
 801050a:	4603      	mov	r3, r0
 801050c:	e022      	b.n	8010554 <scalbnf+0x64>
 801050e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8010512:	d117      	bne.n	8010544 <scalbnf+0x54>
 8010514:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010518:	f7f0 fc34 	bl	8000d84 <__aeabi_fmul>
 801051c:	4a17      	ldr	r2, [pc, #92]	; (801057c <scalbnf+0x8c>)
 801051e:	4603      	mov	r3, r0
 8010520:	4295      	cmp	r5, r2
 8010522:	db0b      	blt.n	801053c <scalbnf+0x4c>
 8010524:	4604      	mov	r4, r0
 8010526:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801052a:	3a19      	subs	r2, #25
 801052c:	442a      	add	r2, r5
 801052e:	2afe      	cmp	r2, #254	; 0xfe
 8010530:	dd0a      	ble.n	8010548 <scalbnf+0x58>
 8010532:	4913      	ldr	r1, [pc, #76]	; (8010580 <scalbnf+0x90>)
 8010534:	4618      	mov	r0, r3
 8010536:	f361 001e 	bfi	r0, r1, #0, #31
 801053a:	e000      	b.n	801053e <scalbnf+0x4e>
 801053c:	4911      	ldr	r1, [pc, #68]	; (8010584 <scalbnf+0x94>)
 801053e:	f7f0 fc21 	bl	8000d84 <__aeabi_fmul>
 8010542:	e7e2      	b.n	801050a <scalbnf+0x1a>
 8010544:	0dd2      	lsrs	r2, r2, #23
 8010546:	e7f1      	b.n	801052c <scalbnf+0x3c>
 8010548:	2a00      	cmp	r2, #0
 801054a:	dd05      	ble.n	8010558 <scalbnf+0x68>
 801054c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8010550:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8010554:	4618      	mov	r0, r3
 8010556:	bd38      	pop	{r3, r4, r5, pc}
 8010558:	f112 0f16 	cmn.w	r2, #22
 801055c:	da05      	bge.n	801056a <scalbnf+0x7a>
 801055e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010562:	4295      	cmp	r5, r2
 8010564:	dce5      	bgt.n	8010532 <scalbnf+0x42>
 8010566:	4907      	ldr	r1, [pc, #28]	; (8010584 <scalbnf+0x94>)
 8010568:	e7e4      	b.n	8010534 <scalbnf+0x44>
 801056a:	3219      	adds	r2, #25
 801056c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8010570:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8010574:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8010578:	e7e1      	b.n	801053e <scalbnf+0x4e>
 801057a:	bf00      	nop
 801057c:	ffff3cb0 	.word	0xffff3cb0
 8010580:	7149f2ca 	.word	0x7149f2ca
 8010584:	0da24260 	.word	0x0da24260

08010588 <_init>:
 8010588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801058a:	bf00      	nop
 801058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801058e:	bc08      	pop	{r3}
 8010590:	469e      	mov	lr, r3
 8010592:	4770      	bx	lr

08010594 <_fini>:
 8010594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010596:	bf00      	nop
 8010598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801059a:	bc08      	pop	{r3}
 801059c:	469e      	mov	lr, r3
 801059e:	4770      	bx	lr
